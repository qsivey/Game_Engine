
ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f64  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012e0  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007444  08007444  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007444  08007444  00017444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800744c  0800744c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800744c  0800744c  0001744c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007450  08007450  00017450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000080  080074d4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00001e04  200005ac  080074d4  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df53  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002158  00000000  00000000  0002e001  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a48  00000000  00000000  00030160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000918  00000000  00000000  00030ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028e2b  00000000  00000000  000314c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b496  00000000  00000000  0005a2eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc60c  00000000  00000000  00065781  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161d8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb8  00000000  00000000  00161e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800614c 	.word	0x0800614c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800614c 	.word	0x0800614c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f2:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_ADC1_Init+0x98>)
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <MX_ADC1_Init+0x9c>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_ADC1_Init+0x98>)
 80005fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_ADC1_Init+0x98>)
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <MX_ADC1_Init+0xa0>)
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_ADC1_Init+0x98>)
 800062e:	2201      	movs	r2, #1
 8000630:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_ADC1_Init+0x98>)
 800063c:	2201      	movs	r2, #1
 800063e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <MX_ADC1_Init+0x98>)
 8000642:	f003 f9ef 	bl	8003a24 <HAL_ADC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800064c:	f002 fbda 	bl	8002e04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000654:	2301      	movs	r3, #1
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_ADC1_Init+0x98>)
 8000662:	f003 fbbd 	bl	8003de0 <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800066c:	f002 fbca 	bl	8002e04 <Error_Handler>
  }

}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200004b0 	.word	0x200004b0
 800067c:	40012000 	.word	0x40012000
 8000680:	0f000001 	.word	0x0f000001

08000684 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <MX_ADC3_Init+0x98>)
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <MX_ADC3_Init+0x9c>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_ADC3_Init+0x98>)
 800069e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_ADC3_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_ADC3_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_ADC3_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_ADC3_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_ADC3_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_ADC3_Init+0x98>)
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_ADC3_Init+0xa0>)
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_ADC3_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_ADC3_Init+0x98>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_ADC3_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_ADC3_Init+0x98>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_ADC3_Init+0x98>)
 80006e6:	f003 f99d 	bl	8003a24 <HAL_ADC_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006f0:	f002 fb88 	bl	8002e04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006f4:	230f      	movs	r3, #15
 80006f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_ADC3_Init+0x98>)
 8000706:	f003 fb6b 	bl	8003de0 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000710:	f002 fb78 	bl	8002e04 <Error_Handler>
  }

}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200004f8 	.word	0x200004f8
 8000720:	40012200 	.word	0x40012200
 8000724:	0f000001 	.word	0x0f000001

08000728 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <HAL_ADC_MspInit+0xc8>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d124      	bne.n	8000794 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <HAL_ADC_MspInit+0xcc>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	4a29      	ldr	r2, [pc, #164]	; (80007f4 <HAL_ADC_MspInit+0xcc>)
 8000750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000754:	6453      	str	r3, [r2, #68]	; 0x44
 8000756:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <HAL_ADC_MspInit+0xcc>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <HAL_ADC_MspInit+0xcc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a23      	ldr	r2, [pc, #140]	; (80007f4 <HAL_ADC_MspInit+0xcc>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <HAL_ADC_MspInit+0xcc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800077a:	2301      	movs	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	481a      	ldr	r0, [pc, #104]	; (80007f8 <HAL_ADC_MspInit+0xd0>)
 800078e:	f003 fe51 	bl	8004434 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000792:	e028      	b.n	80007e6 <HAL_ADC_MspInit+0xbe>
  else if(adcHandle->Instance==ADC3)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a18      	ldr	r2, [pc, #96]	; (80007fc <HAL_ADC_MspInit+0xd4>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d123      	bne.n	80007e6 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_ADC_MspInit+0xcc>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <HAL_ADC_MspInit+0xcc>)
 80007a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a8:	6453      	str	r3, [r2, #68]	; 0x44
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_ADC_MspInit+0xcc>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_ADC_MspInit+0xcc>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_ADC_MspInit+0xcc>)
 80007bc:	f043 0320 	orr.w	r3, r3, #32
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_ADC_MspInit+0xcc>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0320 	and.w	r3, r3, #32
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ce:	2320      	movs	r3, #32
 80007d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d2:	2303      	movs	r3, #3
 80007d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <HAL_ADC_MspInit+0xd8>)
 80007e2:	f003 fe27 	bl	8004434 <HAL_GPIO_Init>
}
 80007e6:	bf00      	nop
 80007e8:	3730      	adds	r7, #48	; 0x30
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40012000 	.word	0x40012000
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40012200 	.word	0x40012200
 8000800:	40021400 	.word	0x40021400

08000804 <ReadFromADC>:
#include "game.h"

// ========================= HARDWARE FUNCTIONS =========================

u16 ReadFromADC(u8 ADC_Channel)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
	u16 value = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	81fb      	strh	r3, [r7, #14]

	if (ADC_Channel == 1)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d10f      	bne.n	8000838 <ReadFromADC+0x34>
	{
		HAL_ADC_Start(&hadc1);
 8000818:	4813      	ldr	r0, [pc, #76]	; (8000868 <ReadFromADC+0x64>)
 800081a:	f003 f947 	bl	8003aac <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 800081e:	2164      	movs	r1, #100	; 0x64
 8000820:	4811      	ldr	r0, [pc, #68]	; (8000868 <ReadFromADC+0x64>)
 8000822:	f003 fa45 	bl	8003cb0 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc1);
 8000826:	4810      	ldr	r0, [pc, #64]	; (8000868 <ReadFromADC+0x64>)
 8000828:	f003 facd 	bl	8003dc6 <HAL_ADC_GetValue>
 800082c:	4603      	mov	r3, r0
 800082e:	81fb      	strh	r3, [r7, #14]
		HAL_ADC_Stop(&hadc1);
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <ReadFromADC+0x64>)
 8000832:	f003 fa09 	bl	8003c48 <HAL_ADC_Stop>
 8000836:	e011      	b.n	800085c <ReadFromADC+0x58>
	}

	else if (ADC_Channel == 2)
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d10e      	bne.n	800085c <ReadFromADC+0x58>
	{
		HAL_ADC_Start(&hadc3);
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <ReadFromADC+0x68>)
 8000840:	f003 f934 	bl	8003aac <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, 100);
 8000844:	2164      	movs	r1, #100	; 0x64
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <ReadFromADC+0x68>)
 8000848:	f003 fa32 	bl	8003cb0 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc3);
 800084c:	4807      	ldr	r0, [pc, #28]	; (800086c <ReadFromADC+0x68>)
 800084e:	f003 faba 	bl	8003dc6 <HAL_ADC_GetValue>
 8000852:	4603      	mov	r3, r0
 8000854:	81fb      	strh	r3, [r7, #14]
		HAL_ADC_Stop(&hadc3);
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <ReadFromADC+0x68>)
 8000858:	f003 f9f6 	bl	8003c48 <HAL_ADC_Stop>
	}

	return value;
 800085c:	89fb      	ldrh	r3, [r7, #14]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200004b0 	.word	0x200004b0
 800086c:	200004f8 	.word	0x200004f8

08000870 <ButtonHandler>:

// ====================== PROCESSING FUNCTIONS =========================

_USERBUTT ButtonHandler (void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(JOY_BUT_GPIO_Port, JOY_BUT_Pin))
 8000874:	2120      	movs	r1, #32
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <ButtonHandler+0x1c>)
 8000878:	f003 ff86 	bl	8004788 <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <ButtonHandler+0x16>
		return ON;
 8000882:	2301      	movs	r3, #1
 8000884:	e000      	b.n	8000888 <ButtonHandler+0x18>
	else
		return OFF;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40020400 	.word	0x40020400

08000890 <_GameEngineBulletInit>:

void _GameEngineBulletInit ( _GameObject* objStarship, _GameObject* objBullet)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
	objBullet[objStarship->bulletCount].speed = BULLET_SPEED;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7b5b      	ldrb	r3, [r3, #13]
 800089e:	461a      	mov	r2, r3
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	461a      	mov	r2, r3
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	2204      	movs	r2, #4
 80008b0:	729a      	strb	r2, [r3, #10]
	objBullet[objStarship->bulletCount].app = APPEAR;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7b5b      	ldrb	r3, [r3, #13]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4613      	mov	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	4413      	add	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	461a      	mov	r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	4413      	add	r3, r2
 80008c6:	2200      	movs	r2, #0
 80008c8:	745a      	strb	r2, [r3, #17]
	objBullet[objStarship->bulletCount].x_cor = objStarship->x_cor + SPRITE16;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	3310      	adds	r3, #16
 80008d4:	b2d9      	uxtb	r1, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	7b5b      	ldrb	r3, [r3, #13]
 80008da:	461a      	mov	r2, r3
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	461a      	mov	r2, r3
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	b24a      	sxtb	r2, r1
 80008ec:	719a      	strb	r2, [r3, #6]
	objBullet[objStarship->bulletCount].y_cor = objStarship->y_cor + SPRITE8 - 1;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	79da      	ldrb	r2, [r3, #7]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7b5b      	ldrb	r3, [r3, #13]
 80008f6:	4619      	mov	r1, r3
 80008f8:	460b      	mov	r3, r1
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	440b      	add	r3, r1
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4619      	mov	r1, r3
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	440b      	add	r3, r1
 8000906:	3207      	adds	r2, #7
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	71da      	strb	r2, [r3, #7]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <_GameEngineBossBulletInit>:

void _GameEngineBossBulletInit (_GameObject* objBoss, _GameObject* objBossBullet)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
	objBossBullet[objBoss->bulletCount].speed = BOSS_BULLET_SPEED * (objBoss->type - 1);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7c1a      	ldrb	r2, [r3, #16]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7b5b      	ldrb	r3, [r3, #13]
 800092a:	4619      	mov	r1, r3
 800092c:	460b      	mov	r3, r1
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	440b      	add	r3, r1
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4619      	mov	r1, r3
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	440b      	add	r3, r1
 800093a:	3a01      	subs	r2, #1
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	729a      	strb	r2, [r3, #10]

	if (objBoss->lvl == 9 || objBoss->lvl == 10)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7adb      	ldrb	r3, [r3, #11]
 8000944:	2b09      	cmp	r3, #9
 8000946:	d003      	beq.n	8000950 <_GameEngineBossBulletInit+0x38>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	7adb      	ldrb	r3, [r3, #11]
 800094c:	2b0a      	cmp	r3, #10
 800094e:	d10b      	bne.n	8000968 <_GameEngineBossBulletInit+0x50>
		objBossBullet[objBoss->bulletCount].speed = BOSS_BULLET_SPEED * 3;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	7b5b      	ldrb	r3, [r3, #13]
 8000954:	461a      	mov	r2, r3
 8000956:	4613      	mov	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	461a      	mov	r2, r3
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	4413      	add	r3, r2
 8000964:	2203      	movs	r2, #3
 8000966:	729a      	strb	r2, [r3, #10]

	objBossBullet[objBoss->bulletCount].app = APPEAR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7b5b      	ldrb	r3, [r3, #13]
 800096c:	461a      	mov	r2, r3
 800096e:	4613      	mov	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	461a      	mov	r2, r3
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	4413      	add	r3, r2
 800097c:	2200      	movs	r2, #0
 800097e:	745a      	strb	r2, [r3, #17]
	objBossBullet[objBoss->bulletCount].x_cor = objBoss->x_cor - 2;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	3b02      	subs	r3, #2
 800098a:	b2d9      	uxtb	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7b5b      	ldrb	r3, [r3, #13]
 8000990:	461a      	mov	r2, r3
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	461a      	mov	r2, r3
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	b24a      	sxtb	r2, r1
 80009a2:	719a      	strb	r2, [r3, #6]

	if (objBoss->lvl != 10)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7adb      	ldrb	r3, [r3, #11]
 80009a8:	2b0a      	cmp	r3, #10
 80009aa:	d019      	beq.n	80009e0 <_GameEngineBossBulletInit+0xc8>
		objBossBullet[objBoss->bulletCount].y_cor = objBoss->y_cor + (objBoss->type * SPRITE8 / 2) - 1;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	79da      	ldrb	r2, [r3, #7]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7c1b      	ldrb	r3, [r3, #16]
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	da00      	bge.n	80009bc <_GameEngineBossBulletInit+0xa4>
 80009ba:	3301      	adds	r3, #1
 80009bc:	105b      	asrs	r3, r3, #1
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4413      	add	r3, r2
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7b5b      	ldrb	r3, [r3, #13]
 80009c8:	4619      	mov	r1, r3
 80009ca:	460b      	mov	r3, r1
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	440b      	add	r3, r1
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4619      	mov	r1, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	440b      	add	r3, r1
 80009d8:	3a01      	subs	r2, #1
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	71da      	strb	r2, [r3, #7]

	else
		objBossBullet[objBoss->bulletCount].y_cor = objBoss->y_cor + (rand() % objBoss->type * SPRITE8);
}
 80009de:	e01b      	b.n	8000a18 <_GameEngineBossBulletInit+0x100>
		objBossBullet[objBoss->bulletCount].y_cor = objBoss->y_cor + (rand() % objBoss->type * SPRITE8);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	79dc      	ldrb	r4, [r3, #7]
 80009e4:	f004 ff7a 	bl	80058dc <rand>
 80009e8:	4603      	mov	r3, r0
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	7c12      	ldrb	r2, [r2, #16]
 80009ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80009f2:	fb02 f201 	mul.w	r2, r2, r1
 80009f6:	1a9b      	subs	r3, r3, r2
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	7b5b      	ldrb	r3, [r3, #13]
 8000a02:	4619      	mov	r1, r3
 8000a04:	460b      	mov	r3, r1
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	440b      	add	r3, r1
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	440b      	add	r3, r1
 8000a12:	4422      	add	r2, r4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	71da      	strb	r2, [r3, #7]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <_GameEngineBossInit>:

void _GameEngineBossInit (_GameFeature* game, _GameObject* objStarship, _GameObject* objBoss)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
	objBoss->app = APPEAR;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	745a      	strb	r2, [r3, #17]
	objBoss->lvl++;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7adb      	ldrb	r3, [r3, #11]
 8000a36:	3301      	adds	r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	72da      	strb	r2, [r3, #11]
	objBoss->hitPoints = BOSS_HP * GAME_DIFFICULTY + (objBoss->lvl * BOSS_LVL_HP_ADD);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	7adb      	ldrb	r3, [r3, #11]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	0091      	lsls	r1, r2, #2
 8000a4e:	461a      	mov	r2, r3
 8000a50:	460b      	mov	r3, r1
 8000a52:	4413      	add	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3364      	adds	r3, #100	; 0x64
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	b21a      	sxth	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	809a      	strh	r2, [r3, #4]
	objBoss->speed = round ((objBoss->lvl / 2) * BOSS_SPEED);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7adb      	ldrb	r3, [r3, #11]
 8000a66:	085b      	lsrs	r3, r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a76:	edc7 7a00 	vstr	s15, [r7]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	729a      	strb	r2, [r3, #10]

	if (objBoss->lvl == 1)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	7adb      	ldrb	r3, [r3, #11]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d102      	bne.n	8000a90 <_GameEngineBossInit+0x70>
		objBoss->speed = BOSS_SPEED;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	729a      	strb	r2, [r3, #10]

	objBoss->dir = DIR_UP;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	73da      	strb	r2, [r3, #15]

	objBoss->x_cor = DISPLAY_WIDTH - 1;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	227f      	movs	r2, #127	; 0x7f
 8000a9a:	719a      	strb	r2, [r3, #6]

	if (objBoss->lvl <= 3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7adb      	ldrb	r3, [r3, #11]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d806      	bhi.n	8000ab2 <_GameEngineBossInit+0x92>
	{
		objBoss->type = BOSS_16;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	741a      	strb	r2, [r3, #16]
		objBoss->y_cor = (DISPLAY_HEIGHT / 2) - SPRITE8;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2218      	movs	r2, #24
 8000aae:	71da      	strb	r2, [r3, #7]
 8000ab0:	e02e      	b.n	8000b10 <_GameEngineBossInit+0xf0>
	}

	else if (objBoss->lvl >= 4 && objBoss->lvl <= 6)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7adb      	ldrb	r3, [r3, #11]
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d90a      	bls.n	8000ad0 <_GameEngineBossInit+0xb0>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7adb      	ldrb	r3, [r3, #11]
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d806      	bhi.n	8000ad0 <_GameEngineBossInit+0xb0>
	{
		objBoss->type = BOSS_24;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	741a      	strb	r2, [r3, #16]
		objBoss->y_cor = (DISPLAY_HEIGHT / 2) - (SPRITE8 + 4);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2214      	movs	r2, #20
 8000acc:	71da      	strb	r2, [r3, #7]
 8000ace:	e01f      	b.n	8000b10 <_GameEngineBossInit+0xf0>
	}

	else if (objBoss->lvl >= 7 && objBoss->lvl <= 8)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7adb      	ldrb	r3, [r3, #11]
 8000ad4:	2b06      	cmp	r3, #6
 8000ad6:	d90a      	bls.n	8000aee <_GameEngineBossInit+0xce>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	7adb      	ldrb	r3, [r3, #11]
 8000adc:	2b08      	cmp	r3, #8
 8000ade:	d806      	bhi.n	8000aee <_GameEngineBossInit+0xce>
	{
		objBoss->type = BOSS_32;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	741a      	strb	r2, [r3, #16]
		objBoss->y_cor = (DISPLAY_HEIGHT / 2) - SPRITE16;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2210      	movs	r2, #16
 8000aea:	71da      	strb	r2, [r3, #7]
 8000aec:	e010      	b.n	8000b10 <_GameEngineBossInit+0xf0>
	}

	else if (objBoss->lvl == 9)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7adb      	ldrb	r3, [r3, #11]
 8000af2:	2b09      	cmp	r3, #9
 8000af4:	d106      	bne.n	8000b04 <_GameEngineBossInit+0xe4>
	{
		objBoss->type = BOSS_8;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2201      	movs	r2, #1
 8000afa:	741a      	strb	r2, [r3, #16]
		objBoss->y_cor = (DISPLAY_HEIGHT / 2) - SPRITE8 / 2;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	221c      	movs	r2, #28
 8000b00:	71da      	strb	r2, [r3, #7]
 8000b02:	e005      	b.n	8000b10 <_GameEngineBossInit+0xf0>
	}

	else
	{
		objBoss->type = BOSS_64;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2208      	movs	r2, #8
 8000b08:	741a      	strb	r2, [r3, #16]
		objBoss->y_cor = (DISPLAY_HEIGHT / 2) - SPRITE32;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	71da      	strb	r2, [r3, #7]
	}

	_GameEngineBossAppear(game, objStarship, objBoss);
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	68b9      	ldr	r1, [r7, #8]
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f000 f807 	bl	8000b28 <_GameEngineBossAppear>

	game->gameState = BOSS_PASS;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_GameEngineBossAppear>:

void _GameEngineBossAppear (_GameFeature* game, _GameObject* objStarship, _GameObject* objBoss)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	u8 boss_10_LVL_Dummy = 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	75fb      	strb	r3, [r7, #23]

	if (objBoss->lvl == 10)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7adb      	ldrb	r3, [r3, #11]
 8000b3c:	2b0a      	cmp	r3, #10
 8000b3e:	d101      	bne.n	8000b44 <_GameEngineBossAppear+0x1c>
		boss_10_LVL_Dummy = 2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	75fb      	strb	r3, [r7, #23]

	_GameEngineScoreDraw(game, objStarship);
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f001 fc3c 	bl	80023c4 <_GameEngineScoreDraw>
	_GameEngineStarshipDraw(objStarship);
 8000b4c:	68b8      	ldr	r0, [r7, #8]
 8000b4e:	f001 f8e7 	bl	8001d20 <_GameEngineStarshipDraw>

	delay(100);
 8000b52:	2064      	movs	r0, #100	; 0x64
 8000b54:	f002 ff44 	bl	80039e0 <HAL_Delay>

	ssd1306_DrawRectangle (UI_BOSS_HP_X, UI_BOSS_HP_Y, UI_BOSS_HP_X + 34, UI_BOSS_HP_Y + 7, 1);
 8000b58:	2301      	movs	r3, #1
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	224f      	movs	r2, #79	; 0x4f
 8000b60:	2101      	movs	r1, #1
 8000b62:	202d      	movs	r0, #45	; 0x2d
 8000b64:	f002 fc82 	bl	800346c <ssd1306_DrawRectangle>

	while (objBoss->x_cor > DISPLAY_WIDTH - (objBoss->type / boss_10_LVL_Dummy * SPRITE8) - BOSS_X_POS_OFFSET)
 8000b68:	e01d      	b.n	8000ba6 <_GameEngineBossAppear+0x7e>
	{
		objBoss->x_old_cor = objBoss->x_cor;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	721a      	strb	r2, [r3, #8]
		objBoss->y_old_cor = objBoss->y_cor;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	79da      	ldrb	r2, [r3, #7]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	725a      	strb	r2, [r3, #9]

		objBoss->x_cor--;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	3b01      	subs	r3, #1
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	b25a      	sxtb	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	719a      	strb	r2, [r3, #6]

		_GameEngineBossErase(objBoss);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f001 fbab 	bl	80022ec <_GameEngineBossErase>
		_GameEngineBossDraw(objBoss);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f001 f9c6 	bl	8001f28 <_GameEngineBossDraw>

		ssd1306_UpdateScreen();
 8000b9c:	f002 faae 	bl	80030fc <ssd1306_UpdateScreen>

		delay(20);
 8000ba0:	2014      	movs	r0, #20
 8000ba2:	f002 ff1d 	bl	80039e0 <HAL_Delay>
	while (objBoss->x_cor > DISPLAY_WIDTH - (objBoss->type / boss_10_LVL_Dummy * SPRITE8) - BOSS_X_POS_OFFSET)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000bac:	4619      	mov	r1, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7c1a      	ldrb	r2, [r3, #16]
 8000bb2:	7dfb      	ldrb	r3, [r7, #23]
 8000bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f1c3 0310 	rsb	r3, r3, #16
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	dcd1      	bgt.n	8000b6a <_GameEngineBossAppear+0x42>
	}

	for (u16 i = 0; i <= 30; i++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	82bb      	strh	r3, [r7, #20]
 8000bca:	e015      	b.n	8000bf8 <_GameEngineBossAppear+0xd0>
	{
		ssd1306_Line(UI_BOSS_HP_X + 2 + i, UI_BOSS_HP_Y + 2, UI_BOSS_HP_X + 2 + i, UI_BOSS_HP_Y + 5, 1);
 8000bcc:	8abb      	ldrh	r3, [r7, #20]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	332f      	adds	r3, #47	; 0x2f
 8000bd2:	b2d8      	uxtb	r0, r3
 8000bd4:	8abb      	ldrh	r3, [r7, #20]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	332f      	adds	r3, #47	; 0x2f
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	2301      	movs	r3, #1
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2306      	movs	r3, #6
 8000be2:	2103      	movs	r1, #3
 8000be4:	f002 fbd6 	bl	8003394 <ssd1306_Line>

		ssd1306_UpdateScreen();
 8000be8:	f002 fa88 	bl	80030fc <ssd1306_UpdateScreen>

		delay(15);
 8000bec:	200f      	movs	r0, #15
 8000bee:	f002 fef7 	bl	80039e0 <HAL_Delay>
	for (u16 i = 0; i <= 30; i++)
 8000bf2:	8abb      	ldrh	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	82bb      	strh	r3, [r7, #20]
 8000bf8:	8abb      	ldrh	r3, [r7, #20]
 8000bfa:	2b1e      	cmp	r3, #30
 8000bfc:	d9e6      	bls.n	8000bcc <_GameEngineBossAppear+0xa4>
	}
}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <JoystickMoveHandler>:

_MOVE JoystickMoveHandler (void)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
	// ADC HANDLER ============

	uint16_t adcValue_X = (ReadFromADC(1) + ReadFromADC(1) + ReadFromADC(1) + ReadFromADC(1) + ReadFromADC(1)) / 5;
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff fdf8 	bl	8000804 <ReadFromADC>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461c      	mov	r4, r3
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff fdf3 	bl	8000804 <ReadFromADC>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	441c      	add	r4, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	f7ff fdee 	bl	8000804 <ReadFromADC>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	441c      	add	r4, r3
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff fde9 	bl	8000804 <ReadFromADC>
 8000c32:	4603      	mov	r3, r0
 8000c34:	441c      	add	r4, r3
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff fde4 	bl	8000804 <ReadFromADC>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4423      	add	r3, r4
 8000c40:	4a50      	ldr	r2, [pc, #320]	; (8000d84 <JoystickMoveHandler+0x17c>)
 8000c42:	fb82 1203 	smull	r1, r2, r2, r3
 8000c46:	1052      	asrs	r2, r2, #1
 8000c48:	17db      	asrs	r3, r3, #31
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	80bb      	strh	r3, [r7, #4]
	uint16_t adcValue_Y = (ReadFromADC(2) + ReadFromADC(2) + ReadFromADC(2) + ReadFromADC(2) + ReadFromADC(2)) / 5;
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f7ff fdd8 	bl	8000804 <ReadFromADC>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461c      	mov	r4, r3
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f7ff fdd3 	bl	8000804 <ReadFromADC>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	441c      	add	r4, r3
 8000c62:	2002      	movs	r0, #2
 8000c64:	f7ff fdce 	bl	8000804 <ReadFromADC>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	441c      	add	r4, r3
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f7ff fdc9 	bl	8000804 <ReadFromADC>
 8000c72:	4603      	mov	r3, r0
 8000c74:	441c      	add	r4, r3
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff fdc4 	bl	8000804 <ReadFromADC>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4423      	add	r3, r4
 8000c80:	4a40      	ldr	r2, [pc, #256]	; (8000d84 <JoystickMoveHandler+0x17c>)
 8000c82:	fb82 1203 	smull	r1, r2, r2, r3
 8000c86:	1052      	asrs	r2, r2, #1
 8000c88:	17db      	asrs	r3, r3, #31
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	807b      	strh	r3, [r7, #2]

	_MOVE move;

	move = MOVE_NONE;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	71fb      	strb	r3, [r7, #7]

	if (adcValue_Y > 3895 && adcValue_X < 3548 && adcValue_X > 548)
 8000c92:	887b      	ldrh	r3, [r7, #2]
 8000c94:	f640 7237 	movw	r2, #3895	; 0xf37
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d90b      	bls.n	8000cb4 <JoystickMoveHandler+0xac>
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	f640 52db 	movw	r2, #3547	; 0xddb
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d806      	bhi.n	8000cb4 <JoystickMoveHandler+0xac>
 8000ca6:	88bb      	ldrh	r3, [r7, #4]
 8000ca8:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 8000cac:	d902      	bls.n	8000cb4 <JoystickMoveHandler+0xac>
		move = MOVE_UP;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	e062      	b.n	8000d7a <JoystickMoveHandler+0x172>

	else if (adcValue_Y > 2848 && adcValue_X > 2748)
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	f5b3 6f32 	cmp.w	r3, #2848	; 0xb20
 8000cba:	d907      	bls.n	8000ccc <JoystickMoveHandler+0xc4>
 8000cbc:	88bb      	ldrh	r3, [r7, #4]
 8000cbe:	f640 22bc 	movw	r2, #2748	; 0xabc
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d902      	bls.n	8000ccc <JoystickMoveHandler+0xc4>
		move = MOVE_UP_RIGHT;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	e056      	b.n	8000d7a <JoystickMoveHandler+0x172>

	else if (adcValue_Y > 2848 && adcValue_X < 1348)
 8000ccc:	887b      	ldrh	r3, [r7, #2]
 8000cce:	f5b3 6f32 	cmp.w	r3, #2848	; 0xb20
 8000cd2:	d907      	bls.n	8000ce4 <JoystickMoveHandler+0xdc>
 8000cd4:	88bb      	ldrh	r3, [r7, #4]
 8000cd6:	f240 5243 	movw	r2, #1347	; 0x543
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d802      	bhi.n	8000ce4 <JoystickMoveHandler+0xdc>
		move = MOVE_UP_LEFT;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	e04a      	b.n	8000d7a <JoystickMoveHandler+0x172>

	// ===============================================================

	else if (adcValue_X > 3895 && adcValue_Y < 3548 && adcValue_Y > 548)
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	f640 7237 	movw	r2, #3895	; 0xf37
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d90b      	bls.n	8000d06 <JoystickMoveHandler+0xfe>
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	f640 52db 	movw	r2, #3547	; 0xddb
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d806      	bhi.n	8000d06 <JoystickMoveHandler+0xfe>
 8000cf8:	887b      	ldrh	r3, [r7, #2]
 8000cfa:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 8000cfe:	d902      	bls.n	8000d06 <JoystickMoveHandler+0xfe>
		move = MOVE_RIGHT;
 8000d00:	2305      	movs	r3, #5
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	e039      	b.n	8000d7a <JoystickMoveHandler+0x172>

	// ===============================================================

	else if (adcValue_Y < 200 && adcValue_X < 3548 && adcValue_X > 548)
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	2bc7      	cmp	r3, #199	; 0xc7
 8000d0a:	d80b      	bhi.n	8000d24 <JoystickMoveHandler+0x11c>
 8000d0c:	88bb      	ldrh	r3, [r7, #4]
 8000d0e:	f640 52db 	movw	r2, #3547	; 0xddb
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d806      	bhi.n	8000d24 <JoystickMoveHandler+0x11c>
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 8000d1c:	d902      	bls.n	8000d24 <JoystickMoveHandler+0x11c>
			move = MOVE_DOWN;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	e02a      	b.n	8000d7a <JoystickMoveHandler+0x172>

	else if (adcValue_Y < 1348 && adcValue_X > 2748)
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	f240 5243 	movw	r2, #1347	; 0x543
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d807      	bhi.n	8000d3e <JoystickMoveHandler+0x136>
 8000d2e:	88bb      	ldrh	r3, [r7, #4]
 8000d30:	f640 22bc 	movw	r2, #2748	; 0xabc
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d902      	bls.n	8000d3e <JoystickMoveHandler+0x136>
		move = MOVE_DOWN_RIGHT;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	e01d      	b.n	8000d7a <JoystickMoveHandler+0x172>

	else if (adcValue_Y < 1348 && adcValue_X < 1348)
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	f240 5243 	movw	r2, #1347	; 0x543
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d807      	bhi.n	8000d58 <JoystickMoveHandler+0x150>
 8000d48:	88bb      	ldrh	r3, [r7, #4]
 8000d4a:	f240 5243 	movw	r2, #1347	; 0x543
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d802      	bhi.n	8000d58 <JoystickMoveHandler+0x150>
		move = MOVE_DOWN_LEFT;
 8000d52:	2306      	movs	r3, #6
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	e010      	b.n	8000d7a <JoystickMoveHandler+0x172>

	// ===============================================================

	else if (adcValue_X < 200 && adcValue_Y < 3548 && adcValue_Y > 548)
 8000d58:	88bb      	ldrh	r3, [r7, #4]
 8000d5a:	2bc7      	cmp	r3, #199	; 0xc7
 8000d5c:	d80b      	bhi.n	8000d76 <JoystickMoveHandler+0x16e>
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	f640 52db 	movw	r2, #3547	; 0xddb
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d806      	bhi.n	8000d76 <JoystickMoveHandler+0x16e>
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 8000d6e:	d902      	bls.n	8000d76 <JoystickMoveHandler+0x16e>
		move = MOVE_LEFT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	e001      	b.n	8000d7a <JoystickMoveHandler+0x172>

	// ===============================================================

	else
		move = MOVE_NONE;
 8000d76:	2304      	movs	r3, #4
 8000d78:	71fb      	strb	r3, [r7, #7]

	return move;
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd90      	pop	{r4, r7, pc}
 8000d84:	66666667 	.word	0x66666667

08000d88 <_GameEngineJoystickHandler>:

void _GameEngineJoystickHandler (_MOVE userMove, _GameFeature* game, _GameObject* objStarship, _GameObject* objBullet, _GameObject* objBoss)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]
	if (!ButtonHandler())
 8000d98:	f7ff fd6a 	bl	8000870 <ButtonHandler>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d102      	bne.n	8000da8 <_GameEngineJoystickHandler+0x20>
		objStarship->shotApply = OFF;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	749a      	strb	r2, [r3, #18]

	u8 x_cor_wall = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	75fb      	strb	r3, [r7, #23]

	if (game->gameState == BOSS_PASS)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d105      	bne.n	8000dc0 <_GameEngineJoystickHandler+0x38>
		x_cor_wall = objBoss->type * SPRITE8 + 5;
 8000db4:	6a3b      	ldr	r3, [r7, #32]
 8000db6:	7c1b      	ldrb	r3, [r3, #16]
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	3305      	adds	r3, #5
 8000dbe:	75fb      	strb	r3, [r7, #23]

	objStarship->x_old_cor = objStarship->x_cor;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	721a      	strb	r2, [r3, #8]
	objStarship->y_old_cor = objStarship->y_cor;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	79da      	ldrb	r2, [r3, #7]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	725a      	strb	r2, [r3, #9]

	switch (userMove)
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	f200 80cc 	bhi.w	8000f74 <_GameEngineJoystickHandler+0x1ec>
 8000ddc:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <_GameEngineJoystickHandler+0x5c>)
 8000dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de2:	bf00      	nop
 8000de4:	08000e09 	.word	0x08000e09
 8000de8:	08000e5f 	.word	0x08000e5f
 8000dec:	08000e21 	.word	0x08000e21
 8000df0:	08000f39 	.word	0x08000f39
 8000df4:	08000f75 	.word	0x08000f75
 8000df8:	08000f13 	.word	0x08000f13
 8000dfc:	08000ee1 	.word	0x08000ee1
 8000e00:	08000ea7 	.word	0x08000ea7
 8000e04:	08000e91 	.word	0x08000e91
	{
		case MOVE_UP:
		{
			if (objStarship->y_cor > 2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	79db      	ldrb	r3, [r3, #7]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	f240 80a2 	bls.w	8000f56 <_GameEngineJoystickHandler+0x1ce>
				objStarship->y_cor -= STARSHIP_SPEED;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	79db      	ldrb	r3, [r3, #7]
 8000e16:	3b02      	subs	r3, #2
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	71da      	strb	r2, [r3, #7]
			break;
 8000e1e:	e09a      	b.n	8000f56 <_GameEngineJoystickHandler+0x1ce>
		}

		case MOVE_UP_RIGHT:
		{
			if (objStarship->y_cor > 2 && objStarship->x_cor < DISPLAY_WIDTH - 1 - SPRITE16 - x_cor_wall)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	79db      	ldrb	r3, [r3, #7]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	f240 8098 	bls.w	8000f5a <_GameEngineJoystickHandler+0x1d2>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e30:	461a      	mov	r2, r3
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	f1c3 036f 	rsb	r3, r3, #111	; 0x6f
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f280 808e 	bge.w	8000f5a <_GameEngineJoystickHandler+0x1d2>
			{
				objStarship->y_cor -= STARSHIP_SPEED;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	79db      	ldrb	r3, [r3, #7]
 8000e42:	3b02      	subs	r3, #2
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	71da      	strb	r2, [r3, #7]
				objStarship->x_cor += STARSHIP_SPEED;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	3302      	adds	r3, #2
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	b25a      	sxtb	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	719a      	strb	r2, [r3, #6]
			}
			break;
 8000e5c:	e07d      	b.n	8000f5a <_GameEngineJoystickHandler+0x1d2>
		}

		case MOVE_UP_LEFT:
		{
			if (objStarship->y_cor > 2 && objStarship->x_cor > 1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	79db      	ldrb	r3, [r3, #7]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d97b      	bls.n	8000f5e <_GameEngineJoystickHandler+0x1d6>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	dd76      	ble.n	8000f5e <_GameEngineJoystickHandler+0x1d6>
			{
				objStarship->y_cor -= STARSHIP_SPEED;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	79db      	ldrb	r3, [r3, #7]
 8000e74:	3b02      	subs	r3, #2
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	71da      	strb	r2, [r3, #7]
				objStarship->x_cor -= STARSHIP_SPEED;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	3b02      	subs	r3, #2
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	719a      	strb	r2, [r3, #6]
			}
			break;
 8000e8e:	e066      	b.n	8000f5e <_GameEngineJoystickHandler+0x1d6>

		// ========================================================

		case MOVE_DOWN:
		{
			if (objStarship->y_cor < DISPLAY_HEIGHT - 1 - SPRITE16)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	79db      	ldrb	r3, [r3, #7]
 8000e94:	2b2e      	cmp	r3, #46	; 0x2e
 8000e96:	d864      	bhi.n	8000f62 <_GameEngineJoystickHandler+0x1da>
				objStarship->y_cor += STARSHIP_SPEED;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	79db      	ldrb	r3, [r3, #7]
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	71da      	strb	r2, [r3, #7]
			break;
 8000ea4:	e05d      	b.n	8000f62 <_GameEngineJoystickHandler+0x1da>
		}

		case MOVE_DOWN_RIGHT:
		{
			if (objStarship->y_cor < DISPLAY_HEIGHT - 1 - SPRITE16 && objStarship->x_cor < DISPLAY_WIDTH - 1 - SPRITE16 - x_cor_wall)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	79db      	ldrb	r3, [r3, #7]
 8000eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8000eac:	d85b      	bhi.n	8000f66 <_GameEngineJoystickHandler+0x1de>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
 8000eb8:	f1c3 036f 	rsb	r3, r3, #111	; 0x6f
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	da52      	bge.n	8000f66 <_GameEngineJoystickHandler+0x1de>
			{
				objStarship->y_cor += STARSHIP_SPEED;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	79db      	ldrb	r3, [r3, #7]
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	71da      	strb	r2, [r3, #7]
				objStarship->x_cor += STARSHIP_SPEED;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	b25a      	sxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	719a      	strb	r2, [r3, #6]
			}
			break;
 8000ede:	e042      	b.n	8000f66 <_GameEngineJoystickHandler+0x1de>
		}

		case MOVE_DOWN_LEFT:
		{
			if (objStarship->y_cor < DISPLAY_HEIGHT - 1 - SPRITE16 && objStarship->x_cor > 1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	79db      	ldrb	r3, [r3, #7]
 8000ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ee6:	d840      	bhi.n	8000f6a <_GameEngineJoystickHandler+0x1e2>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	dd3b      	ble.n	8000f6a <_GameEngineJoystickHandler+0x1e2>
			{
				objStarship->y_cor += STARSHIP_SPEED;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	79db      	ldrb	r3, [r3, #7]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	71da      	strb	r2, [r3, #7]
				objStarship->x_cor -= STARSHIP_SPEED;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	3b02      	subs	r3, #2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	b25a      	sxtb	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	719a      	strb	r2, [r3, #6]
			}
			break;
 8000f10:	e02b      	b.n	8000f6a <_GameEngineJoystickHandler+0x1e2>

		// ========================================================

		case MOVE_RIGHT:
		{
			if (objStarship->x_cor < DISPLAY_WIDTH - 1 - SPRITE16 - x_cor_wall)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
 8000f1c:	f1c3 036f 	rsb	r3, r3, #111	; 0x6f
 8000f20:	429a      	cmp	r2, r3
 8000f22:	da24      	bge.n	8000f6e <_GameEngineJoystickHandler+0x1e6>
				objStarship->x_cor += STARSHIP_SPEED;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	b25a      	sxtb	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	719a      	strb	r2, [r3, #6]
			break;
 8000f36:	e01a      	b.n	8000f6e <_GameEngineJoystickHandler+0x1e6>
		}

		case MOVE_LEFT:
		{
			if (objStarship->x_cor > 1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	dd17      	ble.n	8000f72 <_GameEngineJoystickHandler+0x1ea>
				objStarship->x_cor -= STARSHIP_SPEED;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	b25a      	sxtb	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	719a      	strb	r2, [r3, #6]
			break;
 8000f54:	e00d      	b.n	8000f72 <_GameEngineJoystickHandler+0x1ea>
			break;
 8000f56:	bf00      	nop
 8000f58:	e00c      	b.n	8000f74 <_GameEngineJoystickHandler+0x1ec>
			break;
 8000f5a:	bf00      	nop
 8000f5c:	e00a      	b.n	8000f74 <_GameEngineJoystickHandler+0x1ec>
			break;
 8000f5e:	bf00      	nop
 8000f60:	e008      	b.n	8000f74 <_GameEngineJoystickHandler+0x1ec>
			break;
 8000f62:	bf00      	nop
 8000f64:	e006      	b.n	8000f74 <_GameEngineJoystickHandler+0x1ec>
			break;
 8000f66:	bf00      	nop
 8000f68:	e004      	b.n	8000f74 <_GameEngineJoystickHandler+0x1ec>
			break;
 8000f6a:	bf00      	nop
 8000f6c:	e002      	b.n	8000f74 <_GameEngineJoystickHandler+0x1ec>
			break;
 8000f6e:	bf00      	nop
 8000f70:	e000      	b.n	8000f74 <_GameEngineJoystickHandler+0x1ec>
			break;
 8000f72:	bf00      	nop
		{
			break;
		}
	}

	if (objStarship->shotApply == OFF)		// *3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7c9b      	ldrb	r3, [r3, #18]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d11e      	bne.n	8000fba <_GameEngineJoystickHandler+0x232>
	{
		if (ButtonHandler() == ON)
 8000f7c:	f7ff fc78 	bl	8000870 <ButtonHandler>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d119      	bne.n	8000fba <_GameEngineJoystickHandler+0x232>
		{
			if (objBullet[objStarship->bulletCount].app == DISAPPEAR)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7b5b      	ldrb	r3, [r3, #13]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	461a      	mov	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	4413      	add	r3, r2
 8000f9a:	7c5b      	ldrb	r3, [r3, #17]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d10c      	bne.n	8000fba <_GameEngineJoystickHandler+0x232>
			{
				_GameEngineBulletInit(objStarship, objBullet);
 8000fa0:	6839      	ldr	r1, [r7, #0]
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff fc74 	bl	8000890 <_GameEngineBulletInit>
				objStarship->bulletCount++;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7b5b      	ldrb	r3, [r3, #13]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	735a      	strb	r2, [r3, #13]
				objStarship->shotApply = ON;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	749a      	strb	r2, [r3, #18]
			}
		}
	}

	if (objStarship->shield > 0)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	dd04      	ble.n	8000fcc <_GameEngineJoystickHandler+0x244>
		objStarship->shield--;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1e5a      	subs	r2, r3, #1
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	601a      	str	r2, [r3, #0]

	if (objStarship->bulletCount > BULLET_QUANTITY - 1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7b5b      	ldrb	r3, [r3, #13]
 8000fd0:	2b13      	cmp	r3, #19
 8000fd2:	d902      	bls.n	8000fda <_GameEngineJoystickHandler+0x252>
		objStarship->bulletCount = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	735a      	strb	r2, [r3, #13]
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop

08000fe4 <_GameEngineBulletsHandler>:

void _GameEngineBulletsHandler (_GameObject* objBullet)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	for (u8 i = 0; i < BULLET_QUANTITY; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e063      	b.n	80010ba <_GameEngineBulletsHandler+0xd6>
	{
		if (objBullet[i].app == APPEAR)
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	7c5b      	ldrb	r3, [r3, #17]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d155      	bne.n	80010b4 <_GameEngineBulletsHandler+0xd0>
		{
			objBullet[i].x_old_cor = objBullet[i].x_cor;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	f993 1006 	ldrsb.w	r1, [r3, #6]
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	461a      	mov	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4413      	add	r3, r2
 800102c:	b2ca      	uxtb	r2, r1
 800102e:	721a      	strb	r2, [r3, #8]
			objBullet[i].x_cor += objBullet[i].speed;
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001044:	b2d9      	uxtb	r1, r3
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	461a      	mov	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	7a9b      	ldrb	r3, [r3, #10]
 8001058:	440b      	add	r3, r1
 800105a:	b2d9      	uxtb	r1, r3
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	461a      	mov	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	b24a      	sxtb	r2, r1
 800106e:	719a      	strb	r2, [r3, #6]

			if (objBullet[i].x_cor > (DISPLAY_WIDTH - objBullet[i].speed))
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	461a      	mov	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001084:	4619      	mov	r1, r3
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	461a      	mov	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	7a9b      	ldrb	r3, [r3, #10]
 8001098:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800109c:	4299      	cmp	r1, r3
 800109e:	dd09      	ble.n	80010b4 <_GameEngineBulletsHandler+0xd0>
				objBullet[i].app = DISAPPEAR;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	461a      	mov	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	2201      	movs	r2, #1
 80010b2:	745a      	strb	r2, [r3, #17]
	for (u8 i = 0; i < BULLET_QUANTITY; i++)
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	3301      	adds	r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	2b13      	cmp	r3, #19
 80010be:	d998      	bls.n	8000ff2 <_GameEngineBulletsHandler+0xe>
		}
		else
			;
	}
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_GameEngineEnemyesHandler>:

void _GameEngineEnemyesHandler (_GameFeature* game, _GameObject* objEnemy)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	for (u8 i = 0; i < ENEMY_MAX_QANT + game->gameLVL; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e0c7      	b.n	800126c <_GameEngineEnemyesHandler+0x1a0>
	{
		if (objEnemy[i].app == DISAPPEAR)
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	461a      	mov	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	7c5b      	ldrb	r3, [r3, #17]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d157      	bne.n	80011a2 <_GameEngineEnemyesHandler+0xd6>
			if (!(rand() % ENEMY_APPEAR_PROBABILITY))
 80010f2:	f004 fbf3 	bl	80058dc <rand>
 80010f6:	4602      	mov	r2, r0
 80010f8:	4b62      	ldr	r3, [pc, #392]	; (8001284 <_GameEngineEnemyesHandler+0x1b8>)
 80010fa:	fb83 1302 	smull	r1, r3, r3, r2
 80010fe:	11d9      	asrs	r1, r3, #7
 8001100:	17d3      	asrs	r3, r2, #31
 8001102:	1acb      	subs	r3, r1, r3
 8001104:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001108:	fb01 f303 	mul.w	r3, r1, r3
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 8094 	bne.w	800123c <_GameEngineEnemyesHandler+0x170>
			{
				objEnemy[i].app = APPEAR;
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	461a      	mov	r2, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	4413      	add	r3, r2
 8001124:	2200      	movs	r2, #0
 8001126:	745a      	strb	r2, [r3, #17]
				objEnemy[i].speed = ENEMY_SPEED + 1 - (rand() % 3);
 8001128:	f004 fbd8 	bl	80058dc <rand>
 800112c:	4601      	mov	r1, r0
 800112e:	4b56      	ldr	r3, [pc, #344]	; (8001288 <_GameEngineEnemyesHandler+0x1bc>)
 8001130:	fb83 3201 	smull	r3, r2, r3, r1
 8001134:	17cb      	asrs	r3, r1, #31
 8001136:	1ad2      	subs	r2, r2, r3
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	1aca      	subs	r2, r1, r3
 8001140:	b2d1      	uxtb	r1, r2
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	461a      	mov	r2, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	4413      	add	r3, r2
 8001152:	f1c1 0203 	rsb	r2, r1, #3
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	729a      	strb	r2, [r3, #10]
				objEnemy[i].x_cor = DISPLAY_WIDTH - 1;
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	461a      	mov	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	4413      	add	r3, r2
 800116a:	227f      	movs	r2, #127	; 0x7f
 800116c:	719a      	strb	r2, [r3, #6]
				objEnemy[i].y_cor = rand() % (DISPLAY_HEIGHT - SPRITE8 - 1);
 800116e:	f004 fbb5 	bl	80058dc <rand>
 8001172:	4601      	mov	r1, r0
 8001174:	4b45      	ldr	r3, [pc, #276]	; (800128c <_GameEngineEnemyesHandler+0x1c0>)
 8001176:	fb83 2301 	smull	r2, r3, r3, r1
 800117a:	105a      	asrs	r2, r3, #1
 800117c:	17cb      	asrs	r3, r1, #31
 800117e:	1ad2      	subs	r2, r2, r3
 8001180:	4613      	mov	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	1a9b      	subs	r3, r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	1aca      	subs	r2, r1, r3
 800118c:	7bf9      	ldrb	r1, [r7, #15]
 800118e:	460b      	mov	r3, r1
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4619      	mov	r1, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	440b      	add	r3, r1
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	71da      	strb	r2, [r3, #7]
 80011a0:	e04c      	b.n	800123c <_GameEngineEnemyesHandler+0x170>

			else
				;
		else
		{
			objEnemy[i].x_cor -= objEnemy[i].speed;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	461a      	mov	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80011b6:	b2d9      	uxtb	r1, r3
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	461a      	mov	r2, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	7a9b      	ldrb	r3, [r3, #10]
 80011ca:	1acb      	subs	r3, r1, r3
 80011cc:	b2d9      	uxtb	r1, r3
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	461a      	mov	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	b24a      	sxtb	r2, r1
 80011e0:	719a      	strb	r2, [r3, #6]
			if (objEnemy[i].x_cor < 1 - SPRITE8)
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	461a      	mov	r2, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80011f6:	f113 0f07 	cmn.w	r3, #7
 80011fa:	da1f      	bge.n	800123c <_GameEngineEnemyesHandler+0x170>
			{
				objEnemy[i].app = DISAPPEAR;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	461a      	mov	r2, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	4413      	add	r3, r2
 800120c:	2201      	movs	r2, #1
 800120e:	745a      	strb	r2, [r3, #17]
				game->score -= ENEMY_KILL_SCORE * (ENEMY_SPEED + 2 - objEnemy[i].speed) * 25;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6859      	ldr	r1, [r3, #4]
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	461a      	mov	r2, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	4413      	add	r3, r2
 8001224:	7a9b      	ldrb	r3, [r3, #10]
 8001226:	f1c3 0204 	rsb	r2, r3, #4
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	029a      	lsls	r2, r3, #10
 8001232:	4413      	add	r3, r2
 8001234:	425b      	negs	r3, r3
 8001236:	18ca      	adds	r2, r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	605a      	str	r2, [r3, #4]
			}
		}

		if (objEnemy[i].app == EXPLOSION)
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	461a      	mov	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	4413      	add	r3, r2
 800124c:	7c5b      	ldrb	r3, [r3, #17]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d109      	bne.n	8001266 <_GameEngineEnemyesHandler+0x19a>
			objEnemy[i].app = DISAPPEAR;
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	461a      	mov	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	4413      	add	r3, r2
 8001262:	2201      	movs	r2, #1
 8001264:	745a      	strb	r2, [r3, #17]
	for (u8 i = 0; i < ENEMY_MAX_QANT + game->gameLVL; i++)
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	3301      	adds	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7a1b      	ldrb	r3, [r3, #8]
 8001272:	330a      	adds	r3, #10
 8001274:	429a      	cmp	r2, r3
 8001276:	f6ff af31 	blt.w	80010dc <_GameEngineEnemyesHandler+0x10>
	}
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	51eb851f 	.word	0x51eb851f
 8001288:	55555556 	.word	0x55555556
 800128c:	094f2095 	.word	0x094f2095

08001290 <_GameEngineCareHandler>:

void _GameEngineCareHandler (_GameObject* objCare)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	if (objCare->app == DISAPPEAR)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7c5b      	ldrb	r3, [r3, #17]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d12b      	bne.n	80012f8 <_GameEngineCareHandler+0x68>
		if (!(rand() % CARE_APPEAR_PROBABILITY))
 80012a0:	f004 fb1c 	bl	80058dc <rand>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <_GameEngineCareHandler+0x98>)
 80012a8:	fb83 1302 	smull	r1, r3, r3, r2
 80012ac:	1159      	asrs	r1, r3, #5
 80012ae:	17d3      	asrs	r3, r2, #31
 80012b0:	1acb      	subs	r3, r1, r3
 80012b2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d12f      	bne.n	8001320 <_GameEngineCareHandler+0x90>
		{
			objCare->app = APPEAR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	745a      	strb	r2, [r3, #17]
			objCare->speed = CARE_SPEED;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	729a      	strb	r2, [r3, #10]
			objCare->x_cor = DISPLAY_WIDTH - 1;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	227f      	movs	r2, #127	; 0x7f
 80012d0:	719a      	strb	r2, [r3, #6]
			objCare->y_cor = rand() % (DISPLAY_HEIGHT - 1 - SPRITE8);
 80012d2:	f004 fb03 	bl	80058dc <rand>
 80012d6:	4601      	mov	r1, r0
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <_GameEngineCareHandler+0x9c>)
 80012da:	fb83 2301 	smull	r2, r3, r3, r1
 80012de:	105a      	asrs	r2, r3, #1
 80012e0:	17cb      	asrs	r3, r1, #31
 80012e2:	1ad2      	subs	r2, r2, r3
 80012e4:	4613      	mov	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	1aca      	subs	r2, r1, r3
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	71da      	strb	r2, [r3, #7]
	{
		objCare->x_cor -= objCare->speed;
		if (objCare->x_cor < 1 - SPRITE8)
			objCare->app = DISAPPEAR;
	}
}
 80012f6:	e013      	b.n	8001320 <_GameEngineCareHandler+0x90>
		objCare->x_cor -= objCare->speed;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7a9b      	ldrb	r3, [r3, #10]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	b25a      	sxtb	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	719a      	strb	r2, [r3, #6]
		if (objCare->x_cor < 1 - SPRITE8)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001314:	f113 0f07 	cmn.w	r3, #7
 8001318:	da02      	bge.n	8001320 <_GameEngineCareHandler+0x90>
			objCare->app = DISAPPEAR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	745a      	strb	r2, [r3, #17]
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	10624dd3 	.word	0x10624dd3
 800132c:	094f2095 	.word	0x094f2095

08001330 <_GameEngineBossHandler>:

void _GameEngineBossHandler (_GameFeature* game, _GameObject* objStarship, _GameObject* objBullet, _GameObject* objEnemy, _GameObject* objCare, _GameObject* objBoss, _GameObject* objBossBullet)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
	if (game->gameState == BOSS_PASS && objBoss->initState == 0)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d10b      	bne.n	800135e <_GameEngineBossHandler+0x2e>
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	7b1b      	ldrb	r3, [r3, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d107      	bne.n	800135e <_GameEngineBossHandler+0x2e>
	{
		_GameEngineBossInit(game, objStarship, objBoss);
 800134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff fb64 	bl	8000a20 <_GameEngineBossInit>
		objBoss->initState = 1;
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	2201      	movs	r2, #1
 800135c:	731a      	strb	r2, [r3, #12]
	}

	if (objBoss->hitPoints < 0)		// New LVL Pre-Init
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	da5f      	bge.n	8001428 <_GameEngineBossHandler+0xf8>
	{
		if (game->gameLVL == 10)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	7a1b      	ldrb	r3, [r3, #8]
 800136c:	2b0a      	cmp	r3, #10
 800136e:	d103      	bne.n	8001378 <_GameEngineBossHandler+0x48>
			game->gameState = VICTORY;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2203      	movs	r2, #3
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	e057      	b.n	8001428 <_GameEngineBossHandler+0xf8>

		else
		{
			objBoss->app = DISAPPEAR;
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	2201      	movs	r2, #1
 800137c:	745a      	strb	r2, [r3, #17]
			game->gameLVL++;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	7a1b      	ldrb	r3, [r3, #8]
 8001382:	3301      	adds	r3, #1
 8001384:	b2da      	uxtb	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	721a      	strb	r2, [r3, #8]
			game->gameState = LVL_PASS;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]

			for (u8 i = 0; i < BULLET_QUANTITY; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	75fb      	strb	r3, [r7, #23]
 8001394:	e00c      	b.n	80013b0 <_GameEngineBossHandler+0x80>
				objBullet[i].app = DISAPPEAR;
 8001396:	7dfa      	ldrb	r2, [r7, #23]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	461a      	mov	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	2201      	movs	r2, #1
 80013a8:	745a      	strb	r2, [r3, #17]
			for (u8 i = 0; i < BULLET_QUANTITY; i++)
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	3301      	adds	r3, #1
 80013ae:	75fb      	strb	r3, [r7, #23]
 80013b0:	7dfb      	ldrb	r3, [r7, #23]
 80013b2:	2b13      	cmp	r3, #19
 80013b4:	d9ef      	bls.n	8001396 <_GameEngineBossHandler+0x66>

			for (u8 i = 0; i < ENEMY_MAX_QANT + game->gameLVL; i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	75bb      	strb	r3, [r7, #22]
 80013ba:	e00c      	b.n	80013d6 <_GameEngineBossHandler+0xa6>
				objEnemy[i].app = DISAPPEAR;
 80013bc:	7dba      	ldrb	r2, [r7, #22]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	461a      	mov	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	2201      	movs	r2, #1
 80013ce:	745a      	strb	r2, [r3, #17]
			for (u8 i = 0; i < ENEMY_MAX_QANT + game->gameLVL; i++)
 80013d0:	7dbb      	ldrb	r3, [r7, #22]
 80013d2:	3301      	adds	r3, #1
 80013d4:	75bb      	strb	r3, [r7, #22]
 80013d6:	7dba      	ldrb	r2, [r7, #22]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	7a1b      	ldrb	r3, [r3, #8]
 80013dc:	330a      	adds	r3, #10
 80013de:	429a      	cmp	r2, r3
 80013e0:	dbec      	blt.n	80013bc <_GameEngineBossHandler+0x8c>

			for (u8 i = 0; i < BOSS_BULLET_QUANTITY; i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	757b      	strb	r3, [r7, #21]
 80013e6:	e00c      	b.n	8001402 <_GameEngineBossHandler+0xd2>
				objBossBullet[i].app = DISAPPEAR;
 80013e8:	7d7a      	ldrb	r2, [r7, #21]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	461a      	mov	r2, r3
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	4413      	add	r3, r2
 80013f8:	2201      	movs	r2, #1
 80013fa:	745a      	strb	r2, [r3, #17]
			for (u8 i = 0; i < BOSS_BULLET_QUANTITY; i++)
 80013fc:	7d7b      	ldrb	r3, [r7, #21]
 80013fe:	3301      	adds	r3, #1
 8001400:	757b      	strb	r3, [r7, #21]
 8001402:	7d7b      	ldrb	r3, [r7, #21]
 8001404:	2b1d      	cmp	r3, #29
 8001406:	d9ef      	bls.n	80013e8 <_GameEngineBossHandler+0xb8>

			objCare->app = DISAPPEAR;
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	2201      	movs	r2, #1
 800140c:	745a      	strb	r2, [r3, #17]

			objBoss->app = DISAPPEAR;
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	2201      	movs	r2, #1
 8001412:	745a      	strb	r2, [r3, #17]
			objBoss->initState = 0;
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	2200      	movs	r2, #0
 8001418:	731a      	strb	r2, [r3, #12]

			game->score += 15000;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001422:	4413      	add	r3, r2
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	6053      	str	r3, [r2, #4]
		}
	}

	// =========================== BOSS MOVIES ===========================

	if (objBoss->lvl == 10 && DISPLAY_HEIGHT == 64)
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	7adb      	ldrb	r3, [r3, #11]
 800142c:	2b0a      	cmp	r3, #10
 800142e:	d03a      	beq.n	80014a6 <_GameEngineBossHandler+0x176>
		;

	else
	{
		if (objBoss->dir == DIR_UP && objBoss->y_cor < objBoss->speed)
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	7bdb      	ldrb	r3, [r3, #15]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d109      	bne.n	800144c <_GameEngineBossHandler+0x11c>
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	79da      	ldrb	r2, [r3, #7]
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	7a9b      	ldrb	r3, [r3, #10]
 8001440:	429a      	cmp	r2, r3
 8001442:	d203      	bcs.n	800144c <_GameEngineBossHandler+0x11c>
			objBoss->dir = DIR_DOWN;
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	2201      	movs	r2, #1
 8001448:	73da      	strb	r2, [r3, #15]
 800144a:	e013      	b.n	8001474 <_GameEngineBossHandler+0x144>

		else if (objBoss->dir == DIR_DOWN && objBoss->y_cor > DISPLAY_HEIGHT - objBoss->speed - (objBoss->type * SPRITE8))
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	7bdb      	ldrb	r3, [r3, #15]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10f      	bne.n	8001474 <_GameEngineBossHandler+0x144>
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	79db      	ldrb	r3, [r3, #7]
 8001458:	4619      	mov	r1, r3
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	7a9b      	ldrb	r3, [r3, #10]
 800145e:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	7c1b      	ldrb	r3, [r3, #16]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	4299      	cmp	r1, r3
 800146c:	dd02      	ble.n	8001474 <_GameEngineBossHandler+0x144>
				objBoss->dir = DIR_UP;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	2200      	movs	r2, #0
 8001472:	73da      	strb	r2, [r3, #15]

		if (objBoss->dir == DIR_UP)
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	7bdb      	ldrb	r3, [r3, #15]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d108      	bne.n	800148e <_GameEngineBossHandler+0x15e>
			objBoss->y_cor -= objBoss->speed;
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	79da      	ldrb	r2, [r3, #7]
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	7a9b      	ldrb	r3, [r3, #10]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	b2da      	uxtb	r2, r3
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	71da      	strb	r2, [r3, #7]
 800148c:	e00b      	b.n	80014a6 <_GameEngineBossHandler+0x176>

		else if (objBoss->dir == DIR_DOWN)
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	7bdb      	ldrb	r3, [r3, #15]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d107      	bne.n	80014a6 <_GameEngineBossHandler+0x176>
			objBoss->y_cor += objBoss->speed;
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	79da      	ldrb	r2, [r3, #7]
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	7a9b      	ldrb	r3, [r3, #10]
 800149e:	4413      	add	r3, r2
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	71da      	strb	r2, [r3, #7]
	}


	// ========================== BOSS SHOOTING ==========================

	if (!(rand() % (BOSS_SHOOT_PROBABILITY - (objBoss->lvl * ((BOSS_SHOOT_PROBABILITY / 10) - 1)))))
 80014a6:	f004 fa19 	bl	80058dc <rand>
 80014aa:	4601      	mov	r1, r0
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	7adb      	ldrb	r3, [r3, #11]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	075b      	lsls	r3, r3, #29
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	1a9b      	subs	r3, r3, r2
 80014bc:	3364      	adds	r3, #100	; 0x64
 80014be:	fb91 f2f3 	sdiv	r2, r1, r3
 80014c2:	fb03 f302 	mul.w	r3, r3, r2
 80014c6:	1acb      	subs	r3, r1, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d109      	bne.n	80014e0 <_GameEngineBossHandler+0x1b0>
	{
		_GameEngineBossBulletInit(objBoss, objBossBullet);
 80014cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014d0:	f7ff fa22 	bl	8000918 <_GameEngineBossBulletInit>
		++objBoss->bulletCount;
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	7b5b      	ldrb	r3, [r3, #13]
 80014d8:	3301      	adds	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	735a      	strb	r2, [r3, #13]
	}

	if (objBoss->bulletCount > BOSS_BULLET_QUANTITY - 1)
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	7b5b      	ldrb	r3, [r3, #13]
 80014e4:	2b1d      	cmp	r3, #29
 80014e6:	d902      	bls.n	80014ee <_GameEngineBossHandler+0x1be>
		objBoss->bulletCount = 0;
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	2200      	movs	r2, #0
 80014ec:	735a      	strb	r2, [r3, #13]
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_GameEngineBossBulletsHandler>:

void _GameEngineBossBulletsHandler (_GameObject* objBossBullet)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b085      	sub	sp, #20
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
	for (u8 i = 0; i < BOSS_BULLET_QUANTITY; i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]
 8001502:	e061      	b.n	80015c8 <_GameEngineBossBulletsHandler+0xd2>
	{
		if (objBossBullet[i].app == APPEAR)
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	461a      	mov	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	7c5b      	ldrb	r3, [r3, #17]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d153      	bne.n	80015c2 <_GameEngineBossBulletsHandler+0xcc>
		{
			objBossBullet[i].x_old_cor = objBossBullet[i].x_cor;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	461a      	mov	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	f993 1006 	ldrsb.w	r1, [r3, #6]
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	461a      	mov	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	b2ca      	uxtb	r2, r1
 8001540:	721a      	strb	r2, [r3, #8]
			objBossBullet[i].x_cor -= objBossBullet[i].speed;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	461a      	mov	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001556:	b2d9      	uxtb	r1, r3
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	461a      	mov	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	7a9b      	ldrb	r3, [r3, #10]
 800156a:	1acb      	subs	r3, r1, r3
 800156c:	b2d9      	uxtb	r1, r3
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	461a      	mov	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	b24a      	sxtb	r2, r1
 8001580:	719a      	strb	r2, [r3, #6]

			if (objBossBullet[i].x_cor < objBossBullet[i].speed)
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001596:	4619      	mov	r1, r3
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	461a      	mov	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	7a9b      	ldrb	r3, [r3, #10]
 80015aa:	4299      	cmp	r1, r3
 80015ac:	da09      	bge.n	80015c2 <_GameEngineBossBulletsHandler+0xcc>
				objBossBullet[i].app = DISAPPEAR;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	461a      	mov	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	2201      	movs	r2, #1
 80015c0:	745a      	strb	r2, [r3, #17]
	for (u8 i = 0; i < BOSS_BULLET_QUANTITY; i++)
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	3301      	adds	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b1d      	cmp	r3, #29
 80015cc:	d99a      	bls.n	8001504 <_GameEngineBossBulletsHandler+0xe>
		}
		else
			;
	}
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <_GameEngineColissionHandler>:

void _GameEngineColissionHandler (_GameFeature* game, _GameObject* objStarship, _GameObject* objBullet, _GameObject* objEnemy, _GameObject* objCare, _GameObject* objBoss, _GameObject* objBossBullet)
{
 80015dc:	b490      	push	{r4, r7}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
	objStarship->wound = NORMAL;
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2200      	movs	r2, #0
 80015ee:	739a      	strb	r2, [r3, #14]
	objBoss->wound = NORMAL;
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	2200      	movs	r2, #0
 80015f4:	739a      	strb	r2, [r3, #14]

	u8 boss_10_LVL_Dummy = 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	75fb      	strb	r3, [r7, #23]

	if (objBoss->lvl == 10)
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	7adb      	ldrb	r3, [r3, #11]
 80015fe:	2b0a      	cmp	r3, #10
 8001600:	d101      	bne.n	8001606 <_GameEngineColissionHandler+0x2a>
		boss_10_LVL_Dummy = 2;
 8001602:	2302      	movs	r3, #2
 8001604:	75fb      	strb	r3, [r7, #23]

	if (game->gameState == LVL_PASS)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 81b0 	bne.w	8001970 <_GameEngineColissionHandler+0x394>
	{
		for (u8 i = 0; i < ENEMY_MAX_QANT  + game->gameLVL; i++)
 8001610:	2300      	movs	r3, #0
 8001612:	75bb      	strb	r3, [r7, #22]
 8001614:	e15a      	b.n	80018cc <_GameEngineColissionHandler+0x2f0>
		{
			for (u8 k = 0; k < BULLET_QUANTITY; k++) 																							// BULLET & ENEMYES COLLISION
 8001616:	2300      	movs	r3, #0
 8001618:	757b      	strb	r3, [r7, #21]
 800161a:	e09c      	b.n	8001756 <_GameEngineColissionHandler+0x17a>
			{
				if (objEnemy[i].app == APPEAR && objBullet[k].app == APPEAR)																	// **************************
 800161c:	7dba      	ldrb	r2, [r7, #22]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	461a      	mov	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4413      	add	r3, r2
 800162c:	7c5b      	ldrb	r3, [r3, #17]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 808e 	bne.w	8001750 <_GameEngineColissionHandler+0x174>
 8001634:	7d7a      	ldrb	r2, [r7, #21]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4413      	add	r3, r2
 8001644:	7c5b      	ldrb	r3, [r3, #17]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 8082 	bne.w	8001750 <_GameEngineColissionHandler+0x174>
				{
					if (objEnemy[i].x_cor - objBullet[k].x_cor < 1)																				// **************************
 800164c:	7dba      	ldrb	r2, [r7, #22]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	461a      	mov	r2, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4413      	add	r3, r2
 800165c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001660:	4619      	mov	r1, r3
 8001662:	7d7a      	ldrb	r2, [r7, #21]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001676:	1acb      	subs	r3, r1, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	dc69      	bgt.n	8001750 <_GameEngineColissionHandler+0x174>
					{
						if ((objEnemy[i].y_cor - 2 <= objBullet[k].y_cor) && (objEnemy[i].y_cor + SPRITE8 >= objBullet[k].y_cor))				// **************************
 800167c:	7dba      	ldrb	r2, [r7, #22]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	461a      	mov	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4413      	add	r3, r2
 800168c:	79db      	ldrb	r3, [r3, #7]
 800168e:	1e99      	subs	r1, r3, #2
 8001690:	7d7a      	ldrb	r2, [r7, #21]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	79db      	ldrb	r3, [r3, #7]
 80016a2:	4299      	cmp	r1, r3
 80016a4:	dc54      	bgt.n	8001750 <_GameEngineColissionHandler+0x174>
 80016a6:	7dba      	ldrb	r2, [r7, #22]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	461a      	mov	r2, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	4413      	add	r3, r2
 80016b6:	79db      	ldrb	r3, [r3, #7]
 80016b8:	f103 0108 	add.w	r1, r3, #8
 80016bc:	7d7a      	ldrb	r2, [r7, #21]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	461a      	mov	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4413      	add	r3, r2
 80016cc:	79db      	ldrb	r3, [r3, #7]
 80016ce:	4299      	cmp	r1, r3
 80016d0:	db3e      	blt.n	8001750 <_GameEngineColissionHandler+0x174>
						{
							objEnemy[i].app = EXPLOSION;																						// **************************
 80016d2:	7dba      	ldrb	r2, [r7, #22]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	461a      	mov	r2, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	2202      	movs	r2, #2
 80016e4:	745a      	strb	r2, [r3, #17]
							objBullet[k].app = DISAPPEAR;
 80016e6:	7d7a      	ldrb	r2, [r7, #21]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	461a      	mov	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	2201      	movs	r2, #1
 80016f8:	745a      	strb	r2, [r3, #17]
																																				// **************************
							game->score += (ENEMY_KILL_SCORE * objEnemy[i].speed * (objEnemy[i].x_cor + objEnemy[i].speed));
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6859      	ldr	r1, [r3, #4]
 80016fe:	7dba      	ldrb	r2, [r7, #22]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	461a      	mov	r2, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	4413      	add	r3, r2
 800170e:	7a9b      	ldrb	r3, [r3, #10]
 8001710:	461a      	mov	r2, r3
 8001712:	4613      	mov	r3, r2
 8001714:	015b      	lsls	r3, r3, #5
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	1a98      	subs	r0, r3, r2
 800171c:	7dba      	ldrb	r2, [r7, #22]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	461a      	mov	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	4413      	add	r3, r2
 800172c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001730:	461c      	mov	r4, r3
 8001732:	7dba      	ldrb	r2, [r7, #22]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	461a      	mov	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	4413      	add	r3, r2
 8001742:	7a9b      	ldrb	r3, [r3, #10]
 8001744:	4423      	add	r3, r4
 8001746:	fb03 f300 	mul.w	r3, r3, r0
 800174a:	18ca      	adds	r2, r1, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	605a      	str	r2, [r3, #4]
			for (u8 k = 0; k < BULLET_QUANTITY; k++) 																							// BULLET & ENEMYES COLLISION
 8001750:	7d7b      	ldrb	r3, [r7, #21]
 8001752:	3301      	adds	r3, #1
 8001754:	757b      	strb	r3, [r7, #21]
 8001756:	7d7b      	ldrb	r3, [r7, #21]
 8001758:	2b13      	cmp	r3, #19
 800175a:	f67f af5f 	bls.w	800161c <_GameEngineColissionHandler+0x40>
					else
						;
				}
			}

			if (objEnemy[i].app == APPEAR)																										// ENEMYES & STARSHIP COLLISION
 800175e:	7dba      	ldrb	r2, [r7, #22]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	461a      	mov	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	4413      	add	r3, r2
 800176e:	7c5b      	ldrb	r3, [r3, #17]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f040 80a8 	bne.w	80018c6 <_GameEngineColissionHandler+0x2ea>
			{
				if(objEnemy[i].x_cor - objStarship->x_cor - SPRITE16 < objEnemy[i].speed && objStarship->x_cor - objEnemy[i].x_cor < SPRITE8)	// ****************************
 8001776:	7dba      	ldrb	r2, [r7, #22]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	461a      	mov	r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	4413      	add	r3, r2
 8001786:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800178a:	461a      	mov	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f1a3 0110 	sub.w	r1, r3, #16
 8001798:	7dba      	ldrb	r2, [r7, #22]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	461a      	mov	r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	7a9b      	ldrb	r3, [r3, #10]
 80017aa:	4299      	cmp	r1, r3
 80017ac:	f280 808b 	bge.w	80018c6 <_GameEngineColissionHandler+0x2ea>
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80017b6:	4619      	mov	r1, r3
 80017b8:	7dba      	ldrb	r2, [r7, #22]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	461a      	mov	r2, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80017cc:	1acb      	subs	r3, r1, r3
 80017ce:	2b07      	cmp	r3, #7
 80017d0:	dc79      	bgt.n	80018c6 <_GameEngineColissionHandler+0x2ea>
				{
					if (objStarship->y_cor - objEnemy[i].y_cor < SPRITE8 && objEnemy[i].y_cor - objStarship->y_cor < SPRITE16)					// ****************************
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	79db      	ldrb	r3, [r3, #7]
 80017d6:	4619      	mov	r1, r3
 80017d8:	7dba      	ldrb	r2, [r7, #22]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	461a      	mov	r2, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	79db      	ldrb	r3, [r3, #7]
 80017ea:	1acb      	subs	r3, r1, r3
 80017ec:	2b07      	cmp	r3, #7
 80017ee:	dc6a      	bgt.n	80018c6 <_GameEngineColissionHandler+0x2ea>
 80017f0:	7dba      	ldrb	r2, [r7, #22]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	461a      	mov	r2, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	79db      	ldrb	r3, [r3, #7]
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	79db      	ldrb	r3, [r3, #7]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b0f      	cmp	r3, #15
 800180c:	dc5b      	bgt.n	80018c6 <_GameEngineColissionHandler+0x2ea>
					{
						objEnemy[i].app = EXPLOSION;																							// ****************************
 800180e:	7dba      	ldrb	r2, [r7, #22]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	461a      	mov	r2, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	4413      	add	r3, r2
 800181e:	2202      	movs	r2, #2
 8001820:	745a      	strb	r2, [r3, #17]

						if (!(objStarship->shield))																								// ****************************
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d122      	bne.n	8001870 <_GameEngineColissionHandler+0x294>
						{
							objStarship->wound = WOUNDED;																						// ****************************
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2201      	movs	r2, #1
 800182e:	739a      	strb	r2, [r3, #14]
							--objStarship->hitPoints;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001836:	b29b      	uxth	r3, r3
 8001838:	3b01      	subs	r3, #1
 800183a:	b29b      	uxth	r3, r3
 800183c:	b21a      	sxth	r2, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	809a      	strh	r2, [r3, #4]
							game->score -= ENEMY_KILL_SCORE * (ENEMY_SPEED + 2 - objEnemy[i].speed) * 100;										// ****************************
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6859      	ldr	r1, [r3, #4]
 8001846:	7dba      	ldrb	r2, [r7, #22]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	461a      	mov	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	4413      	add	r3, r2
 8001856:	7a9b      	ldrb	r3, [r3, #10]
 8001858:	f1c3 0304 	rsb	r3, r3, #4
 800185c:	4a9d      	ldr	r2, [pc, #628]	; (8001ad4 <_GameEngineColissionHandler+0x4f8>)
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	18ca      	adds	r2, r1, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	605a      	str	r2, [r3, #4]

							objStarship->shield = STARSHIP_SHIELD;																				// ****************************
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2264      	movs	r2, #100	; 0x64
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e02a      	b.n	80018c6 <_GameEngineColissionHandler+0x2ea>
						}
																																				// ****************************
						else
							game->score += (ENEMY_KILL_COLLISION_SCORE * objEnemy[i].speed * (objEnemy[i].x_cor + objEnemy[i].speed));			// ****************************
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6859      	ldr	r1, [r3, #4]
 8001874:	7dba      	ldrb	r2, [r7, #22]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	461a      	mov	r2, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4413      	add	r3, r2
 8001884:	7a9b      	ldrb	r3, [r3, #10]
 8001886:	461a      	mov	r2, r3
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	1898      	adds	r0, r3, r2
 8001892:	7dba      	ldrb	r2, [r7, #22]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	461a      	mov	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80018a6:	461c      	mov	r4, r3
 80018a8:	7dba      	ldrb	r2, [r7, #22]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	461a      	mov	r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	7a9b      	ldrb	r3, [r3, #10]
 80018ba:	4423      	add	r3, r4
 80018bc:	fb03 f300 	mul.w	r3, r3, r0
 80018c0:	18ca      	adds	r2, r1, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	605a      	str	r2, [r3, #4]
		for (u8 i = 0; i < ENEMY_MAX_QANT  + game->gameLVL; i++)
 80018c6:	7dbb      	ldrb	r3, [r7, #22]
 80018c8:	3301      	adds	r3, #1
 80018ca:	75bb      	strb	r3, [r7, #22]
 80018cc:	7dba      	ldrb	r2, [r7, #22]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	7a1b      	ldrb	r3, [r3, #8]
 80018d2:	330a      	adds	r3, #10
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f6ff ae9e 	blt.w	8001616 <_GameEngineColissionHandler+0x3a>
					}
				}
			}
		}

		if (objCare->app == APPEAR)																												// STARSHIP & CARE COLLISION
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	7c5b      	ldrb	r3, [r3, #17]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 81df 	bne.w	8001ca2 <_GameEngineColissionHandler+0x6c6>
		{
			if(objCare->x_cor - objStarship->x_cor - SPRITE16 < CARE_SPEED && objStarship->x_cor - objCare->x_cor < SPRITE8)					// *************************
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	3b10      	subs	r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f300 81d3 	bgt.w	8001ca2 <_GameEngineColissionHandler+0x6c6>
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001902:	461a      	mov	r2, r3
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b07      	cmp	r3, #7
 800190e:	f300 81c8 	bgt.w	8001ca2 <_GameEngineColissionHandler+0x6c6>
			{
				if (objStarship->y_cor - objCare->y_cor < SPRITE8 && objCare->y_cor - objStarship->y_cor < SPRITE16)							// *************************
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	79db      	ldrb	r3, [r3, #7]
 8001916:	461a      	mov	r2, r3
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	79db      	ldrb	r3, [r3, #7]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b07      	cmp	r3, #7
 8001920:	f300 81bf 	bgt.w	8001ca2 <_GameEngineColissionHandler+0x6c6>
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	79db      	ldrb	r3, [r3, #7]
 8001928:	461a      	mov	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	79db      	ldrb	r3, [r3, #7]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b0f      	cmp	r3, #15
 8001932:	f300 81b6 	bgt.w	8001ca2 <_GameEngineColissionHandler+0x6c6>
				{
					objCare->app = DISAPPEAR;																									// *************************
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	2201      	movs	r2, #1
 800193a:	745a      	strb	r2, [r3, #17]
					game->score += CARE_COLLISION_SCORE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001944:	4413      	add	r3, r2
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	6053      	str	r3, [r2, #4]
					objStarship->shield = STARSHIP_SHIELD;																						// *************************
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2264      	movs	r2, #100	; 0x64
 800194e:	601a      	str	r2, [r3, #0]
					if (objStarship->hitPoints < STARSHIP_MAX_HP)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001956:	2b04      	cmp	r3, #4
 8001958:	f300 81a3 	bgt.w	8001ca2 <_GameEngineColissionHandler+0x6c6>
						objStarship->hitPoints++;																								// *************************
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001962:	b29b      	uxth	r3, r3
 8001964:	3301      	adds	r3, #1
 8001966:	b29b      	uxth	r3, r3
 8001968:	b21a      	sxth	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	809a      	strh	r2, [r3, #4]
					}
				}
			}
		}
	}
}
 800196e:	e198      	b.n	8001ca2 <_GameEngineColissionHandler+0x6c6>
	else if(game->gameState == BOSS_PASS)																										// BOSS BULLET & BULLET COLLISION
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	f040 8194 	bne.w	8001ca2 <_GameEngineColissionHandler+0x6c6>
		for (u8 i = 0; i < BULLET_QUANTITY; i++)																								// ******************************
 800197a:	2300      	movs	r3, #0
 800197c:	753b      	strb	r3, [r7, #20]
 800197e:	e0a1      	b.n	8001ac4 <_GameEngineColissionHandler+0x4e8>
			for (u8 k = 0; k < BOSS_BULLET_QUANTITY; k++)																						// ******************************
 8001980:	2300      	movs	r3, #0
 8001982:	74fb      	strb	r3, [r7, #19]
 8001984:	e097      	b.n	8001ab6 <_GameEngineColissionHandler+0x4da>
				if (objBullet[i].app == APPEAR && objBossBullet[k].app == APPEAR)																// ******************************
 8001986:	7d3a      	ldrb	r2, [r7, #20]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	461a      	mov	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	7c5b      	ldrb	r3, [r3, #17]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f040 8089 	bne.w	8001ab0 <_GameEngineColissionHandler+0x4d4>
 800199e:	7cfa      	ldrb	r2, [r7, #19]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	461a      	mov	r2, r3
 80019aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ac:	4413      	add	r3, r2
 80019ae:	7c5b      	ldrb	r3, [r3, #17]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d17d      	bne.n	8001ab0 <_GameEngineColissionHandler+0x4d4>
					if (objBossBullet[k].x_cor - objBullet[i].x_cor < objBullet[i].speed + objBossBullet[k].speed)								// ******************************
 80019b4:	7cfa      	ldrb	r2, [r7, #19]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	461a      	mov	r2, r3
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	4413      	add	r3, r2
 80019c4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80019c8:	4619      	mov	r1, r3
 80019ca:	7d3a      	ldrb	r2, [r7, #20]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	461a      	mov	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80019de:	1ac9      	subs	r1, r1, r3
 80019e0:	7d3a      	ldrb	r2, [r7, #20]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	461a      	mov	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	7a9b      	ldrb	r3, [r3, #10]
 80019f2:	4618      	mov	r0, r3
 80019f4:	7cfa      	ldrb	r2, [r7, #19]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	461a      	mov	r2, r3
 8001a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a02:	4413      	add	r3, r2
 8001a04:	7a9b      	ldrb	r3, [r3, #10]
 8001a06:	4403      	add	r3, r0
 8001a08:	4299      	cmp	r1, r3
 8001a0a:	da51      	bge.n	8001ab0 <_GameEngineColissionHandler+0x4d4>
						if ((objBullet[i].y_cor - 2 <= objBossBullet[k].y_cor) && (objBullet[i].y_cor + 3 >= objBossBullet[k].y_cor))			// ******************************
 8001a0c:	7d3a      	ldrb	r2, [r7, #20]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	79db      	ldrb	r3, [r3, #7]
 8001a1e:	1e99      	subs	r1, r3, #2
 8001a20:	7cfa      	ldrb	r2, [r7, #19]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	4413      	add	r3, r2
 8001a30:	79db      	ldrb	r3, [r3, #7]
 8001a32:	4299      	cmp	r1, r3
 8001a34:	dc3c      	bgt.n	8001ab0 <_GameEngineColissionHandler+0x4d4>
 8001a36:	7d3a      	ldrb	r2, [r7, #20]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	79db      	ldrb	r3, [r3, #7]
 8001a48:	1cd9      	adds	r1, r3, #3
 8001a4a:	7cfa      	ldrb	r2, [r7, #19]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	461a      	mov	r2, r3
 8001a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a58:	4413      	add	r3, r2
 8001a5a:	79db      	ldrb	r3, [r3, #7]
 8001a5c:	4299      	cmp	r1, r3
 8001a5e:	db27      	blt.n	8001ab0 <_GameEngineColissionHandler+0x4d4>
							objBullet[i].app = DISAPPEAR;																						// ******************************
 8001a60:	7d3a      	ldrb	r2, [r7, #20]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	2201      	movs	r2, #1
 8001a72:	745a      	strb	r2, [r3, #17]
							objBossBullet[k].app = DISAPPEAR;
 8001a74:	7cfa      	ldrb	r2, [r7, #19]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	461a      	mov	r2, r3
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	4413      	add	r3, r2
 8001a84:	2201      	movs	r2, #1
 8001a86:	745a      	strb	r2, [r3, #17]
							game->score += (ENEMY_KILL_SCORE * objBossBullet[k].speed);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	7cfa      	ldrb	r2, [r7, #19]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	461a      	mov	r2, r3
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	4413      	add	r3, r2
 8001a9c:	7a9b      	ldrb	r3, [r3, #10]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	015b      	lsls	r3, r3, #5
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	18ca      	adds	r2, r1, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	605a      	str	r2, [r3, #4]
			for (u8 k = 0; k < BOSS_BULLET_QUANTITY; k++)																						// ******************************
 8001ab0:	7cfb      	ldrb	r3, [r7, #19]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	74fb      	strb	r3, [r7, #19]
 8001ab6:	7cfb      	ldrb	r3, [r7, #19]
 8001ab8:	2b1d      	cmp	r3, #29
 8001aba:	f67f af64 	bls.w	8001986 <_GameEngineColissionHandler+0x3aa>
		for (u8 i = 0; i < BULLET_QUANTITY; i++)																								// ******************************
 8001abe:	7d3b      	ldrb	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	753b      	strb	r3, [r7, #20]
 8001ac4:	7d3b      	ldrb	r3, [r7, #20]
 8001ac6:	2b13      	cmp	r3, #19
 8001ac8:	f67f af5a 	bls.w	8001980 <_GameEngineColissionHandler+0x3a4>
		for (u8 i = 0; i < BULLET_QUANTITY; i++)																								// SH BULLET & BOSS COLLISION
 8001acc:	2300      	movs	r3, #0
 8001ace:	74bb      	strb	r3, [r7, #18]
 8001ad0:	e062      	b.n	8001b98 <_GameEngineColissionHandler+0x5bc>
 8001ad2:	bf00      	nop
 8001ad4:	ffffcff4 	.word	0xffffcff4
			if (objBullet[i].app == APPEAR)																										// **************************
 8001ad8:	7cba      	ldrb	r2, [r7, #18]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	7c5b      	ldrb	r3, [r3, #17]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d151      	bne.n	8001b92 <_GameEngineColissionHandler+0x5b6>
				if (objBullet[i].x_cor >= DISPLAY_WIDTH - (objBoss->type / boss_10_LVL_Dummy * SPRITE8))										// **************************
 8001aee:	7cba      	ldrb	r2, [r7, #18]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	461a      	mov	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001b02:	4619      	mov	r1, r3
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	7c1a      	ldrb	r2, [r3, #16]
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f1c3 0310 	rsb	r3, r3, #16
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4299      	cmp	r1, r3
 8001b18:	db3b      	blt.n	8001b92 <_GameEngineColissionHandler+0x5b6>
					if ((objBoss->y_cor - 2 <= objBullet[i].y_cor) && (objBoss->y_cor + (objBoss->type * SPRITE8) >= objBullet[i].y_cor))		// **************************
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	79db      	ldrb	r3, [r3, #7]
 8001b1e:	1e99      	subs	r1, r3, #2
 8001b20:	7cba      	ldrb	r2, [r7, #18]
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	79db      	ldrb	r3, [r3, #7]
 8001b32:	4299      	cmp	r1, r3
 8001b34:	dc2d      	bgt.n	8001b92 <_GameEngineColissionHandler+0x5b6>
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	79db      	ldrb	r3, [r3, #7]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	7c1b      	ldrb	r3, [r3, #16]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	18d1      	adds	r1, r2, r3
 8001b44:	7cba      	ldrb	r2, [r7, #18]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	79db      	ldrb	r3, [r3, #7]
 8001b56:	4299      	cmp	r1, r3
 8001b58:	db1b      	blt.n	8001b92 <_GameEngineColissionHandler+0x5b6>
						objBoss->wound = WOUNDED;																								// **************************
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	739a      	strb	r2, [r3, #14]
						objBullet[i].app = DISAPPEAR;
 8001b60:	7cba      	ldrb	r2, [r7, #18]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	2201      	movs	r2, #1
 8001b72:	745a      	strb	r2, [r3, #17]
						objBoss->hitPoints -= BULLET_POWER;																						// **************************
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b14      	subs	r3, #20
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	809a      	strh	r2, [r3, #4]
						game->score += (BOSS_HIT_SCORE * BULLET_POWER);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f203 523c 	addw	r2, r3, #1340	; 0x53c
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	605a      	str	r2, [r3, #4]
		for (u8 i = 0; i < BULLET_QUANTITY; i++)																								// SH BULLET & BOSS COLLISION
 8001b92:	7cbb      	ldrb	r3, [r7, #18]
 8001b94:	3301      	adds	r3, #1
 8001b96:	74bb      	strb	r3, [r7, #18]
 8001b98:	7cbb      	ldrb	r3, [r7, #18]
 8001b9a:	2b13      	cmp	r3, #19
 8001b9c:	d99c      	bls.n	8001ad8 <_GameEngineColissionHandler+0x4fc>
		for (u8 i = 0; i < BOSS_BULLET_QUANTITY; i++)																							// BOSS BULLET & SH COLLISION
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	747b      	strb	r3, [r7, #17]
 8001ba2:	e07b      	b.n	8001c9c <_GameEngineColissionHandler+0x6c0>
			if (objBossBullet[i].app == APPEAR)																									// **************************
 8001ba4:	7c7a      	ldrb	r2, [r7, #17]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	461a      	mov	r2, r3
 8001bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb2:	4413      	add	r3, r2
 8001bb4:	7c5b      	ldrb	r3, [r3, #17]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d16d      	bne.n	8001c96 <_GameEngineColissionHandler+0x6ba>
				if (objBossBullet[i].x_cor - objStarship->x_cor - SPRITE16 < objBossBullet[i].speed)											// **************************
 8001bba:	7c7a      	ldrb	r2, [r7, #17]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc8:	4413      	add	r3, r2
 8001bca:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f1a3 0110 	sub.w	r1, r3, #16
 8001bdc:	7c7a      	ldrb	r2, [r7, #17]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	461a      	mov	r2, r3
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bea:	4413      	add	r3, r2
 8001bec:	7a9b      	ldrb	r3, [r3, #10]
 8001bee:	4299      	cmp	r1, r3
 8001bf0:	da51      	bge.n	8001c96 <_GameEngineColissionHandler+0x6ba>
					if (objStarship->y_cor - objBossBullet[i].y_cor < 3 && objBossBullet[i].y_cor - objStarship->y_cor < SPRITE16)				// **************************
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	79db      	ldrb	r3, [r3, #7]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	7c7a      	ldrb	r2, [r7, #17]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	461a      	mov	r2, r3
 8001c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c06:	4413      	add	r3, r2
 8001c08:	79db      	ldrb	r3, [r3, #7]
 8001c0a:	1acb      	subs	r3, r1, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	dc42      	bgt.n	8001c96 <_GameEngineColissionHandler+0x6ba>
 8001c10:	7c7a      	ldrb	r2, [r7, #17]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1e:	4413      	add	r3, r2
 8001c20:	79db      	ldrb	r3, [r3, #7]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	79db      	ldrb	r3, [r3, #7]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	dc33      	bgt.n	8001c96 <_GameEngineColissionHandler+0x6ba>
						objBossBullet[i].app = DISAPPEAR;																						// **************************
 8001c2e:	7c7a      	ldrb	r2, [r7, #17]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	4413      	add	r3, r2
 8001c3e:	2201      	movs	r2, #1
 8001c40:	745a      	strb	r2, [r3, #17]
						if (!(objStarship->shield))																								// **************************
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d125      	bne.n	8001c96 <_GameEngineColissionHandler+0x6ba>
							objStarship->wound = WOUNDED;																						// **************************
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	739a      	strb	r2, [r3, #14]
							--objStarship->hitPoints;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	809a      	strh	r2, [r3, #4]
							game->score -= objBoss->lvl * ENEMY_KILL_COLLISION_SCORE * 10;														// **************************
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6859      	ldr	r1, [r3, #4]
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	7adb      	ldrb	r3, [r3, #11]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	015b      	lsls	r3, r3, #5
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	da00      	bge.n	8001c7c <_GameEngineColissionHandler+0x6a0>
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	105b      	asrs	r3, r3, #1
 8001c7e:	425b      	negs	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	18ca      	adds	r2, r1, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	605a      	str	r2, [r3, #4]
							objStarship->shield = STARSHIP_SHIELD;																				// **************************
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2264      	movs	r2, #100	; 0x64
 8001c94:	601a      	str	r2, [r3, #0]
		for (u8 i = 0; i < BOSS_BULLET_QUANTITY; i++)																							// BOSS BULLET & SH COLLISION
 8001c96:	7c7b      	ldrb	r3, [r7, #17]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	747b      	strb	r3, [r7, #17]
 8001c9c:	7c7b      	ldrb	r3, [r7, #17]
 8001c9e:	2b1d      	cmp	r3, #29
 8001ca0:	d980      	bls.n	8001ba4 <_GameEngineColissionHandler+0x5c8>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc90      	pop	{r4, r7}
 8001caa:	4770      	bx	lr

08001cac <_GameEngineScoreHandler>:

void _GameEngineScoreHandler (_GameFeature* game)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	if (game->score < 0)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da03      	bge.n	8001cc4 <_GameEngineScoreHandler+0x18>
		game->score = 0;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	605a      	str	r2, [r3, #4]

	else if (game->score > GAME_DIFFICULTY * GAME_LVL_PASS_SCORE * game->gameLVL)
		if (game->gameState != BOSS_PASS)
			game->gameState = BOSS_PASS;
}
 8001cc2:	e010      	b.n	8001ce6 <_GameEngineScoreHandler+0x3a>
	else if (game->score > GAME_DIFFICULTY * GAME_LVL_PASS_SCORE * game->gameLVL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7a1b      	ldrb	r3, [r3, #8]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <_GameEngineScoreHandler+0x48>)
 8001cd0:	fb03 f301 	mul.w	r3, r3, r1
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dd06      	ble.n	8001ce6 <_GameEngineScoreHandler+0x3a>
		if (game->gameState != BOSS_PASS)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d002      	beq.n	8001ce6 <_GameEngineScoreHandler+0x3a>
			game->gameState = BOSS_PASS;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	000186a0 	.word	0x000186a0

08001cf8 <_GameEngineLifeHandler>:

void _GameEngineLifeHandler (_GameFeature* game, _GameObject* objStarship)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
	if (objStarship->hitPoints < 1)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	dc02      	bgt.n	8001d12 <_GameEngineLifeHandler+0x1a>
		game->gameState = GAME_OVER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	701a      	strb	r2, [r3, #0]
		//objStarship->hitPoints = 1;		// Cheat ON :)
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <_GameEngineStarshipDraw>:

// ========================= DRAW FUNCTIONS =========================

void _GameEngineStarshipDraw (_GameObject* objStarship)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	if(objStarship->shield)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <_GameEngineStarshipDraw+0x26>
		ssd1306_DrawSprite16x16(objStarship->x_cor, objStarship->y_cor, GUI_STARSHIP_WSH_DRAW, 1);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001d36:	b2d8      	uxtb	r0, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	79d9      	ldrb	r1, [r3, #7]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <_GameEngineStarshipDraw+0x44>)
 8001d40:	f001 fc7b 	bl	800363a <ssd1306_DrawSprite16x16>
	else
		ssd1306_DrawSprite16x16(objStarship->x_cor, objStarship->y_cor, GUI_STARSHIP_DRAW, 1);
}
 8001d44:	e009      	b.n	8001d5a <_GameEngineStarshipDraw+0x3a>
		ssd1306_DrawSprite16x16(objStarship->x_cor, objStarship->y_cor, GUI_STARSHIP_DRAW, 1);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001d4c:	b2d8      	uxtb	r0, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	79d9      	ldrb	r1, [r3, #7]
 8001d52:	2301      	movs	r3, #1
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <_GameEngineStarshipDraw+0x48>)
 8001d56:	f001 fc70 	bl	800363a <ssd1306_DrawSprite16x16>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	08006244 	.word	0x08006244
 8001d68:	08006224 	.word	0x08006224

08001d6c <_GameEngineBulletsDraw>:

void _GameEngineBulletsDraw (_GameObject* objBullet)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	for (u8 i = 0; i < BULLET_QUANTITY; i++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	e075      	b.n	8001e66 <_GameEngineBulletsDraw+0xfa>
	{
		if (objBullet[i].app == APPEAR)
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	461a      	mov	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	7c5b      	ldrb	r3, [r3, #17]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d167      	bne.n	8001e60 <_GameEngineBulletsDraw+0xf4>
		{
			ssd1306_DrawPixel(objBullet[i].x_cor, objBullet[i].y_cor, 1);
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001da4:	b2d8      	uxtb	r0, r3
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	461a      	mov	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	79db      	ldrb	r3, [r3, #7]
 8001db8:	2201      	movs	r2, #1
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f001 f9c4 	bl	8003148 <ssd1306_DrawPixel>
			ssd1306_DrawPixel(objBullet[i].x_cor + 1, objBullet[i].y_cor, 1);
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b2d8      	uxtb	r0, r3
 8001dda:	7bfa      	ldrb	r2, [r7, #15]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	461a      	mov	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	79db      	ldrb	r3, [r3, #7]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4619      	mov	r1, r3
 8001df0:	f001 f9aa 	bl	8003148 <ssd1306_DrawPixel>
			ssd1306_DrawPixel(objBullet[i].x_cor, objBullet[i].y_cor + 1, 1);
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001e08:	b2d8      	uxtb	r0, r3
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	461a      	mov	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	79db      	ldrb	r3, [r3, #7]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2201      	movs	r2, #1
 8001e22:	4619      	mov	r1, r3
 8001e24:	f001 f990 	bl	8003148 <ssd1306_DrawPixel>
			ssd1306_DrawPixel(objBullet[i].x_cor + 1, objBullet[i].y_cor + 1, 1);
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	461a      	mov	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b2d8      	uxtb	r0, r3
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	79db      	ldrb	r3, [r3, #7]
 8001e54:	3301      	adds	r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f001 f974 	bl	8003148 <ssd1306_DrawPixel>
	for (u8 i = 0; i < BULLET_QUANTITY; i++)
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	3301      	adds	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	2b13      	cmp	r3, #19
 8001e6a:	d986      	bls.n	8001d7a <_GameEngineBulletsDraw+0xe>
		}
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_GameEngineEnemyesDraw>:

void _GameEngineEnemyesDraw (_GameFeature* game, _GameObject* objEnemy)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	for (u8 i = 0; i < ENEMY_MAX_QANT + game->gameLVL; i++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
 8001e82:	e031      	b.n	8001ee8 <_GameEngineEnemyesDraw+0x74>
	{
		if (objEnemy[i].app == APPEAR)
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	7c5b      	ldrb	r3, [r3, #17]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <_GameEngineEnemyesDraw+0x40>
			_GameEngineDrawObject8x8(&objEnemy[i], GUI_ENEMYS_PLANE_DRAW);
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4914      	ldr	r1, [pc, #80]	; (8001efc <_GameEngineEnemyesDraw+0x88>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fc33 	bl	8002718 <_GameEngineDrawObject8x8>
 8001eb2:	e016      	b.n	8001ee2 <_GameEngineEnemyesDraw+0x6e>

		else if (objEnemy[i].app == EXPLOSION)
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	7c5b      	ldrb	r3, [r3, #17]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d10b      	bne.n	8001ee2 <_GameEngineEnemyesDraw+0x6e>
			_GameEngineDrawObject8x8(&objEnemy[i], GUI_EXPLOSION_DRAW);
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4909      	ldr	r1, [pc, #36]	; (8001f00 <_GameEngineEnemyesDraw+0x8c>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fc1b 	bl	8002718 <_GameEngineDrawObject8x8>
	for (u8 i = 0; i < ENEMY_MAX_QANT + game->gameLVL; i++)
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7a1b      	ldrb	r3, [r3, #8]
 8001eee:	330a      	adds	r3, #10
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbc7      	blt.n	8001e84 <_GameEngineEnemyesDraw+0x10>
	}
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	080061f4 	.word	0x080061f4
 8001f00:	080061fc 	.word	0x080061fc

08001f04 <_GameEngineCareDraw>:

void _GameEngineCareDraw (_GameObject* objCare)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	if (objCare->app == APPEAR)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7c5b      	ldrb	r3, [r3, #17]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d103      	bne.n	8001f1c <_GameEngineCareDraw+0x18>
		_GameEngineDrawObject8x8(objCare, GUI_CARE_DRAW);
 8001f14:	4903      	ldr	r1, [pc, #12]	; (8001f24 <_GameEngineCareDraw+0x20>)
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fbfe 	bl	8002718 <_GameEngineDrawObject8x8>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	08006204 	.word	0x08006204

08001f28 <_GameEngineBossDraw>:

void _GameEngineBossDraw (_GameObject* objBoss)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	if (objBoss->app == APPEAR)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7c5b      	ldrb	r3, [r3, #17]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f040 80ab 	bne.w	8002090 <_GameEngineBossDraw+0x168>
		switch (objBoss->lvl)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7adb      	ldrb	r3, [r3, #11]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	f200 80a5 	bhi.w	8002090 <_GameEngineBossDraw+0x168>
 8001f46:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <_GameEngineBossDraw+0x24>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001f75 	.word	0x08001f75
 8001f50:	08001f91 	.word	0x08001f91
 8001f54:	08001fad 	.word	0x08001fad
 8001f58:	08001fc9 	.word	0x08001fc9
 8001f5c:	08001fe5 	.word	0x08001fe5
 8001f60:	08002001 	.word	0x08002001
 8001f64:	0800201d 	.word	0x0800201d
 8001f68:	08002039 	.word	0x08002039
 8001f6c:	08002055 	.word	0x08002055
 8001f70:	08002071 	.word	0x08002071
		{
			case 1:
			{
				if (objBoss->wound == WOUNDED)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7b9b      	ldrb	r3, [r3, #14]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d104      	bne.n	8001f86 <_GameEngineBossDraw+0x5e>
					_GameEngineDrawObject16x16(objBoss, GUI_DRAW_NFILL_16x16);
 8001f7c:	4946      	ldr	r1, [pc, #280]	; (8002098 <_GameEngineBossDraw+0x170>)
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fbee 	bl	8002760 <_GameEngineDrawObject16x16>
				else
					_GameEngineDrawObject16x16(objBoss, GUI_DRAW_BOSS_1LVL);
				break;
 8001f84:	e084      	b.n	8002090 <_GameEngineBossDraw+0x168>
					_GameEngineDrawObject16x16(objBoss, GUI_DRAW_BOSS_1LVL);
 8001f86:	4945      	ldr	r1, [pc, #276]	; (800209c <_GameEngineBossDraw+0x174>)
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fbe9 	bl	8002760 <_GameEngineDrawObject16x16>
				break;
 8001f8e:	e07f      	b.n	8002090 <_GameEngineBossDraw+0x168>
			}

			case 2:
			{
				if (objBoss->wound == WOUNDED)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7b9b      	ldrb	r3, [r3, #14]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d104      	bne.n	8001fa2 <_GameEngineBossDraw+0x7a>
					_GameEngineDrawObject16x16(objBoss, GUI_DRAW_NFILL_16x16);
 8001f98:	493f      	ldr	r1, [pc, #252]	; (8002098 <_GameEngineBossDraw+0x170>)
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fbe0 	bl	8002760 <_GameEngineDrawObject16x16>
				else
					_GameEngineDrawObject16x16(objBoss, GUI_DRAW_BOSS_2LVL);
				break;
 8001fa0:	e076      	b.n	8002090 <_GameEngineBossDraw+0x168>
					_GameEngineDrawObject16x16(objBoss, GUI_DRAW_BOSS_2LVL);
 8001fa2:	493f      	ldr	r1, [pc, #252]	; (80020a0 <_GameEngineBossDraw+0x178>)
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fbdb 	bl	8002760 <_GameEngineDrawObject16x16>
				break;
 8001faa:	e071      	b.n	8002090 <_GameEngineBossDraw+0x168>
			}

			case 3:
			{
				if (objBoss->wound == WOUNDED)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7b9b      	ldrb	r3, [r3, #14]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d104      	bne.n	8001fbe <_GameEngineBossDraw+0x96>
					_GameEngineDrawObject16x16(objBoss, GUI_DRAW_NFILL_16x16);
 8001fb4:	4938      	ldr	r1, [pc, #224]	; (8002098 <_GameEngineBossDraw+0x170>)
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fbd2 	bl	8002760 <_GameEngineDrawObject16x16>
				else
					_GameEngineDrawObject16x16(objBoss, GUI_DRAW_BOSS_3LVL);
				break;
 8001fbc:	e068      	b.n	8002090 <_GameEngineBossDraw+0x168>
					_GameEngineDrawObject16x16(objBoss, GUI_DRAW_BOSS_3LVL);
 8001fbe:	4939      	ldr	r1, [pc, #228]	; (80020a4 <_GameEngineBossDraw+0x17c>)
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 fbcd 	bl	8002760 <_GameEngineDrawObject16x16>
				break;
 8001fc6:	e063      	b.n	8002090 <_GameEngineBossDraw+0x168>
			}

			case 4:
			{
				if (objBoss->wound == WOUNDED)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7b9b      	ldrb	r3, [r3, #14]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d104      	bne.n	8001fda <_GameEngineBossDraw+0xb2>
					_GameEngineDrawObject24x24(objBoss, GUI_DRAW_NFILL_24x24);
 8001fd0:	4935      	ldr	r1, [pc, #212]	; (80020a8 <_GameEngineBossDraw+0x180>)
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fbe8 	bl	80027a8 <_GameEngineDrawObject24x24>
				else
					_GameEngineDrawObject24x24(objBoss, GUI_DRAW_BOSS_4LVL);
				break;
 8001fd8:	e05a      	b.n	8002090 <_GameEngineBossDraw+0x168>
					_GameEngineDrawObject24x24(objBoss, GUI_DRAW_BOSS_4LVL);
 8001fda:	4934      	ldr	r1, [pc, #208]	; (80020ac <_GameEngineBossDraw+0x184>)
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fbe3 	bl	80027a8 <_GameEngineDrawObject24x24>
				break;
 8001fe2:	e055      	b.n	8002090 <_GameEngineBossDraw+0x168>
			}

			case 5:
			{
				if (objBoss->wound == WOUNDED)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7b9b      	ldrb	r3, [r3, #14]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d104      	bne.n	8001ff6 <_GameEngineBossDraw+0xce>
					_GameEngineDrawObject24x24(objBoss, GUI_DRAW_NFILL_24x24);
 8001fec:	492e      	ldr	r1, [pc, #184]	; (80020a8 <_GameEngineBossDraw+0x180>)
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fbda 	bl	80027a8 <_GameEngineDrawObject24x24>
				else
					_GameEngineDrawObject24x24(objBoss, GUI_DRAW_BOSS_5LVL);
				break;
 8001ff4:	e04c      	b.n	8002090 <_GameEngineBossDraw+0x168>
					_GameEngineDrawObject24x24(objBoss, GUI_DRAW_BOSS_5LVL);
 8001ff6:	492e      	ldr	r1, [pc, #184]	; (80020b0 <_GameEngineBossDraw+0x188>)
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fbd5 	bl	80027a8 <_GameEngineDrawObject24x24>
				break;
 8001ffe:	e047      	b.n	8002090 <_GameEngineBossDraw+0x168>
			}

			case 6:
			{
				if (objBoss->wound == WOUNDED)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7b9b      	ldrb	r3, [r3, #14]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d104      	bne.n	8002012 <_GameEngineBossDraw+0xea>
					_GameEngineDrawObject24x24(objBoss, GUI_DRAW_NFILL_24x24);
 8002008:	4927      	ldr	r1, [pc, #156]	; (80020a8 <_GameEngineBossDraw+0x180>)
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fbcc 	bl	80027a8 <_GameEngineDrawObject24x24>
				else
					_GameEngineDrawObject24x24(objBoss, GUI_DRAW_BOSS_6LVL);
				break;
 8002010:	e03e      	b.n	8002090 <_GameEngineBossDraw+0x168>
					_GameEngineDrawObject24x24(objBoss, GUI_DRAW_BOSS_6LVL);
 8002012:	4928      	ldr	r1, [pc, #160]	; (80020b4 <_GameEngineBossDraw+0x18c>)
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fbc7 	bl	80027a8 <_GameEngineDrawObject24x24>
				break;
 800201a:	e039      	b.n	8002090 <_GameEngineBossDraw+0x168>
			}

			case 7:
			{
				if (objBoss->wound == WOUNDED)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7b9b      	ldrb	r3, [r3, #14]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d104      	bne.n	800202e <_GameEngineBossDraw+0x106>
					_GameEngineDrawObject32x32(objBoss, GUI_DRAW_NFILL_32x32);
 8002024:	4924      	ldr	r1, [pc, #144]	; (80020b8 <_GameEngineBossDraw+0x190>)
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fbe2 	bl	80027f0 <_GameEngineDrawObject32x32>
				else
					_GameEngineDrawObject32x32(objBoss, GUI_DRAW_BOSS_7LVL);
				break;
 800202c:	e030      	b.n	8002090 <_GameEngineBossDraw+0x168>
					_GameEngineDrawObject32x32(objBoss, GUI_DRAW_BOSS_7LVL);
 800202e:	4923      	ldr	r1, [pc, #140]	; (80020bc <_GameEngineBossDraw+0x194>)
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fbdd 	bl	80027f0 <_GameEngineDrawObject32x32>
				break;
 8002036:	e02b      	b.n	8002090 <_GameEngineBossDraw+0x168>
			}

			case 8:
			{
				if (objBoss->wound == WOUNDED)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7b9b      	ldrb	r3, [r3, #14]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d104      	bne.n	800204a <_GameEngineBossDraw+0x122>
					_GameEngineDrawObject32x32(objBoss, GUI_DRAW_NFILL_32x32);
 8002040:	491d      	ldr	r1, [pc, #116]	; (80020b8 <_GameEngineBossDraw+0x190>)
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fbd4 	bl	80027f0 <_GameEngineDrawObject32x32>
				else
					_GameEngineDrawObject32x32(objBoss, GUI_DRAW_BOSS_8LVL);
				break;
 8002048:	e022      	b.n	8002090 <_GameEngineBossDraw+0x168>
					_GameEngineDrawObject32x32(objBoss, GUI_DRAW_BOSS_8LVL);
 800204a:	491d      	ldr	r1, [pc, #116]	; (80020c0 <_GameEngineBossDraw+0x198>)
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fbcf 	bl	80027f0 <_GameEngineDrawObject32x32>
				break;
 8002052:	e01d      	b.n	8002090 <_GameEngineBossDraw+0x168>
			}

			case 9:
			{
				if (objBoss->wound == WOUNDED)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7b9b      	ldrb	r3, [r3, #14]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d104      	bne.n	8002066 <_GameEngineBossDraw+0x13e>
					_GameEngineDrawObject8x8(objBoss, GUI_DRAW_NFILL_8x8);
 800205c:	4919      	ldr	r1, [pc, #100]	; (80020c4 <_GameEngineBossDraw+0x19c>)
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 fb5a 	bl	8002718 <_GameEngineDrawObject8x8>
				else
					_GameEngineDrawObject8x8(objBoss, GUI_DRAW_BOSS_9LVL);
				break;
 8002064:	e014      	b.n	8002090 <_GameEngineBossDraw+0x168>
					_GameEngineDrawObject8x8(objBoss, GUI_DRAW_BOSS_9LVL);
 8002066:	4918      	ldr	r1, [pc, #96]	; (80020c8 <_GameEngineBossDraw+0x1a0>)
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fb55 	bl	8002718 <_GameEngineDrawObject8x8>
				break;
 800206e:	e00f      	b.n	8002090 <_GameEngineBossDraw+0x168>
			}

			case 10:
			{
				if (objBoss->wound == WOUNDED)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7b9b      	ldrb	r3, [r3, #14]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <_GameEngineBossDraw+0x15c>
					_GameEngineDrawObject32x64(objBoss, GUI_DRAW_NFILL_32x32, GUI_DRAW_NFILL_32x32);
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <_GameEngineBossDraw+0x190>)
 800207a:	490f      	ldr	r1, [pc, #60]	; (80020b8 <_GameEngineBossDraw+0x190>)
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fbdb 	bl	8002838 <_GameEngineDrawObject32x64>

				else
					_GameEngineDrawObject32x64(objBoss, GUI_DRAW_BOSS_10LVL, GUI_DRAW_BOSS_10LVL);
				break;
 8002082:	e004      	b.n	800208e <_GameEngineBossDraw+0x166>
					_GameEngineDrawObject32x64(objBoss, GUI_DRAW_BOSS_10LVL, GUI_DRAW_BOSS_10LVL);
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <_GameEngineBossDraw+0x1a4>)
 8002086:	4911      	ldr	r1, [pc, #68]	; (80020cc <_GameEngineBossDraw+0x1a4>)
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fbd5 	bl	8002838 <_GameEngineDrawObject32x64>
				break;
 800208e:	bf00      	nop
			}
		}
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	080062a4 	.word	0x080062a4
 800209c:	080062c4 	.word	0x080062c4
 80020a0:	080062e4 	.word	0x080062e4
 80020a4:	08006304 	.word	0x08006304
 80020a8:	08006324 	.word	0x08006324
 80020ac:	08006384 	.word	0x08006384
 80020b0:	080063e4 	.word	0x080063e4
 80020b4:	08006444 	.word	0x08006444
 80020b8:	080064a4 	.word	0x080064a4
 80020bc:	08006524 	.word	0x08006524
 80020c0:	080065a4 	.word	0x080065a4
 80020c4:	08006214 	.word	0x08006214
 80020c8:	0800621c 	.word	0x0800621c
 80020cc:	08006624 	.word	0x08006624

080020d0 <_GameEngineBossBulletsDraw>:

void _GameEngineBossBulletsDraw (_GameObject* objBossBullet)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	for (u8 i = 0; i < BOSS_BULLET_QUANTITY; i++)
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e0fe      	b.n	80022dc <_GameEngineBossBulletsDraw+0x20c>
	{
		if (objBossBullet[i].app == APPEAR)
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	461a      	mov	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	7c5b      	ldrb	r3, [r3, #17]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 80f0 	bne.w	80022d6 <_GameEngineBossBulletsDraw+0x206>
		{
			ssd1306_DrawPixel(objBossBullet[i].x_cor, objBossBullet[i].y_cor, 1);
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	461a      	mov	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800210a:	b2d8      	uxtb	r0, r3
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	461a      	mov	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	79db      	ldrb	r3, [r3, #7]
 800211e:	2201      	movs	r2, #1
 8002120:	4619      	mov	r1, r3
 8002122:	f001 f811 	bl	8003148 <ssd1306_DrawPixel>
			ssd1306_DrawPixel(objBossBullet[i].x_cor + 1, objBossBullet[i].y_cor, 1);
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	461a      	mov	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	b2d8      	uxtb	r0, r3
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	461a      	mov	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	79db      	ldrb	r3, [r3, #7]
 8002152:	2201      	movs	r2, #1
 8002154:	4619      	mov	r1, r3
 8002156:	f000 fff7 	bl	8003148 <ssd1306_DrawPixel>
			ssd1306_DrawPixel(objBossBullet[i].x_cor, objBossBullet[i].y_cor + 1, 1);
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	461a      	mov	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800216e:	b2d8      	uxtb	r0, r3
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	461a      	mov	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	79db      	ldrb	r3, [r3, #7]
 8002182:	3301      	adds	r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2201      	movs	r2, #1
 8002188:	4619      	mov	r1, r3
 800218a:	f000 ffdd 	bl	8003148 <ssd1306_DrawPixel>
			ssd1306_DrawPixel(objBossBullet[i].x_cor + 1, objBossBullet[i].y_cor + 1, 1);
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	461a      	mov	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	b2d8      	uxtb	r0, r3
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	79db      	ldrb	r3, [r3, #7]
 80021ba:	3301      	adds	r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2201      	movs	r2, #1
 80021c0:	4619      	mov	r1, r3
 80021c2:	f000 ffc1 	bl	8003148 <ssd1306_DrawPixel>
			ssd1306_DrawPixel(objBossBullet[i].x_cor + 2, objBossBullet[i].y_cor, 1);
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	461a      	mov	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3302      	adds	r3, #2
 80021de:	b2d8      	uxtb	r0, r3
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	461a      	mov	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	79db      	ldrb	r3, [r3, #7]
 80021f2:	2201      	movs	r2, #1
 80021f4:	4619      	mov	r1, r3
 80021f6:	f000 ffa7 	bl	8003148 <ssd1306_DrawPixel>
			ssd1306_DrawPixel(objBossBullet[i].x_cor, objBossBullet[i].y_cor + 2, 1);
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	461a      	mov	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800220e:	b2d8      	uxtb	r0, r3
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	461a      	mov	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	79db      	ldrb	r3, [r3, #7]
 8002222:	3302      	adds	r3, #2
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2201      	movs	r2, #1
 8002228:	4619      	mov	r1, r3
 800222a:	f000 ff8d 	bl	8003148 <ssd1306_DrawPixel>
			ssd1306_DrawPixel(objBossBullet[i].x_cor + 1, objBossBullet[i].y_cor + 2, 1);
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	461a      	mov	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3301      	adds	r3, #1
 8002246:	b2d8      	uxtb	r0, r3
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	461a      	mov	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	79db      	ldrb	r3, [r3, #7]
 800225a:	3302      	adds	r3, #2
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2201      	movs	r2, #1
 8002260:	4619      	mov	r1, r3
 8002262:	f000 ff71 	bl	8003148 <ssd1306_DrawPixel>
			ssd1306_DrawPixel(objBossBullet[i].x_cor + 2, objBossBullet[i].y_cor + 1, 1);
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	461a      	mov	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3302      	adds	r3, #2
 800227e:	b2d8      	uxtb	r0, r3
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	461a      	mov	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	79db      	ldrb	r3, [r3, #7]
 8002292:	3301      	adds	r3, #1
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2201      	movs	r2, #1
 8002298:	4619      	mov	r1, r3
 800229a:	f000 ff55 	bl	8003148 <ssd1306_DrawPixel>
			ssd1306_DrawPixel(objBossBullet[i].x_cor + 2, objBossBullet[i].y_cor + 2, 1);
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	461a      	mov	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	3302      	adds	r3, #2
 80022b6:	b2d8      	uxtb	r0, r3
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	461a      	mov	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	79db      	ldrb	r3, [r3, #7]
 80022ca:	3302      	adds	r3, #2
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2201      	movs	r2, #1
 80022d0:	4619      	mov	r1, r3
 80022d2:	f000 ff39 	bl	8003148 <ssd1306_DrawPixel>
	for (u8 i = 0; i < BOSS_BULLET_QUANTITY; i++)
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	3301      	adds	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	2b1d      	cmp	r3, #29
 80022e0:	f67f aefd 	bls.w	80020de <_GameEngineBossBulletsDraw+0xe>
		}
	}
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_GameEngineBossErase>:

void _GameEngineBossErase (_GameObject* objBoss)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	switch (objBoss->lvl)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7adb      	ldrb	r3, [r3, #11]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	d849      	bhi.n	8002392 <_GameEngineBossErase+0xa6>
 80022fe:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <_GameEngineBossErase+0x18>)
 8002300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002304:	0800232d 	.word	0x0800232d
 8002308:	08002337 	.word	0x08002337
 800230c:	08002341 	.word	0x08002341
 8002310:	0800234b 	.word	0x0800234b
 8002314:	08002355 	.word	0x08002355
 8002318:	0800235f 	.word	0x0800235f
 800231c:	08002369 	.word	0x08002369
 8002320:	08002373 	.word	0x08002373
 8002324:	0800237d 	.word	0x0800237d
 8002328:	08002387 	.word	0x08002387
	{
		case 1:
		{
			_GameEngineEraseObject16x16(objBoss, GUI_DRAW_BOSS_1LVL);
 800232c:	491b      	ldr	r1, [pc, #108]	; (800239c <_GameEngineBossErase+0xb0>)
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fa29 	bl	8002786 <_GameEngineEraseObject16x16>
			break;
 8002334:	e02d      	b.n	8002392 <_GameEngineBossErase+0xa6>
		}

		case 2:
		{
			_GameEngineEraseObject16x16(objBoss, GUI_DRAW_BOSS_2LVL);
 8002336:	491a      	ldr	r1, [pc, #104]	; (80023a0 <_GameEngineBossErase+0xb4>)
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 fa24 	bl	8002786 <_GameEngineEraseObject16x16>
			break;
 800233e:	e028      	b.n	8002392 <_GameEngineBossErase+0xa6>
		}

		case 3:
		{
			_GameEngineEraseObject16x16(objBoss, GUI_DRAW_BOSS_3LVL);
 8002340:	4918      	ldr	r1, [pc, #96]	; (80023a4 <_GameEngineBossErase+0xb8>)
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fa1f 	bl	8002786 <_GameEngineEraseObject16x16>
			break;
 8002348:	e023      	b.n	8002392 <_GameEngineBossErase+0xa6>
		}

		case 4:
		{
			_GameEngineEraseObject24x24(objBoss, GUI_DRAW_BOSS_4LVL);
 800234a:	4917      	ldr	r1, [pc, #92]	; (80023a8 <_GameEngineBossErase+0xbc>)
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fa3e 	bl	80027ce <_GameEngineEraseObject24x24>
			break;
 8002352:	e01e      	b.n	8002392 <_GameEngineBossErase+0xa6>
		}

		case 5:
		{
			_GameEngineEraseObject24x24(objBoss, GUI_DRAW_BOSS_5LVL);
 8002354:	4915      	ldr	r1, [pc, #84]	; (80023ac <_GameEngineBossErase+0xc0>)
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa39 	bl	80027ce <_GameEngineEraseObject24x24>
			break;
 800235c:	e019      	b.n	8002392 <_GameEngineBossErase+0xa6>
		}

		case 6:
		{
			_GameEngineEraseObject24x24(objBoss, GUI_DRAW_BOSS_6LVL);
 800235e:	4914      	ldr	r1, [pc, #80]	; (80023b0 <_GameEngineBossErase+0xc4>)
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fa34 	bl	80027ce <_GameEngineEraseObject24x24>
			break;
 8002366:	e014      	b.n	8002392 <_GameEngineBossErase+0xa6>
		}

		case 7:
		{
			_GameEngineEraseObject32x32(objBoss, GUI_DRAW_BOSS_7LVL);
 8002368:	4912      	ldr	r1, [pc, #72]	; (80023b4 <_GameEngineBossErase+0xc8>)
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fa53 	bl	8002816 <_GameEngineEraseObject32x32>
			break;
 8002370:	e00f      	b.n	8002392 <_GameEngineBossErase+0xa6>
		}

		case 8:
		{
			_GameEngineEraseObject32x32(objBoss, GUI_DRAW_BOSS_8LVL);
 8002372:	4911      	ldr	r1, [pc, #68]	; (80023b8 <_GameEngineBossErase+0xcc>)
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fa4e 	bl	8002816 <_GameEngineEraseObject32x32>
			break;
 800237a:	e00a      	b.n	8002392 <_GameEngineBossErase+0xa6>
		}

		case 9:
		{
			_GameEngineEraseObject8x8(objBoss, GUI_DRAW_BOSS_9LVL);
 800237c:	490f      	ldr	r1, [pc, #60]	; (80023bc <_GameEngineBossErase+0xd0>)
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f9dd 	bl	800273e <_GameEngineEraseObject8x8>
			break;
 8002384:	e005      	b.n	8002392 <_GameEngineBossErase+0xa6>
		}

		case 10:
		{
			_GameEngineEraseObject32x64(objBoss, GUI_DRAW_BOSS_10LVL, GUI_DRAW_BOSS_10LVL);
 8002386:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <_GameEngineBossErase+0xd4>)
 8002388:	490d      	ldr	r1, [pc, #52]	; (80023c0 <_GameEngineBossErase+0xd4>)
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fa74 	bl	8002878 <_GameEngineEraseObject32x64>
			break;
 8002390:	bf00      	nop
		}
	}
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	080062c4 	.word	0x080062c4
 80023a0:	080062e4 	.word	0x080062e4
 80023a4:	08006304 	.word	0x08006304
 80023a8:	08006384 	.word	0x08006384
 80023ac:	080063e4 	.word	0x080063e4
 80023b0:	08006444 	.word	0x08006444
 80023b4:	08006524 	.word	0x08006524
 80023b8:	080065a4 	.word	0x080065a4
 80023bc:	0800621c 	.word	0x0800621c
 80023c0:	08006624 	.word	0x08006624

080023c4 <_GameEngineScoreDraw>:
		}
	}
}

void _GameEngineScoreDraw (_GameFeature* game, _GameObject* objStarship)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
	char score [8];
	char lvl [3];

	sprintf (score, "%07d", game->score);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	4932      	ldr	r1, [pc, #200]	; (80024a0 <_GameEngineScoreDraw+0xdc>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 fab3 	bl	8005944 <siprintf>
	sprintf (lvl, "%d", game->gameLVL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7a1b      	ldrb	r3, [r3, #8]
 80023e2:	461a      	mov	r2, r3
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	492e      	ldr	r1, [pc, #184]	; (80024a4 <_GameEngineScoreDraw+0xe0>)
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 faaa 	bl	8005944 <siprintf>

	ssd1306_WriteText(UI_SCORE_X, UI_SCORE_Y, score, Font_6x8, 1);
 80023f0:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <_GameEngineScoreDraw+0xe4>)
 80023f2:	f107 010c 	add.w	r1, r7, #12
 80023f6:	2201      	movs	r2, #1
 80023f8:	9201      	str	r2, [sp, #4]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	9200      	str	r2, [sp, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	460a      	mov	r2, r1
 8002402:	2101      	movs	r1, #1
 8002404:	2001      	movs	r0, #1
 8002406:	f001 f8bf 	bl	8003588 <ssd1306_WriteText>

	if (game->gameLVL < 10)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7a1b      	ldrb	r3, [r3, #8]
 800240e:	2b09      	cmp	r3, #9
 8002410:	d815      	bhi.n	800243e <_GameEngineScoreDraw+0x7a>
	{
		ssd1306_DrawFilledRectangle(UI_LVL_X, UI_LVL_Y - 1, UI_LVL_X + 6, UI_LVL_Y + 8, 0);
 8002412:	2300      	movs	r3, #0
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	233f      	movs	r3, #63	; 0x3f
 8002418:	227f      	movs	r2, #127	; 0x7f
 800241a:	2136      	movs	r1, #54	; 0x36
 800241c:	2079      	movs	r0, #121	; 0x79
 800241e:	f001 f85c 	bl	80034da <ssd1306_DrawFilledRectangle>
		ssd1306_WriteText(UI_LVL_X, UI_LVL_Y, &lvl[0], Font_6x8, 1);
 8002422:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <_GameEngineScoreDraw+0xe4>)
 8002424:	f107 0108 	add.w	r1, r7, #8
 8002428:	2201      	movs	r2, #1
 800242a:	9201      	str	r2, [sp, #4]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	9200      	str	r2, [sp, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	460a      	mov	r2, r1
 8002434:	2137      	movs	r1, #55	; 0x37
 8002436:	2079      	movs	r0, #121	; 0x79
 8002438:	f001 f8a6 	bl	8003588 <ssd1306_WriteText>
 800243c:	e014      	b.n	8002468 <_GameEngineScoreDraw+0xa4>
	}

	else
	{
		ssd1306_DrawFilledRectangle(UI_LVL_X - 6, UI_LVL_Y - 1, UI_LVL_X + 6, UI_LVL_Y + 8, 0);
 800243e:	2300      	movs	r3, #0
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	233f      	movs	r3, #63	; 0x3f
 8002444:	227f      	movs	r2, #127	; 0x7f
 8002446:	2136      	movs	r1, #54	; 0x36
 8002448:	2073      	movs	r0, #115	; 0x73
 800244a:	f001 f846 	bl	80034da <ssd1306_DrawFilledRectangle>
		ssd1306_WriteText(UI_LVL_X - 6, UI_LVL_Y, &lvl[0], Font_6x8, 1);
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <_GameEngineScoreDraw+0xe4>)
 8002450:	f107 0108 	add.w	r1, r7, #8
 8002454:	2201      	movs	r2, #1
 8002456:	9201      	str	r2, [sp, #4]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	9200      	str	r2, [sp, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	460a      	mov	r2, r1
 8002460:	2137      	movs	r1, #55	; 0x37
 8002462:	2073      	movs	r0, #115	; 0x73
 8002464:	f001 f890 	bl	8003588 <ssd1306_WriteText>
	}

	for (u8 i = 0; i < objStarship->hitPoints; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	75fb      	strb	r3, [r7, #23]
 800246c:	e00e      	b.n	800248c <_GameEngineScoreDraw+0xc8>
		ssd1306_DrawSprite8x8 (UI_STARSHIP_HP_X + (i * (SPRITE8 + 1)), UI_STARSHIP_HP_Y, GUI_HEART_DRAW, 1);
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	461a      	mov	r2, r3
 8002472:	00d2      	lsls	r2, r2, #3
 8002474:	4413      	add	r3, r2
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3353      	adds	r3, #83	; 0x53
 800247a:	b2d8      	uxtb	r0, r3
 800247c:	2301      	movs	r3, #1
 800247e:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <_GameEngineScoreDraw+0xe8>)
 8002480:	2101      	movs	r1, #1
 8002482:	f001 f89f 	bl	80035c4 <ssd1306_DrawSprite8x8>
	for (u8 i = 0; i < objStarship->hitPoints; i++)
 8002486:	7dfb      	ldrb	r3, [r7, #23]
 8002488:	3301      	adds	r3, #1
 800248a:	75fb      	strb	r3, [r7, #23]
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002494:	4293      	cmp	r3, r2
 8002496:	dbea      	blt.n	800246e <_GameEngineScoreDraw+0xaa>
}
 8002498:	bf00      	nop
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	08006164 	.word	0x08006164
 80024a4:	0800616c 	.word	0x0800616c
 80024a8:	20000000 	.word	0x20000000
 80024ac:	0800620c 	.word	0x0800620c

080024b0 <_GameEngineBossHPDraw>:

void _GameEngineBossHPDraw (_GameFeature* game, _GameObject* objBoss)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
	u16 maxHP = BOSS_HP * GAME_DIFFICULTY + (objBoss->lvl * BOSS_LVL_HP_ADD);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	7adb      	ldrb	r3, [r3, #11]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	0092      	lsls	r2, r2, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	461a      	mov	r2, r3
 80024c8:	0091      	lsls	r1, r2, #2
 80024ca:	461a      	mov	r2, r3
 80024cc:	460b      	mov	r3, r1
 80024ce:	4413      	add	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3364      	adds	r3, #100	; 0x64
 80024d6:	81bb      	strh	r3, [r7, #12]
	float coeffHP;

	ssd1306_DrawRectangle (UI_BOSS_HP_X, UI_BOSS_HP_Y, UI_BOSS_HP_X + 34, UI_BOSS_HP_Y + 7, 1);
 80024d8:	2301      	movs	r3, #1
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2308      	movs	r3, #8
 80024de:	224f      	movs	r2, #79	; 0x4f
 80024e0:	2101      	movs	r1, #1
 80024e2:	202d      	movs	r0, #45	; 0x2d
 80024e4:	f000 ffc2 	bl	800346c <ssd1306_DrawRectangle>

	for (u16 i = 0; i <= 30; i++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	81fb      	strh	r3, [r7, #14]
 80024ec:	e053      	b.n	8002596 <_GameEngineBossHPDraw+0xe6>
	{
		coeffHP = maxHP / 30;
 80024ee:	89bb      	ldrh	r3, [r7, #12]
 80024f0:	4a2c      	ldr	r2, [pc, #176]	; (80025a4 <_GameEngineBossHPDraw+0xf4>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002502:	edc7 7a02 	vstr	s15, [r7, #8]

		if (objBoss->hitPoints / coeffHP > (maxHP / coeffHP) - i - 1)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002514:	edd7 7a02 	vldr	s15, [r7, #8]
 8002518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800251c:	89bb      	ldrh	r3, [r7, #12]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002526:	edd7 7a02 	vldr	s15, [r7, #8]
 800252a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800252e:	89fb      	ldrh	r3, [r7, #14]
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002538:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800253c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002540:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	dd10      	ble.n	8002570 <_GameEngineBossHPDraw+0xc0>
			ssd1306_Line(UI_BOSS_HP_X + 2 + (30 - i), UI_BOSS_HP_Y + 2, UI_BOSS_HP_X + 2 + (30 - i), UI_BOSS_HP_Y + 5, 1);
 800254e:	89fb      	ldrh	r3, [r7, #14]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f1c3 034d 	rsb	r3, r3, #77	; 0x4d
 8002556:	b2d8      	uxtb	r0, r3
 8002558:	89fb      	ldrh	r3, [r7, #14]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f1c3 034d 	rsb	r3, r3, #77	; 0x4d
 8002560:	b2da      	uxtb	r2, r3
 8002562:	2301      	movs	r3, #1
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2306      	movs	r3, #6
 8002568:	2103      	movs	r1, #3
 800256a:	f000 ff13 	bl	8003394 <ssd1306_Line>
 800256e:	e00f      	b.n	8002590 <_GameEngineBossHPDraw+0xe0>

		else
			ssd1306_Line(UI_BOSS_HP_X + 2 + (30 - i), UI_BOSS_HP_Y + 2, UI_BOSS_HP_X + 2 + (30 - i), UI_BOSS_HP_Y + 5, 0);
 8002570:	89fb      	ldrh	r3, [r7, #14]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f1c3 034d 	rsb	r3, r3, #77	; 0x4d
 8002578:	b2d8      	uxtb	r0, r3
 800257a:	89fb      	ldrh	r3, [r7, #14]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f1c3 034d 	rsb	r3, r3, #77	; 0x4d
 8002582:	b2da      	uxtb	r2, r3
 8002584:	2300      	movs	r3, #0
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2306      	movs	r3, #6
 800258a:	2103      	movs	r1, #3
 800258c:	f000 ff02 	bl	8003394 <ssd1306_Line>
	for (u16 i = 0; i <= 30; i++)
 8002590:	89fb      	ldrh	r3, [r7, #14]
 8002592:	3301      	adds	r3, #1
 8002594:	81fb      	strh	r3, [r7, #14]
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	2b1e      	cmp	r3, #30
 800259a:	d9a8      	bls.n	80024ee <_GameEngineBossHPDraw+0x3e>
	}
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	88888889 	.word	0x88888889

080025a8 <_GameEngineGameOver>:

void _GameEngineGameOver (_GameFeature* game)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(0);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f000 fd81 	bl	80030b8 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80025b6:	f000 fda1 	bl	80030fc <ssd1306_UpdateScreen>

	HAL_Delay (300);
 80025ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025be:	f001 fa0f 	bl	80039e0 <HAL_Delay>

	char score [8];

	sprintf (score, "%d", game->score);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	f107 0308 	add.w	r3, r7, #8
 80025ca:	494c      	ldr	r1, [pc, #304]	; (80026fc <_GameEngineGameOver+0x154>)
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 f9b9 	bl	8005944 <siprintf>

	ssd1306_WriteText (1, 1, "Your score:", Font_7x10, 1);
 80025d2:	4b4b      	ldr	r3, [pc, #300]	; (8002700 <_GameEngineGameOver+0x158>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	9201      	str	r2, [sp, #4]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	9200      	str	r2, [sp, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a49      	ldr	r2, [pc, #292]	; (8002704 <_GameEngineGameOver+0x15c>)
 80025e0:	2101      	movs	r1, #1
 80025e2:	2001      	movs	r0, #1
 80025e4:	f000 ffd0 	bl	8003588 <ssd1306_WriteText>
	ssd1306_WriteText(80, 1, score, Font_7x10, 1);
 80025e8:	4b45      	ldr	r3, [pc, #276]	; (8002700 <_GameEngineGameOver+0x158>)
 80025ea:	f107 0108 	add.w	r1, r7, #8
 80025ee:	2201      	movs	r2, #1
 80025f0:	9201      	str	r2, [sp, #4]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	9200      	str	r2, [sp, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	460a      	mov	r2, r1
 80025fa:	2101      	movs	r1, #1
 80025fc:	2050      	movs	r0, #80	; 0x50
 80025fe:	f000 ffc3 	bl	8003588 <ssd1306_WriteText>

	if (game->gameState == GAME_OVER)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d16e      	bne.n	80026e8 <_GameEngineGameOver+0x140>
	{
		while (!ButtonHandler())
 800260a:	e033      	b.n	8002674 <_GameEngineGameOver+0xcc>
		{
			ssd1306_WriteText(4, 21, "G A M E   O V E R", Font_7x10, 1);
 800260c:	4b3c      	ldr	r3, [pc, #240]	; (8002700 <_GameEngineGameOver+0x158>)
 800260e:	2201      	movs	r2, #1
 8002610:	9201      	str	r2, [sp, #4]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	9200      	str	r2, [sp, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a3b      	ldr	r2, [pc, #236]	; (8002708 <_GameEngineGameOver+0x160>)
 800261a:	2115      	movs	r1, #21
 800261c:	2004      	movs	r0, #4
 800261e:	f000 ffb3 	bl	8003588 <ssd1306_WriteText>
			ssd1306_WriteText(4, 40, "Press   Joy   Key", Font_7x10, 1);
 8002622:	4b37      	ldr	r3, [pc, #220]	; (8002700 <_GameEngineGameOver+0x158>)
 8002624:	2201      	movs	r2, #1
 8002626:	9201      	str	r2, [sp, #4]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	9200      	str	r2, [sp, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a37      	ldr	r2, [pc, #220]	; (800270c <_GameEngineGameOver+0x164>)
 8002630:	2128      	movs	r1, #40	; 0x28
 8002632:	2004      	movs	r0, #4
 8002634:	f000 ffa8 	bl	8003588 <ssd1306_WriteText>
			ssd1306_WriteText(4, 51, "to start New Game", Font_7x10, 1);
 8002638:	4b31      	ldr	r3, [pc, #196]	; (8002700 <_GameEngineGameOver+0x158>)
 800263a:	2201      	movs	r2, #1
 800263c:	9201      	str	r2, [sp, #4]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	9200      	str	r2, [sp, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a32      	ldr	r2, [pc, #200]	; (8002710 <_GameEngineGameOver+0x168>)
 8002646:	2133      	movs	r1, #51	; 0x33
 8002648:	2004      	movs	r0, #4
 800264a:	f000 ff9d 	bl	8003588 <ssd1306_WriteText>

			ssd1306_UpdateScreen();
 800264e:	f000 fd55 	bl	80030fc <ssd1306_UpdateScreen>
			HAL_Delay(200);
 8002652:	20c8      	movs	r0, #200	; 0xc8
 8002654:	f001 f9c4 	bl	80039e0 <HAL_Delay>
			ERASE_BOTTOM;
 8002658:	2300      	movs	r3, #0
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2340      	movs	r3, #64	; 0x40
 800265e:	227f      	movs	r2, #127	; 0x7f
 8002660:	2110      	movs	r1, #16
 8002662:	2000      	movs	r0, #0
 8002664:	f000 ff39 	bl	80034da <ssd1306_DrawFilledRectangle>
			ssd1306_UpdateScreen();
 8002668:	f000 fd48 	bl	80030fc <ssd1306_UpdateScreen>
			HAL_Delay(300);
 800266c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002670:	f001 f9b6 	bl	80039e0 <HAL_Delay>
		while (!ButtonHandler())
 8002674:	f7fe f8fc 	bl	8000870 <ButtonHandler>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0c6      	beq.n	800260c <_GameEngineGameOver+0x64>
			ERASE_BOTTOM;
			ssd1306_UpdateScreen();
			HAL_Delay(300);
		}
	}
}
 800267e:	e038      	b.n	80026f2 <_GameEngineGameOver+0x14a>
			ssd1306_WriteText(4, 21, "V I C T O R Y ! !", Font_7x10, 1);
 8002680:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <_GameEngineGameOver+0x158>)
 8002682:	2201      	movs	r2, #1
 8002684:	9201      	str	r2, [sp, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	9200      	str	r2, [sp, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a21      	ldr	r2, [pc, #132]	; (8002714 <_GameEngineGameOver+0x16c>)
 800268e:	2115      	movs	r1, #21
 8002690:	2004      	movs	r0, #4
 8002692:	f000 ff79 	bl	8003588 <ssd1306_WriteText>
			ssd1306_WriteText(4, 40, "Press   Joy   Key", Font_7x10, 1);
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <_GameEngineGameOver+0x158>)
 8002698:	2201      	movs	r2, #1
 800269a:	9201      	str	r2, [sp, #4]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	9200      	str	r2, [sp, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1a      	ldr	r2, [pc, #104]	; (800270c <_GameEngineGameOver+0x164>)
 80026a4:	2128      	movs	r1, #40	; 0x28
 80026a6:	2004      	movs	r0, #4
 80026a8:	f000 ff6e 	bl	8003588 <ssd1306_WriteText>
			ssd1306_WriteText(4, 51, "to start New Game", Font_7x10, 1);
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <_GameEngineGameOver+0x158>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	9201      	str	r2, [sp, #4]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	9200      	str	r2, [sp, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a15      	ldr	r2, [pc, #84]	; (8002710 <_GameEngineGameOver+0x168>)
 80026ba:	2133      	movs	r1, #51	; 0x33
 80026bc:	2004      	movs	r0, #4
 80026be:	f000 ff63 	bl	8003588 <ssd1306_WriteText>
			ssd1306_UpdateScreen();
 80026c2:	f000 fd1b 	bl	80030fc <ssd1306_UpdateScreen>
			HAL_Delay(200);
 80026c6:	20c8      	movs	r0, #200	; 0xc8
 80026c8:	f001 f98a 	bl	80039e0 <HAL_Delay>
			ERASE_BOTTOM;
 80026cc:	2300      	movs	r3, #0
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2340      	movs	r3, #64	; 0x40
 80026d2:	227f      	movs	r2, #127	; 0x7f
 80026d4:	2110      	movs	r1, #16
 80026d6:	2000      	movs	r0, #0
 80026d8:	f000 feff 	bl	80034da <ssd1306_DrawFilledRectangle>
			ssd1306_UpdateScreen();
 80026dc:	f000 fd0e 	bl	80030fc <ssd1306_UpdateScreen>
			HAL_Delay(300);
 80026e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026e4:	f001 f97c 	bl	80039e0 <HAL_Delay>
		while (!ButtonHandler())
 80026e8:	f7fe f8c2 	bl	8000870 <ButtonHandler>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0c6      	beq.n	8002680 <_GameEngineGameOver+0xd8>
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	0800616c 	.word	0x0800616c
 8002700:	20000008 	.word	0x20000008
 8002704:	08006170 	.word	0x08006170
 8002708:	0800617c 	.word	0x0800617c
 800270c:	08006190 	.word	0x08006190
 8002710:	080061a4 	.word	0x080061a4
 8002714:	080061b8 	.word	0x080061b8

08002718 <_GameEngineDrawObject8x8>:

void _GameEngineDrawObject8x8 (_GameObject* obj, const uint8_t* sprite)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
	ssd1306_DrawSprite8x8(obj->x_cor, obj->y_cor, sprite, 1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002728:	b2d8      	uxtb	r0, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	79d9      	ldrb	r1, [r3, #7]
 800272e:	2301      	movs	r3, #1
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	f000 ff47 	bl	80035c4 <ssd1306_DrawSprite8x8>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <_GameEngineEraseObject8x8>:

void _GameEngineEraseObject8x8 (_GameObject* obj, const uint8_t* sprite)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
	ssd1306_DrawSprite8x8(obj->x_old_cor, obj->y_old_cor, sprite, 0);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7a18      	ldrb	r0, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7a59      	ldrb	r1, [r3, #9]
 8002750:	2300      	movs	r3, #0
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	f000 ff36 	bl	80035c4 <ssd1306_DrawSprite8x8>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <_GameEngineDrawObject16x16>:

void _GameEngineDrawObject16x16 (_GameObject* obj, const uint16_t* sprite)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
	ssd1306_DrawSprite16x16(obj->x_cor, obj->y_cor, sprite, 1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002770:	b2d8      	uxtb	r0, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	79d9      	ldrb	r1, [r3, #7]
 8002776:	2301      	movs	r3, #1
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	f000 ff5e 	bl	800363a <ssd1306_DrawSprite16x16>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <_GameEngineEraseObject16x16>:

void _GameEngineEraseObject16x16 (_GameObject* obj, const uint16_t* sprite)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
	ssd1306_DrawSprite16x16(obj->x_old_cor, obj->y_old_cor, sprite, 0);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7a18      	ldrb	r0, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7a59      	ldrb	r1, [r3, #9]
 8002798:	2300      	movs	r3, #0
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	f000 ff4d 	bl	800363a <ssd1306_DrawSprite16x16>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_GameEngineDrawObject24x24>:

void _GameEngineDrawObject24x24 (_GameObject* obj, const uint32_t* sprite)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
	ssd1306_DrawSprite24x24(obj->x_cor, obj->y_cor, sprite, 1);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80027b8:	b2d8      	uxtb	r0, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	79d9      	ldrb	r1, [r3, #7]
 80027be:	2301      	movs	r3, #1
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	f000 ff76 	bl	80036b2 <ssd1306_DrawSprite24x24>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_GameEngineEraseObject24x24>:

void _GameEngineEraseObject24x24 (_GameObject* obj, const uint32_t* sprite)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
	ssd1306_DrawSprite24x24(obj->x_old_cor, obj->y_old_cor, sprite, 0);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7a18      	ldrb	r0, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7a59      	ldrb	r1, [r3, #9]
 80027e0:	2300      	movs	r3, #0
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	f000 ff65 	bl	80036b2 <ssd1306_DrawSprite24x24>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_GameEngineDrawObject32x32>:

void _GameEngineDrawObject32x32 (_GameObject* obj, const uint32_t* sprite)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
	ssd1306_DrawSprite32x32(obj->x_cor, obj->y_cor, sprite, 1);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002800:	b2d8      	uxtb	r0, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	79d9      	ldrb	r1, [r3, #7]
 8002806:	2301      	movs	r3, #1
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	f000 ff8d 	bl	8003728 <ssd1306_DrawSprite32x32>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <_GameEngineEraseObject32x32>:

void _GameEngineEraseObject32x32 (_GameObject* obj, const uint32_t* sprite)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
	ssd1306_DrawSprite32x32(obj->x_old_cor, obj->y_old_cor, sprite, 0);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7a18      	ldrb	r0, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7a59      	ldrb	r1, [r3, #9]
 8002828:	2300      	movs	r3, #0
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	f000 ff7c 	bl	8003728 <ssd1306_DrawSprite32x32>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_GameEngineDrawObject32x64>:

void _GameEngineDrawObject32x64 (_GameObject* obj, const uint32_t* sprite_1, const uint32_t* sprite_2)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
	ssd1306_DrawSprite32x32(obj->x_cor, obj->y_cor, sprite_1, 1);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800284a:	b2d8      	uxtb	r0, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	79d9      	ldrb	r1, [r3, #7]
 8002850:	2301      	movs	r3, #1
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	f000 ff68 	bl	8003728 <ssd1306_DrawSprite32x32>
	ssd1306_DrawSprite32x32(obj->x_cor, obj->y_cor + SPRITE32, sprite_2, 1);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800285e:	b2d8      	uxtb	r0, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	79db      	ldrb	r3, [r3, #7]
 8002864:	3320      	adds	r3, #32
 8002866:	b2d9      	uxtb	r1, r3
 8002868:	2301      	movs	r3, #1
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	f000 ff5c 	bl	8003728 <ssd1306_DrawSprite32x32>
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_GameEngineEraseObject32x64>:

void _GameEngineEraseObject32x64 (_GameObject* obj, const uint32_t* sprite_1, const uint32_t* sprite_2)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
	ssd1306_DrawSprite32x32(obj->x_old_cor, obj->y_old_cor, sprite_1, 0);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	7a18      	ldrb	r0, [r3, #8]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	7a59      	ldrb	r1, [r3, #9]
 800288c:	2300      	movs	r3, #0
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f000 ff4a 	bl	8003728 <ssd1306_DrawSprite32x32>
	ssd1306_DrawSprite32x32(obj->x_old_cor, obj->y_old_cor + SPRITE32, sprite_2, 0);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	7a18      	ldrb	r0, [r3, #8]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	7a5b      	ldrb	r3, [r3, #9]
 800289c:	3320      	adds	r3, #32
 800289e:	b2d9      	uxtb	r1, r3
 80028a0:	2300      	movs	r3, #0
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	f000 ff40 	bl	8003728 <ssd1306_DrawSprite32x32>
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c6:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <MX_GPIO_Init+0x104>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a3a      	ldr	r2, [pc, #232]	; (80029b4 <MX_GPIO_Init+0x104>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <MX_GPIO_Init+0x104>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028de:	4b35      	ldr	r3, [pc, #212]	; (80029b4 <MX_GPIO_Init+0x104>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a34      	ldr	r2, [pc, #208]	; (80029b4 <MX_GPIO_Init+0x104>)
 80028e4:	f043 0320 	orr.w	r3, r3, #32
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <MX_GPIO_Init+0x104>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <MX_GPIO_Init+0x104>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a2e      	ldr	r2, [pc, #184]	; (80029b4 <MX_GPIO_Init+0x104>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <MX_GPIO_Init+0x104>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <MX_GPIO_Init+0x104>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a28      	ldr	r2, [pc, #160]	; (80029b4 <MX_GPIO_Init+0x104>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <MX_GPIO_Init+0x104>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_Pin|RED_Pin|LED_CS_Pin|BLUE_Pin, GPIO_PIN_RESET);
 8002926:	2200      	movs	r2, #0
 8002928:	f244 01c1 	movw	r1, #16577	; 0x40c1
 800292c:	4822      	ldr	r0, [pc, #136]	; (80029b8 <MX_GPIO_Init+0x108>)
 800292e:	f001 ff43 	bl	80047b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D_C_Pin|LED_RES_Pin, GPIO_PIN_RESET);
 8002932:	2200      	movs	r2, #0
 8002934:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002938:	4820      	ldr	r0, [pc, #128]	; (80029bc <MX_GPIO_Init+0x10c>)
 800293a:	f001 ff3d 	bl	80047b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT_IN_Pin;
 800293e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002948:	2302      	movs	r3, #2
 800294a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_IN_GPIO_Port, &GPIO_InitStruct);
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	4619      	mov	r1, r3
 8002952:	481b      	ldr	r0, [pc, #108]	; (80029c0 <MX_GPIO_Init+0x110>)
 8002954:	f001 fd6e 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_Pin|RED_Pin|LED_CS_Pin|BLUE_Pin;
 8002958:	f244 03c1 	movw	r3, #16577	; 0x40c1
 800295c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295e:	2301      	movs	r3, #1
 8002960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4619      	mov	r1, r3
 8002970:	4811      	ldr	r0, [pc, #68]	; (80029b8 <MX_GPIO_Init+0x108>)
 8002972:	f001 fd5f 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_D_C_Pin|LED_RES_Pin;
 8002976:	f44f 7340 	mov.w	r3, #768	; 0x300
 800297a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297c:	2301      	movs	r3, #1
 800297e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4619      	mov	r1, r3
 800298e:	480b      	ldr	r0, [pc, #44]	; (80029bc <MX_GPIO_Init+0x10c>)
 8002990:	f001 fd50 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_BUT_Pin;
 8002994:	2320      	movs	r3, #32
 8002996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002998:	2300      	movs	r3, #0
 800299a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800299c:	2302      	movs	r3, #2
 800299e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JOY_BUT_GPIO_Port, &GPIO_InitStruct);
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4619      	mov	r1, r3
 80029a6:	4804      	ldr	r0, [pc, #16]	; (80029b8 <MX_GPIO_Init+0x108>)
 80029a8:	f001 fd44 	bl	8004434 <HAL_GPIO_Init>

}
 80029ac:	bf00      	nop
 80029ae:	3728      	adds	r7, #40	; 0x28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020400 	.word	0x40020400
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020800 	.word	0x40020800

080029c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	f2ad 5ddc 	subw	sp, sp, #1500	; 0x5dc
 80029ca:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029cc:	f000 ffab 	bl	8003926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029d0:	f000 f9ac 	bl	8002d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029d4:	f7ff ff6c 	bl	80028b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80029d8:	f7fd fe02 	bl	80005e0 <MX_ADC1_Init>
  MX_SPI1_Init();
 80029dc:	f000 fa1a 	bl	8002e14 <MX_SPI1_Init>
  MX_ADC3_Init();
 80029e0:	f7fd fe50 	bl	8000684 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 80029e4:	f000 fb06 	bl	8002ff4 <ssd1306_Init>

  ssd1306_DrawFilledRectangle(0, 0, DISPLAY_WIDTH - 1, 15, 1);
 80029e8:	2301      	movs	r3, #1
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	230f      	movs	r3, #15
 80029ee:	227f      	movs	r2, #127	; 0x7f
 80029f0:	2100      	movs	r1, #0
 80029f2:	2000      	movs	r0, #0
 80029f4:	f000 fd71 	bl	80034da <ssd1306_DrawFilledRectangle>
  ssd1306_WriteText(4, 3, "SPACE SHOOTING v1", Font_7x10, 0);
 80029f8:	4bc9      	ldr	r3, [pc, #804]	; (8002d20 <main+0x35c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	9201      	str	r2, [sp, #4]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	9200      	str	r2, [sp, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4ac7      	ldr	r2, [pc, #796]	; (8002d24 <main+0x360>)
 8002a06:	2103      	movs	r1, #3
 8002a08:	2004      	movs	r0, #4
 8002a0a:	f000 fdbd 	bl	8003588 <ssd1306_WriteText>

  while (!ButtonHandler())
 8002a0e:	e01d      	b.n	8002a4c <main+0x88>
  {
	  ssd1306_WriteText(4, 27, "Press   Joy   Key", Font_7x10, 1);
 8002a10:	4bc3      	ldr	r3, [pc, #780]	; (8002d20 <main+0x35c>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	9201      	str	r2, [sp, #4]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	9200      	str	r2, [sp, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4ac2      	ldr	r2, [pc, #776]	; (8002d28 <main+0x364>)
 8002a1e:	211b      	movs	r1, #27
 8002a20:	2004      	movs	r0, #4
 8002a22:	f000 fdb1 	bl	8003588 <ssd1306_WriteText>
	  ssd1306_UpdateScreen();
 8002a26:	f000 fb69 	bl	80030fc <ssd1306_UpdateScreen>
	  delay(200);
 8002a2a:	20c8      	movs	r0, #200	; 0xc8
 8002a2c:	f000 ffd8 	bl	80039e0 <HAL_Delay>
	  ERASE_BOTTOM;
 8002a30:	2300      	movs	r3, #0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2340      	movs	r3, #64	; 0x40
 8002a36:	227f      	movs	r2, #127	; 0x7f
 8002a38:	2110      	movs	r1, #16
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f000 fd4d 	bl	80034da <ssd1306_DrawFilledRectangle>
	  ssd1306_UpdateScreen();
 8002a40:	f000 fb5c 	bl	80030fc <ssd1306_UpdateScreen>
	  delay(300);
 8002a44:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002a48:	f000 ffca 	bl	80039e0 <HAL_Delay>
  while (!ButtonHandler())
 8002a4c:	f7fd ff10 	bl	8000870 <ButtonHandler>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0dc      	beq.n	8002a10 <main+0x4c>

	  // =====================================================================
	  // ================ GAME INIT (or after GAME_OVER) =====================
	  // =====================================================================

	  tryAgain:
 8002a56:	bf00      	nop

	  MainGameStates.score = 0 + ((LVL_TEST_MP - 1) * GAME_LVL_PASS_SCORE); 	// LVL Multiply
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc

	  MainGameStates.gameState = (_GAMESTATE)LVL_TEST_PASS;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 35b8 	strb.w	r3, [r7, #1464]	; 0x5b8
	  MainGameStates.gameLVL = 1 + (LVL_TEST_MP - 1);
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 35c0 	strb.w	r3, [r7, #1472]	; 0x5c0

	  starship.x_cor = 5;
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	f887 35aa 	strb.w	r3, [r7, #1450]	; 0x5aa
	  starship.y_cor = 24;
 8002a70:	2318      	movs	r3, #24
 8002a72:	f887 35ab 	strb.w	r3, [r7, #1451]	; 0x5ab
	  starship.shotApply = ON;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 35b6 	strb.w	r3, [r7, #1462]	; 0x5b6

	  starship.hitPoints = 3;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	f8a7 35a8 	strh.w	r3, [r7, #1448]	; 0x5a8
	  starship.bulletCount = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f887 35b1 	strb.w	r3, [r7, #1457]	; 0x5b1
	  starship.shield = STARSHIP_SHIELD;
 8002a88:	2364      	movs	r3, #100	; 0x64
 8002a8a:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4

	  for (u8 i = 0; i < BULLET_QUANTITY; i++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 35c7 	strb.w	r3, [r7, #1479]	; 0x5c7
 8002a94:	e010      	b.n	8002ab8 <main+0xf4>
		  bullet[i].app = DISAPPEAR;
 8002a96:	f897 25c7 	ldrb.w	r2, [r7, #1479]	; 0x5c7
 8002a9a:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3311      	adds	r3, #17
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
	  for (u8 i = 0; i < BULLET_QUANTITY; i++)
 8002aae:	f897 35c7 	ldrb.w	r3, [r7, #1479]	; 0x5c7
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f887 35c7 	strb.w	r3, [r7, #1479]	; 0x5c7
 8002ab8:	f897 35c7 	ldrb.w	r3, [r7, #1479]	; 0x5c7
 8002abc:	2b13      	cmp	r3, #19
 8002abe:	d9ea      	bls.n	8002a96 <main+0xd2>

	  for (u8 i = 0; i < ENEMY_MAX_QANT; i++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f887 35c6 	strb.w	r3, [r7, #1478]	; 0x5c6
 8002ac6:	e010      	b.n	8002aea <main+0x126>
		  enemy[i].app = DISAPPEAR;
 8002ac8:	f897 25c6 	ldrb.w	r2, [r7, #1478]	; 0x5c6
 8002acc:	f107 0118 	add.w	r1, r7, #24
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3311      	adds	r3, #17
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
	  for (u8 i = 0; i < ENEMY_MAX_QANT; i++)
 8002ae0:	f897 35c6 	ldrb.w	r3, [r7, #1478]	; 0x5c6
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f887 35c6 	strb.w	r3, [r7, #1478]	; 0x5c6
 8002aea:	f897 35c6 	ldrb.w	r3, [r7, #1478]	; 0x5c6
 8002aee:	2b09      	cmp	r3, #9
 8002af0:	d9ea      	bls.n	8002ac8 <main+0x104>

	  for (u8 i = 0; i < BOSS_BULLET_QUANTITY; i++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 35c5 	strb.w	r3, [r7, #1477]	; 0x5c5
 8002af8:	e010      	b.n	8002b1c <main+0x158>
		  bossBullet[i].app = DISAPPEAR;
 8002afa:	f897 25c5 	ldrb.w	r2, [r7, #1477]	; 0x5c5
 8002afe:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3311      	adds	r3, #17
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
	  for (u8 i = 0; i < BOSS_BULLET_QUANTITY; i++)
 8002b12:	f897 35c5 	ldrb.w	r3, [r7, #1477]	; 0x5c5
 8002b16:	3301      	adds	r3, #1
 8002b18:	f887 35c5 	strb.w	r3, [r7, #1477]	; 0x5c5
 8002b1c:	f897 35c5 	ldrb.w	r3, [r7, #1477]	; 0x5c5
 8002b20:	2b1d      	cmp	r3, #29
 8002b22:	d9ea      	bls.n	8002afa <main+0x136>

	  care.app = DISAPPEAR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 35a1 	strb.w	r3, [r7, #1441]	; 0x5a1

	  boss.app = DISAPPEAR;
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	745a      	strb	r2, [r3, #17]
	  boss.lvl = MainGameStates.gameLVL - 1;
 8002b30:	f897 35c0 	ldrb.w	r3, [r7, #1472]	; 0x5c0
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	72da      	strb	r2, [r3, #11]
	  boss.initState = 0;
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	2200      	movs	r2, #0
 8002b40:	731a      	strb	r2, [r3, #12]

	  while (1)
	  {
		  ssd1306_Fill(0);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f000 fab8 	bl	80030b8 <ssd1306_Fill>
		  delay(1);
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f000 ff49 	bl	80039e0 <HAL_Delay>

		  switch(MainGameStates.gameState)
 8002b4e:	f897 35b8 	ldrb.w	r3, [r7, #1464]	; 0x5b8
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	f200 80d0 	bhi.w	8002cf8 <main+0x334>
 8002b58:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <main+0x19c>)
 8002b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5e:	bf00      	nop
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002c1b 	.word	0x08002c1b
 8002b68:	08002ce1 	.word	0x08002ce1
 8002b6c:	08002ced 	.word	0x08002ced
		  {
		  	  case LVL_PASS:
		  	  {
		  		  _GameEngineJoystickHandler(JoystickMoveHandler(),&MainGameStates, &starship, bullet, &boss);
 8002b70:	f7fe f84a 	bl	8000c08 <JoystickMoveHandler>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461c      	mov	r4, r3
 8002b78:	f507 6080 	add.w	r0, r7, #1024	; 0x400
 8002b7c:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8002b80:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f7fe f8fc 	bl	8000d88 <_GameEngineJoystickHandler>
				  _GameEngineBulletsHandler(bullet);
 8002b90:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe fa25 	bl	8000fe4 <_GameEngineBulletsHandler>

				  _GameEngineCareHandler(&care);
 8002b9a:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fb76 	bl	8001290 <_GameEngineCareHandler>
				  _GameEngineEnemyesHandler(&MainGameStates, enemy);
 8002ba4:	f107 0218 	add.w	r2, r7, #24
 8002ba8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fa8c 	bl	80010cc <_GameEngineEnemyesHandler>

				  _GameEngineColissionHandler (&MainGameStates, &starship, bullet, enemy, &care, &boss, bossBullet);
 8002bb4:	f107 0418 	add.w	r4, r7, #24
 8002bb8:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8002bbc:	f207 51a4 	addw	r1, r7, #1444	; 0x5a4
 8002bc0:	f507 60b7 	add.w	r0, r7, #1464	; 0x5b8
 8002bc4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002bc8:	9302      	str	r3, [sp, #8]
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	4623      	mov	r3, r4
 8002bd6:	f7fe fd01 	bl	80015dc <_GameEngineColissionHandler>

				  // ===============================================

				  _GameEngineStarshipDraw(&starship);
 8002bda:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff f89e 	bl	8001d20 <_GameEngineStarshipDraw>
				  _GameEngineBulletsDraw(bullet);
 8002be4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff f8bf 	bl	8001d6c <_GameEngineBulletsDraw>
				  _GameEngineEnemyesDraw(&MainGameStates ,enemy);
 8002bee:	f107 0218 	add.w	r2, r7, #24
 8002bf2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff f93b 	bl	8001e74 <_GameEngineEnemyesDraw>
				  _GameEngineCareDraw(&care);
 8002bfe:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff f97e 	bl	8001f04 <_GameEngineCareDraw>

				  _GameEngineScoreDraw(&MainGameStates, &starship);
 8002c08:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8002c0c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fbd6 	bl	80023c4 <_GameEngineScoreDraw>

				  break;
 8002c18:	e06e      	b.n	8002cf8 <main+0x334>
		  	  }

		  	  case BOSS_PASS:
			  {
				  _GameEngineJoystickHandler(JoystickMoveHandler(),&MainGameStates, &starship, bullet, &boss);
 8002c1a:	f7fd fff5 	bl	8000c08 <JoystickMoveHandler>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461c      	mov	r4, r3
 8002c22:	f507 6080 	add.w	r0, r7, #1024	; 0x400
 8002c26:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8002c2a:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	4603      	mov	r3, r0
 8002c34:	4620      	mov	r0, r4
 8002c36:	f7fe f8a7 	bl	8000d88 <_GameEngineJoystickHandler>
				  _GameEngineBulletsHandler(bullet);
 8002c3a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe f9d0 	bl	8000fe4 <_GameEngineBulletsHandler>
				  _GameEngineBossHandler(&MainGameStates, &starship, bullet, enemy, &care, &boss, bossBullet);
 8002c44:	f107 0418 	add.w	r4, r7, #24
 8002c48:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8002c4c:	f207 51a4 	addw	r1, r7, #1444	; 0x5a4
 8002c50:	f507 60b7 	add.w	r0, r7, #1464	; 0x5b8
 8002c54:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002c58:	9302      	str	r3, [sp, #8]
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	4623      	mov	r3, r4
 8002c66:	f7fe fb63 	bl	8001330 <_GameEngineBossHandler>
				  _GameEngineBossBulletsHandler(bossBullet);
 8002c6a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe fc41 	bl	80014f6 <_GameEngineBossBulletsHandler>

				  _GameEngineColissionHandler (&MainGameStates, &starship, bullet, enemy, &care, &boss, bossBullet);
 8002c74:	f107 0418 	add.w	r4, r7, #24
 8002c78:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8002c7c:	f207 51a4 	addw	r1, r7, #1444	; 0x5a4
 8002c80:	f507 60b7 	add.w	r0, r7, #1464	; 0x5b8
 8002c84:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002c88:	9302      	str	r3, [sp, #8]
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4623      	mov	r3, r4
 8002c96:	f7fe fca1 	bl	80015dc <_GameEngineColissionHandler>

				  // ===============================================

				  _GameEngineStarshipDraw(&starship);
 8002c9a:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff f83e 	bl	8001d20 <_GameEngineStarshipDraw>
				  _GameEngineBulletsDraw(bullet);
 8002ca4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff f85f 	bl	8001d6c <_GameEngineBulletsDraw>
				  _GameEngineBossDraw(&boss);
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f939 	bl	8001f28 <_GameEngineBossDraw>
				  _GameEngineBossBulletsDraw(bossBullet);
 8002cb6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fa08 	bl	80020d0 <_GameEngineBossBulletsDraw>

				  _GameEngineScoreDraw(&MainGameStates, &starship);
 8002cc0:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8002cc4:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fb7a 	bl	80023c4 <_GameEngineScoreDraw>
				  _GameEngineBossHPDraw (&MainGameStates, &boss);
 8002cd0:	1d3a      	adds	r2, r7, #4
 8002cd2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fbe9 	bl	80024b0 <_GameEngineBossHPDraw>

				  break;
 8002cde:	e00b      	b.n	8002cf8 <main+0x334>
			  }

		  	  case GAME_OVER:
		  	  {
		  		_GameEngineGameOver(&MainGameStates);
 8002ce0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fc5f 	bl	80025a8 <_GameEngineGameOver>
		  		goto tryAgain;
 8002cea:	e6b5      	b.n	8002a58 <main+0x94>
		  		break;
		  	  }

		  	  case VICTORY:
		  	  {
		  		_GameEngineGameOver(&MainGameStates);
 8002cec:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fc59 	bl	80025a8 <_GameEngineGameOver>
				goto tryAgain;
 8002cf6:	e6af      	b.n	8002a58 <main+0x94>
				break;
		  	  }
		  }

		  _GameEngineScoreHandler(&MainGameStates);
 8002cf8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe ffd5 	bl	8001cac <_GameEngineScoreHandler>
		  _GameEngineLifeHandler(&MainGameStates, &starship);
 8002d02:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8002d06:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe fff3 	bl	8001cf8 <_GameEngineLifeHandler>

		  ssd1306_UpdateScreen();
 8002d12:	f000 f9f3 	bl	80030fc <ssd1306_UpdateScreen>
		  delay(25);
 8002d16:	2019      	movs	r0, #25
 8002d18:	f000 fe62 	bl	80039e0 <HAL_Delay>
		  ssd1306_Fill(0);
 8002d1c:	e711      	b.n	8002b42 <main+0x17e>
 8002d1e:	bf00      	nop
 8002d20:	20000008 	.word	0x20000008
 8002d24:	080061cc 	.word	0x080061cc
 8002d28:	080061e0 	.word	0x080061e0

08002d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b094      	sub	sp, #80	; 0x50
 8002d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d32:	f107 031c 	add.w	r3, r7, #28
 8002d36:	2234      	movs	r2, #52	; 0x34
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 fdc5 	bl	80058ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d40:	f107 0308 	add.w	r3, r7, #8
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <SystemClock_Config+0xd0>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	4a29      	ldr	r2, [pc, #164]	; (8002dfc <SystemClock_Config+0xd0>)
 8002d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <SystemClock_Config+0xd0>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d68:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <SystemClock_Config+0xd4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a24      	ldr	r2, [pc, #144]	; (8002e00 <SystemClock_Config+0xd4>)
 8002d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <SystemClock_Config+0xd4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d80:	2302      	movs	r3, #2
 8002d82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d84:	2301      	movs	r3, #1
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d88:	2310      	movs	r3, #16
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d90:	2300      	movs	r3, #0
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d94:	2308      	movs	r3, #8
 8002d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002d98:	23d8      	movs	r3, #216	; 0xd8
 8002d9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002da0:	2302      	movs	r3, #2
 8002da2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da4:	f107 031c 	add.w	r3, r7, #28
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 fd6f 	bl	800488c <HAL_RCC_OscConfig>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002db4:	f000 f826 	bl	8002e04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002db8:	f001 fd18 	bl	80047ec <HAL_PWREx_EnableOverDrive>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002dc2:	f000 f81f 	bl	8002e04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dc6:	230f      	movs	r3, #15
 8002dc8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dd2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ddc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	2107      	movs	r1, #7
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 ffff 	bl	8004de8 <HAL_RCC_ClockConfig>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002df0:	f000 f808 	bl	8002e04 <Error_Handler>
  }
}
 8002df4:	bf00      	nop
 8002df6:	3750      	adds	r7, #80	; 0x50
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40007000 	.word	0x40007000

08002e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002e18:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <MX_SPI1_Init+0x78>)
 8002e1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002e26:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e2c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e36:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e3c:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e42:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e50:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e56:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e64:	2207      	movs	r2, #7
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e68:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e70:	2208      	movs	r2, #8
 8002e72:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e74:	4804      	ldr	r0, [pc, #16]	; (8002e88 <MX_SPI1_Init+0x74>)
 8002e76:	f002 f979 	bl	800516c <HAL_SPI_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8002e80:	f7ff ffc0 	bl	8002e04 <Error_Handler>
  }

}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000540 	.word	0x20000540
 8002e8c:	40013000 	.word	0x40013000

08002e90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	; 0x28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <HAL_SPI_MspInit+0x7c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d127      	bne.n	8002f02 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eb2:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <HAL_SPI_MspInit+0x80>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	4a16      	ldr	r2, [pc, #88]	; (8002f10 <HAL_SPI_MspInit+0x80>)
 8002eb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <HAL_SPI_MspInit+0x80>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eca:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <HAL_SPI_MspInit+0x80>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <HAL_SPI_MspInit+0x80>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <HAL_SPI_MspInit+0x80>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ee2:	23a0      	movs	r3, #160	; 0xa0
 8002ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ef2:	2305      	movs	r3, #5
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef6:	f107 0314 	add.w	r3, r7, #20
 8002efa:	4619      	mov	r1, r3
 8002efc:	4805      	ldr	r0, [pc, #20]	; (8002f14 <HAL_SPI_MspInit+0x84>)
 8002efe:	f001 fa99 	bl	8004434 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	; 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40013000 	.word	0x40013000
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020000 	.word	0x40020000

08002f18 <ssd1306_Reset>:
// Send data
/*void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}*/

void ssd1306_Reset(void) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(LED_CS_GPIO_Port, LED_CS_Pin, GPIO_PIN_SET);
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	2140      	movs	r1, #64	; 0x40
 8002f20:	480b      	ldr	r0, [pc, #44]	; (8002f50 <ssd1306_Reset+0x38>)
 8002f22:	f001 fc49 	bl	80047b8 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(LED_RES_GPIO_Port, LED_RES_Pin, GPIO_PIN_RESET);
 8002f26:	2200      	movs	r2, #0
 8002f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f2c:	4809      	ldr	r0, [pc, #36]	; (8002f54 <ssd1306_Reset+0x3c>)
 8002f2e:	f001 fc43 	bl	80047b8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002f32:	200a      	movs	r0, #10
 8002f34:	f000 fd54 	bl	80039e0 <HAL_Delay>
    HAL_GPIO_WritePin(LED_RES_GPIO_Port, LED_RES_Pin, GPIO_PIN_SET);
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f3e:	4805      	ldr	r0, [pc, #20]	; (8002f54 <ssd1306_Reset+0x3c>)
 8002f40:	f001 fc3a 	bl	80047b8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002f44:	200a      	movs	r0, #10
 8002f46:	f000 fd4b 	bl	80039e0 <HAL_Delay>
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40020400 	.word	0x40020400
 8002f54:	40020000 	.word	0x40020000

08002f58 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_CS_GPIO_Port, LED_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002f62:	2200      	movs	r2, #0
 8002f64:	2140      	movs	r1, #64	; 0x40
 8002f66:	480c      	ldr	r0, [pc, #48]	; (8002f98 <ssd1306_WriteCommand+0x40>)
 8002f68:	f001 fc26 	bl	80047b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D_C_GPIO_Port, LED_D_C_Pin, GPIO_PIN_RESET); // command
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f72:	480a      	ldr	r0, [pc, #40]	; (8002f9c <ssd1306_WriteCommand+0x44>)
 8002f74:	f001 fc20 	bl	80047b8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8002f78:	1df9      	adds	r1, r7, #7
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4807      	ldr	r0, [pc, #28]	; (8002fa0 <ssd1306_WriteCommand+0x48>)
 8002f82:	f002 f99e 	bl	80052c2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LED_CS_GPIO_Port, LED_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002f86:	2201      	movs	r2, #1
 8002f88:	2140      	movs	r1, #64	; 0x40
 8002f8a:	4803      	ldr	r0, [pc, #12]	; (8002f98 <ssd1306_WriteCommand+0x40>)
 8002f8c:	f001 fc14 	bl	80047b8 <HAL_GPIO_WritePin>
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40020400 	.word	0x40020400
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	20000540 	.word	0x20000540

08002fa4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(LED_CS_GPIO_Port, LED_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2140      	movs	r1, #64	; 0x40
 8002fb2:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <ssd1306_WriteData+0x44>)
 8002fb4:	f001 fc00 	bl	80047b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D_C_GPIO_Port, LED_D_C_Pin, GPIO_PIN_SET); // data
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fbe:	480b      	ldr	r0, [pc, #44]	; (8002fec <ssd1306_WriteData+0x48>)
 8002fc0:	f001 fbfa 	bl	80047b8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buffer, buff_size, HAL_MAX_DELAY);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4808      	ldr	r0, [pc, #32]	; (8002ff0 <ssd1306_WriteData+0x4c>)
 8002fd0:	f002 f977 	bl	80052c2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LED_CS_GPIO_Port, LED_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	2140      	movs	r1, #64	; 0x40
 8002fd8:	4803      	ldr	r0, [pc, #12]	; (8002fe8 <ssd1306_WriteData+0x44>)
 8002fda:	f001 fbed 	bl	80047b8 <HAL_GPIO_WritePin>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40020400 	.word	0x40020400
 8002fec:	40020000 	.word	0x40020000
 8002ff0:	20000540 	.word	0x20000540

08002ff4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002ff8:	f7ff ff8e 	bl	8002f18 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(200);
 8002ffc:	20c8      	movs	r0, #200	; 0xc8
 8002ffe:	f000 fcef 	bl	80039e0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003002:	2000      	movs	r0, #0
 8003004:	f000 faa2 	bl	800354c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0xD4); // Set Display Clock Divide Ratio / OSC Frequency
 8003008:	20d4      	movs	r0, #212	; 0xd4
 800300a:	f7ff ffa5 	bl	8002f58 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x80); // Display Clock Divide Ratio / OSC Frequency
 800300e:	2080      	movs	r0, #128	; 0x80
 8003010:	f7ff ffa2 	bl	8002f58 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xA8); // Set Multiplex Ratio
 8003014:	20a8      	movs	r0, #168	; 0xa8
 8003016:	f7ff ff9f 	bl	8002f58 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); // Multiplex Ratio for 128x64 (64-1)
 800301a:	203f      	movs	r0, #63	; 0x3f
 800301c:	f7ff ff9c 	bl	8002f58 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); // Set Display Offset
 8003020:	20d3      	movs	r0, #211	; 0xd3
 8003022:	f7ff ff99 	bl	8002f58 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // Display Offset
 8003026:	2000      	movs	r0, #0
 8003028:	f7ff ff96 	bl	8002f58 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); // Set Display Start Line
 800302c:	2040      	movs	r0, #64	; 0x40
 800302e:	f7ff ff93 	bl	8002f58 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); // Set Charge Pump
 8003032:	208d      	movs	r0, #141	; 0x8d
 8003034:	f7ff ff90 	bl	8002f58 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); // Charge Pump (0x10 External, 0x14 Internal DC/DC)
 8003038:	2014      	movs	r0, #20
 800303a:	f7ff ff8d 	bl	8002f58 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xA1); // Set Segment Re-Map
 800303e:	20a1      	movs	r0, #161	; 0xa1
 8003040:	f7ff ff8a 	bl	8002f58 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); // Set Com Output Scan Direction
 8003044:	20c8      	movs	r0, #200	; 0xc8
 8003046:	f7ff ff87 	bl	8002f58 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); // Set COM Hardware Configuration
 800304a:	20da      	movs	r0, #218	; 0xda
 800304c:	f7ff ff84 	bl	8002f58 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12); // COM Hardware Configuration
 8003050:	2012      	movs	r0, #18
 8003052:	f7ff ff81 	bl	8002f58 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x81); // Set Contrast
 8003056:	2081      	movs	r0, #129	; 0x81
 8003058:	f7ff ff7e 	bl	8002f58 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xCF); // Contrast
 800305c:	20cf      	movs	r0, #207	; 0xcf
 800305e:	f7ff ff7b 	bl	8002f58 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); // Set Pre-Charge Period
 8003062:	20d9      	movs	r0, #217	; 0xd9
 8003064:	f7ff ff78 	bl	8002f58 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1); // Set Pre-Charge Period (0x22 External, 0xF1 Internal)
 8003068:	20f1      	movs	r0, #241	; 0xf1
 800306a:	f7ff ff75 	bl	8002f58 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDB); // Set VCOMH Deselect Level
 800306e:	20db      	movs	r0, #219	; 0xdb
 8003070:	f7ff ff72 	bl	8002f58 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); // VCOMH Deselect Level
 8003074:	2040      	movs	r0, #64	; 0x40
 8003076:	f7ff ff6f 	bl	8002f58 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xA4); // Set all pixels OFF
 800307a:	20a4      	movs	r0, #164	; 0xa4
 800307c:	f7ff ff6c 	bl	8002f58 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); // Set display not inverted
 8003080:	20a6      	movs	r0, #166	; 0xa6
 8003082:	f7ff ff69 	bl	8002f58 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); // Set display On
 8003086:	20af      	movs	r0, #175	; 0xaf
 8003088:	f7ff ff66 	bl	8002f58 <ssd1306_WriteCommand>

	ssd1306_Fill(Black);
 800308c:	2000      	movs	r0, #0
 800308e:	f000 f813 	bl	80030b8 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8003092:	f000 f833 	bl	80030fc <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <ssd1306_Init+0xc0>)
 8003098:	2200      	movs	r2, #0
 800309a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <ssd1306_Init+0xc0>)
 800309e:	2200      	movs	r2, #0
 80030a0:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80030a2:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <ssd1306_Init+0xc0>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	715a      	strb	r2, [r3, #5]
	HAL_Delay(100);
 80030a8:	2064      	movs	r0, #100	; 0x64
 80030aa:	f000 fc99 	bl	80039e0 <HAL_Delay>
    // Set default values for screen object
    SSD1306.CurrentX = 0;
    SSD1306.CurrentY = 0;

    SSD1306.Initialized = 1;*/
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	2000049c 	.word	0x2000049c

080030b8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e00d      	b.n	80030e4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <ssd1306_Fill+0x1a>
 80030ce:	2100      	movs	r1, #0
 80030d0:	e000      	b.n	80030d4 <ssd1306_Fill+0x1c>
 80030d2:	21ff      	movs	r1, #255	; 0xff
 80030d4:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <ssd1306_Fill+0x40>)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4413      	add	r3, r2
 80030da:	460a      	mov	r2, r1
 80030dc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3301      	adds	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ea:	d3ed      	bcc.n	80030c8 <ssd1306_Fill+0x10>
    }
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	2000009c 	.word	0x2000009c

080030fc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003102:	2300      	movs	r3, #0
 8003104:	71fb      	strb	r3, [r7, #7]
 8003106:	e016      	b.n	8003136 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	3b50      	subs	r3, #80	; 0x50
 800310c:	b2db      	uxtb	r3, r3
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff22 	bl	8002f58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8003114:	2000      	movs	r0, #0
 8003116:	f7ff ff1f 	bl	8002f58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800311a:	2010      	movs	r0, #16
 800311c:	f7ff ff1c 	bl	8002f58 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	01db      	lsls	r3, r3, #7
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <ssd1306_UpdateScreen+0x48>)
 8003126:	4413      	add	r3, r2
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ff3a 	bl	8002fa4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	3301      	adds	r3, #1
 8003134:	71fb      	strb	r3, [r7, #7]
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	2b07      	cmp	r3, #7
 800313a:	d9e5      	bls.n	8003108 <ssd1306_UpdateScreen+0xc>
    }
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	2000009c 	.word	0x2000009c

08003148 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
 8003152:	460b      	mov	r3, r1
 8003154:	71bb      	strb	r3, [r7, #6]
 8003156:	4613      	mov	r3, r2
 8003158:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	2b00      	cmp	r3, #0
 8003160:	db48      	blt.n	80031f4 <ssd1306_DrawPixel+0xac>
 8003162:	79bb      	ldrb	r3, [r7, #6]
 8003164:	2b3f      	cmp	r3, #63	; 0x3f
 8003166:	d845      	bhi.n	80031f4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <ssd1306_DrawPixel+0xb8>)
 800316a:	791b      	ldrb	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8003170:	797b      	ldrb	r3, [r7, #5]
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 800317e:	797b      	ldrb	r3, [r7, #5]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d11a      	bne.n	80031ba <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003184:	79fa      	ldrb	r2, [r7, #7]
 8003186:	79bb      	ldrb	r3, [r7, #6]
 8003188:	08db      	lsrs	r3, r3, #3
 800318a:	b2d8      	uxtb	r0, r3
 800318c:	4603      	mov	r3, r0
 800318e:	01db      	lsls	r3, r3, #7
 8003190:	4413      	add	r3, r2
 8003192:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <ssd1306_DrawPixel+0xbc>)
 8003194:	5cd3      	ldrb	r3, [r2, r3]
 8003196:	b25a      	sxtb	r2, r3
 8003198:	79bb      	ldrb	r3, [r7, #6]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	2101      	movs	r1, #1
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	b25b      	sxtb	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b259      	sxtb	r1, r3
 80031aa:	79fa      	ldrb	r2, [r7, #7]
 80031ac:	4603      	mov	r3, r0
 80031ae:	01db      	lsls	r3, r3, #7
 80031b0:	4413      	add	r3, r2
 80031b2:	b2c9      	uxtb	r1, r1
 80031b4:	4a13      	ldr	r2, [pc, #76]	; (8003204 <ssd1306_DrawPixel+0xbc>)
 80031b6:	54d1      	strb	r1, [r2, r3]
 80031b8:	e01d      	b.n	80031f6 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80031ba:	79fa      	ldrb	r2, [r7, #7]
 80031bc:	79bb      	ldrb	r3, [r7, #6]
 80031be:	08db      	lsrs	r3, r3, #3
 80031c0:	b2d8      	uxtb	r0, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	01db      	lsls	r3, r3, #7
 80031c6:	4413      	add	r3, r2
 80031c8:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <ssd1306_DrawPixel+0xbc>)
 80031ca:	5cd3      	ldrb	r3, [r2, r3]
 80031cc:	b25a      	sxtb	r2, r3
 80031ce:	79bb      	ldrb	r3, [r7, #6]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	b25b      	sxtb	r3, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	b25b      	sxtb	r3, r3
 80031e0:	4013      	ands	r3, r2
 80031e2:	b259      	sxtb	r1, r3
 80031e4:	79fa      	ldrb	r2, [r7, #7]
 80031e6:	4603      	mov	r3, r0
 80031e8:	01db      	lsls	r3, r3, #7
 80031ea:	4413      	add	r3, r2
 80031ec:	b2c9      	uxtb	r1, r1
 80031ee:	4a05      	ldr	r2, [pc, #20]	; (8003204 <ssd1306_DrawPixel+0xbc>)
 80031f0:	54d1      	strb	r1, [r2, r3]
 80031f2:	e000      	b.n	80031f6 <ssd1306_DrawPixel+0xae>
        return;
 80031f4:	bf00      	nop
    }
}
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	2000049c 	.word	0x2000049c
 8003204:	2000009c 	.word	0x2000009c

08003208 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	4604      	mov	r4, r0
 8003210:	1d38      	adds	r0, r7, #4
 8003212:	e880 0006 	stmia.w	r0, {r1, r2}
 8003216:	461a      	mov	r2, r3
 8003218:	4623      	mov	r3, r4
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	4613      	mov	r3, r2
 800321e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b1f      	cmp	r3, #31
 8003224:	d902      	bls.n	800322c <ssd1306_WriteChar+0x24>
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b7e      	cmp	r3, #126	; 0x7e
 800322a:	d901      	bls.n	8003230 <ssd1306_WriteChar+0x28>
        return 0;
 800322c:	2300      	movs	r3, #0
 800322e:	e06d      	b.n	800330c <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003230:	4b38      	ldr	r3, [pc, #224]	; (8003314 <ssd1306_WriteChar+0x10c>)
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	793b      	ldrb	r3, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	2b80      	cmp	r3, #128	; 0x80
 800323c:	dc06      	bgt.n	800324c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800323e:	4b35      	ldr	r3, [pc, #212]	; (8003314 <ssd1306_WriteChar+0x10c>)
 8003240:	885b      	ldrh	r3, [r3, #2]
 8003242:	461a      	mov	r2, r3
 8003244:	797b      	ldrb	r3, [r7, #5]
 8003246:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	dd01      	ble.n	8003250 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800324c:	2300      	movs	r3, #0
 800324e:	e05d      	b.n	800330c <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	e04c      	b.n	80032f0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	3b20      	subs	r3, #32
 800325c:	7979      	ldrb	r1, [r7, #5]
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4619      	mov	r1, r3
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	440b      	add	r3, r1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	e034      	b.n	80032e0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d012      	beq.n	80032ac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003286:	4b23      	ldr	r3, [pc, #140]	; (8003314 <ssd1306_WriteChar+0x10c>)
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	4413      	add	r3, r2
 8003292:	b2d8      	uxtb	r0, r3
 8003294:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <ssd1306_WriteChar+0x10c>)
 8003296:	885b      	ldrh	r3, [r3, #2]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	4413      	add	r3, r2
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	7bba      	ldrb	r2, [r7, #14]
 80032a4:	4619      	mov	r1, r3
 80032a6:	f7ff ff4f 	bl	8003148 <ssd1306_DrawPixel>
 80032aa:	e016      	b.n	80032da <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <ssd1306_WriteChar+0x10c>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	b2d8      	uxtb	r0, r3
 80032ba:	4b16      	ldr	r3, [pc, #88]	; (8003314 <ssd1306_WriteChar+0x10c>)
 80032bc:	885b      	ldrh	r3, [r3, #2]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	b2d9      	uxtb	r1, r3
 80032c8:	7bbb      	ldrb	r3, [r7, #14]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	f7ff ff37 	bl	8003148 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	3301      	adds	r3, #1
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	793b      	ldrb	r3, [r7, #4]
 80032e2:	461a      	mov	r2, r3
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d3c5      	bcc.n	8003276 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3301      	adds	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	797b      	ldrb	r3, [r7, #5]
 80032f2:	461a      	mov	r2, r3
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d3ad      	bcc.n	8003256 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <ssd1306_WriteChar+0x10c>)
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	793b      	ldrb	r3, [r7, #4]
 8003300:	b29b      	uxth	r3, r3
 8003302:	4413      	add	r3, r2
 8003304:	b29a      	uxth	r2, r3
 8003306:	4b03      	ldr	r3, [pc, #12]	; (8003314 <ssd1306_WriteChar+0x10c>)
 8003308:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3724      	adds	r7, #36	; 0x24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd90      	pop	{r4, r7, pc}
 8003314:	2000049c 	.word	0x2000049c

08003318 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	1d38      	adds	r0, r7, #4
 8003322:	e880 0006 	stmia.w	r0, {r1, r2}
 8003326:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8003328:	e012      	b.n	8003350 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	7818      	ldrb	r0, [r3, #0]
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	1d3a      	adds	r2, r7, #4
 8003332:	ca06      	ldmia	r2, {r1, r2}
 8003334:	f7ff ff68 	bl	8003208 <ssd1306_WriteChar>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d002      	beq.n	800334a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	e008      	b.n	800335c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3301      	adds	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e8      	bne.n	800332a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	781b      	ldrb	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	460a      	mov	r2, r1
 800336e:	71fb      	strb	r3, [r7, #7]
 8003370:	4613      	mov	r3, r2
 8003372:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	b29a      	uxth	r2, r3
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <ssd1306_SetCursor+0x2c>)
 800337a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800337c:	79bb      	ldrb	r3, [r7, #6]
 800337e:	b29a      	uxth	r2, r3
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <ssd1306_SetCursor+0x2c>)
 8003382:	805a      	strh	r2, [r3, #2]
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	2000049c 	.word	0x2000049c

08003394 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	4604      	mov	r4, r0
 800339c:	4608      	mov	r0, r1
 800339e:	4611      	mov	r1, r2
 80033a0:	461a      	mov	r2, r3
 80033a2:	4623      	mov	r3, r4
 80033a4:	71fb      	strb	r3, [r7, #7]
 80033a6:	4603      	mov	r3, r0
 80033a8:	71bb      	strb	r3, [r7, #6]
 80033aa:	460b      	mov	r3, r1
 80033ac:	717b      	strb	r3, [r7, #5]
 80033ae:	4613      	mov	r3, r2
 80033b0:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 80033b2:	797a      	ldrb	r2, [r7, #5]
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bfb8      	it	lt
 80033bc:	425b      	neglt	r3, r3
 80033be:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 80033c0:	793a      	ldrb	r2, [r7, #4]
 80033c2:	79bb      	ldrb	r3, [r7, #6]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bfb8      	it	lt
 80033ca:	425b      	neglt	r3, r3
 80033cc:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80033ce:	79fa      	ldrb	r2, [r7, #7]
 80033d0:	797b      	ldrb	r3, [r7, #5]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d201      	bcs.n	80033da <ssd1306_Line+0x46>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e001      	b.n	80033de <ssd1306_Line+0x4a>
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
 80033de:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80033e0:	79ba      	ldrb	r2, [r7, #6]
 80033e2:	793b      	ldrb	r3, [r7, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d201      	bcs.n	80033ec <ssd1306_Line+0x58>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e001      	b.n	80033f0 <ssd1306_Line+0x5c>
 80033ec:	f04f 33ff 	mov.w	r3, #4294967295
 80033f0:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 80033fa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80033fe:	7939      	ldrb	r1, [r7, #4]
 8003400:	797b      	ldrb	r3, [r7, #5]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fea0 	bl	8003148 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8003408:	e024      	b.n	8003454 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 800340a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800340e:	79b9      	ldrb	r1, [r7, #6]
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fe98 	bl	8003148 <ssd1306_DrawPixel>
    error2 = error * 2;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	425b      	negs	r3, r3
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	dd08      	ble.n	800343a <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	4413      	add	r3, r2
 8003438:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	429a      	cmp	r2, r3
 8003440:	da08      	bge.n	8003454 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	4413      	add	r3, r2
 8003448:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	79bb      	ldrb	r3, [r7, #6]
 8003450:	4413      	add	r3, r2
 8003452:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8003454:	79fa      	ldrb	r2, [r7, #7]
 8003456:	797b      	ldrb	r3, [r7, #5]
 8003458:	429a      	cmp	r2, r3
 800345a:	d1d6      	bne.n	800340a <ssd1306_Line+0x76>
 800345c:	79ba      	ldrb	r2, [r7, #6]
 800345e:	793b      	ldrb	r3, [r7, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	d1d2      	bne.n	800340a <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8003464:	bf00      	nop
}
 8003466:	3724      	adds	r7, #36	; 0x24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd90      	pop	{r4, r7, pc}

0800346c <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b085      	sub	sp, #20
 8003470:	af02      	add	r7, sp, #8
 8003472:	4604      	mov	r4, r0
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	461a      	mov	r2, r3
 800347a:	4623      	mov	r3, r4
 800347c:	71fb      	strb	r3, [r7, #7]
 800347e:	4603      	mov	r3, r0
 8003480:	71bb      	strb	r3, [r7, #6]
 8003482:	460b      	mov	r3, r1
 8003484:	717b      	strb	r3, [r7, #5]
 8003486:	4613      	mov	r3, r2
 8003488:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 800348a:	79bc      	ldrb	r4, [r7, #6]
 800348c:	797a      	ldrb	r2, [r7, #5]
 800348e:	79b9      	ldrb	r1, [r7, #6]
 8003490:	79f8      	ldrb	r0, [r7, #7]
 8003492:	7e3b      	ldrb	r3, [r7, #24]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	4623      	mov	r3, r4
 8003498:	f7ff ff7c 	bl	8003394 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 800349c:	793c      	ldrb	r4, [r7, #4]
 800349e:	797a      	ldrb	r2, [r7, #5]
 80034a0:	79b9      	ldrb	r1, [r7, #6]
 80034a2:	7978      	ldrb	r0, [r7, #5]
 80034a4:	7e3b      	ldrb	r3, [r7, #24]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	4623      	mov	r3, r4
 80034aa:	f7ff ff73 	bl	8003394 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 80034ae:	793c      	ldrb	r4, [r7, #4]
 80034b0:	79fa      	ldrb	r2, [r7, #7]
 80034b2:	7939      	ldrb	r1, [r7, #4]
 80034b4:	7978      	ldrb	r0, [r7, #5]
 80034b6:	7e3b      	ldrb	r3, [r7, #24]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	4623      	mov	r3, r4
 80034bc:	f7ff ff6a 	bl	8003394 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 80034c0:	79bc      	ldrb	r4, [r7, #6]
 80034c2:	79fa      	ldrb	r2, [r7, #7]
 80034c4:	7939      	ldrb	r1, [r7, #4]
 80034c6:	79f8      	ldrb	r0, [r7, #7]
 80034c8:	7e3b      	ldrb	r3, [r7, #24]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	4623      	mov	r3, r4
 80034ce:	f7ff ff61 	bl	8003394 <ssd1306_Line>

  return;
 80034d2:	bf00      	nop
}
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd90      	pop	{r4, r7, pc}

080034da <ssd1306_DrawFilledRectangle>:

void ssd1306_DrawFilledRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80034da:	b590      	push	{r4, r7, lr}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4604      	mov	r4, r0
 80034e2:	4608      	mov	r0, r1
 80034e4:	4611      	mov	r1, r2
 80034e6:	461a      	mov	r2, r3
 80034e8:	4623      	mov	r3, r4
 80034ea:	71fb      	strb	r3, [r7, #7]
 80034ec:	4603      	mov	r3, r0
 80034ee:	71bb      	strb	r3, [r7, #6]
 80034f0:	460b      	mov	r3, r1
 80034f2:	717b      	strb	r3, [r7, #5]
 80034f4:	4613      	mov	r3, r2
 80034f6:	713b      	strb	r3, [r7, #4]

	if (x1 > x2 || y1 > y2)
 80034f8:	79fa      	ldrb	r2, [r7, #7]
 80034fa:	797b      	ldrb	r3, [r7, #5]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d820      	bhi.n	8003542 <ssd1306_DrawFilledRectangle+0x68>
 8003500:	79ba      	ldrb	r2, [r7, #6]
 8003502:	793b      	ldrb	r3, [r7, #4]
 8003504:	429a      	cmp	r2, r3
 8003506:	d81c      	bhi.n	8003542 <ssd1306_DrawFilledRectangle+0x68>
		return;

	for (uint8_t y = y1; y <= y2; y++)
 8003508:	79bb      	ldrb	r3, [r7, #6]
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	e013      	b.n	8003536 <ssd1306_DrawFilledRectangle+0x5c>
		for (uint8_t x = x1; x <= x2; x++)
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	73bb      	strb	r3, [r7, #14]
 8003512:	e009      	b.n	8003528 <ssd1306_DrawFilledRectangle+0x4e>
		{
			ssd1306_DrawPixel(x, y, color);
 8003514:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003518:	7bf9      	ldrb	r1, [r7, #15]
 800351a:	7bbb      	ldrb	r3, [r7, #14]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fe13 	bl	8003148 <ssd1306_DrawPixel>
		for (uint8_t x = x1; x <= x2; x++)
 8003522:	7bbb      	ldrb	r3, [r7, #14]
 8003524:	3301      	adds	r3, #1
 8003526:	73bb      	strb	r3, [r7, #14]
 8003528:	7bba      	ldrb	r2, [r7, #14]
 800352a:	797b      	ldrb	r3, [r7, #5]
 800352c:	429a      	cmp	r2, r3
 800352e:	d9f1      	bls.n	8003514 <ssd1306_DrawFilledRectangle+0x3a>
	for (uint8_t y = y1; y <= y2; y++)
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	3301      	adds	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	793b      	ldrb	r3, [r7, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	d9e7      	bls.n	800350e <ssd1306_DrawFilledRectangle+0x34>
		}

	return;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <ssd1306_DrawFilledRectangle+0x6a>
		return;
 8003542:	bf00      	nop
}
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bd90      	pop	{r4, r7, pc}
	...

0800354c <ssd1306_SetDisplayOn>:
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
    ssd1306_WriteCommand(value);
}

void ssd1306_SetDisplayOn(const uint8_t on) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800355c:	23af      	movs	r3, #175	; 0xaf
 800355e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <ssd1306_SetDisplayOn+0x38>)
 8003562:	2201      	movs	r2, #1
 8003564:	719a      	strb	r2, [r3, #6]
 8003566:	e004      	b.n	8003572 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003568:	23ae      	movs	r3, #174	; 0xae
 800356a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <ssd1306_SetDisplayOn+0x38>)
 800356e:	2200      	movs	r2, #0
 8003570:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fcef 	bl	8002f58 <ssd1306_WriteCommand>
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	2000049c 	.word	0x2000049c

08003588 <ssd1306_WriteText>:
	ssd1306_WriteChar(simb, Font, color);
	//ssd1306_UpdateScreen();
}

void ssd1306_WriteText (uint8_t x, uint8_t y, char* str, FontDef Font, SSD1306_COLOR color)
{
 8003588:	b082      	sub	sp, #8
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	603a      	str	r2, [r7, #0]
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	4603      	mov	r3, r0
 8003596:	71fb      	strb	r3, [r7, #7]
 8003598:	460b      	mov	r3, r1
 800359a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800359c:	79ba      	ldrb	r2, [r7, #6]
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	4611      	mov	r1, r2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fede 	bl	8003364 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font, color);
 80035a8:	7f3b      	ldrb	r3, [r7, #28]
 80035aa:	f107 0214 	add.w	r2, r7, #20
 80035ae:	ca06      	ldmia	r2, {r1, r2}
 80035b0:	6838      	ldr	r0, [r7, #0]
 80035b2:	f7ff feb1 	bl	8003318 <ssd1306_WriteString>
	//ssd1306_UpdateScreen();
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035c0:	b002      	add	sp, #8
 80035c2:	4770      	bx	lr

080035c4 <ssd1306_DrawSprite8x8>:

void ssd1306_DrawSprite8x8 (uint8_t x, uint8_t y, const uint8_t* sprite, SSD1306_COLOR color)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	603a      	str	r2, [r7, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	460b      	mov	r3, r1
 80035d4:	71bb      	strb	r3, [r7, #6]
 80035d6:	4613      	mov	r3, r2
 80035d8:	717b      	strb	r3, [r7, #5]
	uint8_t i, j;

	for(i = 0; i < 8; i++) {
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	e025      	b.n	800362c <ssd1306_DrawSprite8x8+0x68>
		for(j = 0; j < 8; j++) {
 80035e0:	2300      	movs	r3, #0
 80035e2:	73bb      	strb	r3, [r7, #14]
 80035e4:	e01c      	b.n	8003620 <ssd1306_DrawSprite8x8+0x5c>
			if(sprite[i] & 1 << (7 - j))  {
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	4413      	add	r3, r2
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	7bbb      	ldrb	r3, [r7, #14]
 80035f2:	f1c3 0307 	rsb	r3, r3, #7
 80035f6:	fa42 f303 	asr.w	r3, r2, r3
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <ssd1306_DrawSprite8x8+0x56>
				ssd1306_DrawPixel(x + j, y + i, color);
 8003602:	79fa      	ldrb	r2, [r7, #7]
 8003604:	7bbb      	ldrb	r3, [r7, #14]
 8003606:	4413      	add	r3, r2
 8003608:	b2d8      	uxtb	r0, r3
 800360a:	79ba      	ldrb	r2, [r7, #6]
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	4413      	add	r3, r2
 8003610:	b2db      	uxtb	r3, r3
 8003612:	797a      	ldrb	r2, [r7, #5]
 8003614:	4619      	mov	r1, r3
 8003616:	f7ff fd97 	bl	8003148 <ssd1306_DrawPixel>
		for(j = 0; j < 8; j++) {
 800361a:	7bbb      	ldrb	r3, [r7, #14]
 800361c:	3301      	adds	r3, #1
 800361e:	73bb      	strb	r3, [r7, #14]
 8003620:	7bbb      	ldrb	r3, [r7, #14]
 8003622:	2b07      	cmp	r3, #7
 8003624:	d9df      	bls.n	80035e6 <ssd1306_DrawSprite8x8+0x22>
	for(i = 0; i < 8; i++) {
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	3301      	adds	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b07      	cmp	r3, #7
 8003630:	d9d6      	bls.n	80035e0 <ssd1306_DrawSprite8x8+0x1c>
				//ssd1306_DrawPixel(x + j, y + i, 0);
				;
			}
		}
	}
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <ssd1306_DrawSprite16x16>:

void ssd1306_DrawSprite16x16 (uint8_t x, uint8_t y, const uint16_t* sprite, SSD1306_COLOR color)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	603a      	str	r2, [r7, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	4603      	mov	r3, r0
 8003646:	71fb      	strb	r3, [r7, #7]
 8003648:	460b      	mov	r3, r1
 800364a:	71bb      	strb	r3, [r7, #6]
 800364c:	4613      	mov	r3, r2
 800364e:	717b      	strb	r3, [r7, #5]
	uint8_t i, j;

	for(i = 0; i < 16; i++) {
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e026      	b.n	80036a4 <ssd1306_DrawSprite16x16+0x6a>
		for(j = 0; j < 16; j++) {
 8003656:	2300      	movs	r3, #0
 8003658:	73bb      	strb	r3, [r7, #14]
 800365a:	e01d      	b.n	8003698 <ssd1306_DrawSprite16x16+0x5e>
			if(sprite[i] & 1 << (15 - j))  {
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	4413      	add	r3, r2
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	7bbb      	ldrb	r3, [r7, #14]
 800366a:	f1c3 030f 	rsb	r3, r3, #15
 800366e:	fa42 f303 	asr.w	r3, r2, r3
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <ssd1306_DrawSprite16x16+0x58>
				ssd1306_DrawPixel(x + j, y + i, color);
 800367a:	79fa      	ldrb	r2, [r7, #7]
 800367c:	7bbb      	ldrb	r3, [r7, #14]
 800367e:	4413      	add	r3, r2
 8003680:	b2d8      	uxtb	r0, r3
 8003682:	79ba      	ldrb	r2, [r7, #6]
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	4413      	add	r3, r2
 8003688:	b2db      	uxtb	r3, r3
 800368a:	797a      	ldrb	r2, [r7, #5]
 800368c:	4619      	mov	r1, r3
 800368e:	f7ff fd5b 	bl	8003148 <ssd1306_DrawPixel>
		for(j = 0; j < 16; j++) {
 8003692:	7bbb      	ldrb	r3, [r7, #14]
 8003694:	3301      	adds	r3, #1
 8003696:	73bb      	strb	r3, [r7, #14]
 8003698:	7bbb      	ldrb	r3, [r7, #14]
 800369a:	2b0f      	cmp	r3, #15
 800369c:	d9de      	bls.n	800365c <ssd1306_DrawSprite16x16+0x22>
	for(i = 0; i < 16; i++) {
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	3301      	adds	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	d9d5      	bls.n	8003656 <ssd1306_DrawSprite16x16+0x1c>
				//ssd1306_DrawPixel(x + j, y + i, 0);
				;
			}
		}
	}
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <ssd1306_DrawSprite24x24>:

void ssd1306_DrawSprite24x24 (uint8_t x, uint8_t y, const uint32_t* sprite, SSD1306_COLOR color)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	603a      	str	r2, [r7, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	4603      	mov	r3, r0
 80036be:	71fb      	strb	r3, [r7, #7]
 80036c0:	460b      	mov	r3, r1
 80036c2:	71bb      	strb	r3, [r7, #6]
 80036c4:	4613      	mov	r3, r2
 80036c6:	717b      	strb	r3, [r7, #5]
	uint8_t i, j;

	for(i = 0; i < 24; i++) {
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	e025      	b.n	800371a <ssd1306_DrawSprite24x24+0x68>
		for(j = 0; j < 24; j++) {
 80036ce:	2300      	movs	r3, #0
 80036d0:	73bb      	strb	r3, [r7, #14]
 80036d2:	e01c      	b.n	800370e <ssd1306_DrawSprite24x24+0x5c>
			if(sprite[i] & 1 << (23 - j))  {
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	7bba      	ldrb	r2, [r7, #14]
 80036e0:	f1c2 0217 	rsb	r2, r2, #23
 80036e4:	2101      	movs	r1, #1
 80036e6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00b      	beq.n	8003708 <ssd1306_DrawSprite24x24+0x56>
				ssd1306_DrawPixel(x + j, y + i, color);
 80036f0:	79fa      	ldrb	r2, [r7, #7]
 80036f2:	7bbb      	ldrb	r3, [r7, #14]
 80036f4:	4413      	add	r3, r2
 80036f6:	b2d8      	uxtb	r0, r3
 80036f8:	79ba      	ldrb	r2, [r7, #6]
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	4413      	add	r3, r2
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	797a      	ldrb	r2, [r7, #5]
 8003702:	4619      	mov	r1, r3
 8003704:	f7ff fd20 	bl	8003148 <ssd1306_DrawPixel>
		for(j = 0; j < 24; j++) {
 8003708:	7bbb      	ldrb	r3, [r7, #14]
 800370a:	3301      	adds	r3, #1
 800370c:	73bb      	strb	r3, [r7, #14]
 800370e:	7bbb      	ldrb	r3, [r7, #14]
 8003710:	2b17      	cmp	r3, #23
 8003712:	d9df      	bls.n	80036d4 <ssd1306_DrawSprite24x24+0x22>
	for(i = 0; i < 24; i++) {
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	3301      	adds	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b17      	cmp	r3, #23
 800371e:	d9d6      	bls.n	80036ce <ssd1306_DrawSprite24x24+0x1c>
				//ssd1306_DrawPixel(x + j, y + i, 0);
				;
			}
		}
	}
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <ssd1306_DrawSprite32x32>:


void ssd1306_DrawSprite32x32 (uint8_t x, uint8_t y, const uint32_t* sprite, SSD1306_COLOR color)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	603a      	str	r2, [r7, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
 8003736:	460b      	mov	r3, r1
 8003738:	71bb      	strb	r3, [r7, #6]
 800373a:	4613      	mov	r3, r2
 800373c:	717b      	strb	r3, [r7, #5]
	uint8_t i, j;

	for(i = 0; i < 32; i++) {
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]
 8003742:	e025      	b.n	8003790 <ssd1306_DrawSprite32x32+0x68>
		for(j = 0; j < 32; j++) {
 8003744:	2300      	movs	r3, #0
 8003746:	73bb      	strb	r3, [r7, #14]
 8003748:	e01c      	b.n	8003784 <ssd1306_DrawSprite32x32+0x5c>
			if(sprite[i] & 1 << (31 - j))  {
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	4413      	add	r3, r2
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	7bba      	ldrb	r2, [r7, #14]
 8003756:	f1c2 021f 	rsb	r2, r2, #31
 800375a:	2101      	movs	r1, #1
 800375c:	fa01 f202 	lsl.w	r2, r1, r2
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <ssd1306_DrawSprite32x32+0x56>
				ssd1306_DrawPixel(x + j, y + i, color);
 8003766:	79fa      	ldrb	r2, [r7, #7]
 8003768:	7bbb      	ldrb	r3, [r7, #14]
 800376a:	4413      	add	r3, r2
 800376c:	b2d8      	uxtb	r0, r3
 800376e:	79ba      	ldrb	r2, [r7, #6]
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	4413      	add	r3, r2
 8003774:	b2db      	uxtb	r3, r3
 8003776:	797a      	ldrb	r2, [r7, #5]
 8003778:	4619      	mov	r1, r3
 800377a:	f7ff fce5 	bl	8003148 <ssd1306_DrawPixel>
		for(j = 0; j < 32; j++) {
 800377e:	7bbb      	ldrb	r3, [r7, #14]
 8003780:	3301      	adds	r3, #1
 8003782:	73bb      	strb	r3, [r7, #14]
 8003784:	7bbb      	ldrb	r3, [r7, #14]
 8003786:	2b1f      	cmp	r3, #31
 8003788:	d9df      	bls.n	800374a <ssd1306_DrawSprite32x32+0x22>
	for(i = 0; i < 32; i++) {
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	3301      	adds	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b1f      	cmp	r3, #31
 8003794:	d9d6      	bls.n	8003744 <ssd1306_DrawSprite32x32+0x1c>
				//ssd1306_DrawPixel(x + j, y + i, 0);
				;
			}
		}
	}
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <HAL_MspInit+0x44>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <HAL_MspInit+0x44>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <HAL_MspInit+0x44>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_MspInit+0x44>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <HAL_MspInit+0x44>)
 80037c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_MspInit+0x44>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800

080037e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fa:	e7fe      	b.n	80037fa <HardFault_Handler+0x4>

080037fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003800:	e7fe      	b.n	8003800 <MemManage_Handler+0x4>

08003802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <BusFault_Handler+0x4>

08003808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800380c:	e7fe      	b.n	800380c <UsageFault_Handler+0x4>

0800380e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800383c:	f000 f8b0 	bl	80039a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003840:	bf00      	nop
 8003842:	bd80      	pop	{r7, pc}

08003844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800384c:	4a14      	ldr	r2, [pc, #80]	; (80038a0 <_sbrk+0x5c>)
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <_sbrk+0x60>)
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <_sbrk+0x64>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <_sbrk+0x64>)
 8003862:	4a12      	ldr	r2, [pc, #72]	; (80038ac <_sbrk+0x68>)
 8003864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <_sbrk+0x64>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	d207      	bcs.n	8003884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003874:	f001 fff4 	bl	8005860 <__errno>
 8003878:	4602      	mov	r2, r0
 800387a:	230c      	movs	r3, #12
 800387c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295
 8003882:	e009      	b.n	8003898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <_sbrk+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <_sbrk+0x64>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <_sbrk+0x64>)
 8003894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003896:	68fb      	ldr	r3, [r7, #12]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20080000 	.word	0x20080000
 80038a4:	00001600 	.word	0x00001600
 80038a8:	200004a4 	.word	0x200004a4
 80038ac:	200005b0 	.word	0x200005b0

080038b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <SystemInit+0x20>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	4a05      	ldr	r2, [pc, #20]	; (80038d0 <SystemInit+0x20>)
 80038bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800390c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038d8:	480d      	ldr	r0, [pc, #52]	; (8003910 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038da:	490e      	ldr	r1, [pc, #56]	; (8003914 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038dc:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038e0:	e002      	b.n	80038e8 <LoopCopyDataInit>

080038e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038e6:	3304      	adds	r3, #4

080038e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038ec:	d3f9      	bcc.n	80038e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ee:	4a0b      	ldr	r2, [pc, #44]	; (800391c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038f0:	4c0b      	ldr	r4, [pc, #44]	; (8003920 <LoopFillZerobss+0x26>)
  movs r3, #0
 80038f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f4:	e001      	b.n	80038fa <LoopFillZerobss>

080038f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038f8:	3204      	adds	r2, #4

080038fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038fc:	d3fb      	bcc.n	80038f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038fe:	f7ff ffd7 	bl	80038b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003902:	f001 ffb3 	bl	800586c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003906:	f7ff f85d 	bl	80029c4 <main>
  bx  lr    
 800390a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800390c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003914:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003918:	08007454 	.word	0x08007454
  ldr r2, =_sbss
 800391c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003920:	200005ac 	.word	0x200005ac

08003924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003924:	e7fe      	b.n	8003924 <ADC_IRQHandler>

08003926 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800392a:	2003      	movs	r0, #3
 800392c:	f000 fd4e 	bl	80043cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003930:	2000      	movs	r0, #0
 8003932:	f000 f805 	bl	8003940 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003936:	f7ff ff33 	bl	80037a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_InitTick+0x54>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b12      	ldr	r3, [pc, #72]	; (8003998 <HAL_InitTick+0x58>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	4619      	mov	r1, r3
 8003952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003956:	fbb3 f3f1 	udiv	r3, r3, r1
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fd5b 	bl	800441a <HAL_SYSTICK_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e00e      	b.n	800398c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b0f      	cmp	r3, #15
 8003972:	d80a      	bhi.n	800398a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003974:	2200      	movs	r2, #0
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	f000 fd31 	bl	80043e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003980:	4a06      	ldr	r2, [pc, #24]	; (800399c <HAL_InitTick+0x5c>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e000      	b.n	800398c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000010 	.word	0x20000010
 8003998:	20000018 	.word	0x20000018
 800399c:	20000014 	.word	0x20000014

080039a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_IncTick+0x20>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_IncTick+0x24>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4413      	add	r3, r2
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_IncTick+0x24>)
 80039b2:	6013      	str	r3, [r2, #0]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000018 	.word	0x20000018
 80039c4:	200005a4 	.word	0x200005a4

080039c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return uwTick;
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_GetTick+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	200005a4 	.word	0x200005a4

080039e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e8:	f7ff ffee 	bl	80039c8 <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d005      	beq.n	8003a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_Delay+0x40>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a06:	bf00      	nop
 8003a08:	f7ff ffde 	bl	80039c8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d8f7      	bhi.n	8003a08 <HAL_Delay+0x28>
  {
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000018 	.word	0x20000018

08003a24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e031      	b.n	8003a9e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fc fe70 	bl	8000728 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d116      	bne.n	8003a90 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <HAL_ADC_Init+0x84>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	f043 0202 	orr.w	r2, r3, #2
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fafe 	bl	8004074 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f023 0303 	bic.w	r3, r3, #3
 8003a86:	f043 0201 	orr.w	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a8e:	e001      	b.n	8003a94 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	ffffeefd 	.word	0xffffeefd

08003aac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ADC_Start+0x1a>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e0ad      	b.n	8003c22 <HAL_ADC_Start+0x176>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d018      	beq.n	8003b0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003aec:	4b50      	ldr	r3, [pc, #320]	; (8003c30 <HAL_ADC_Start+0x184>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a50      	ldr	r2, [pc, #320]	; (8003c34 <HAL_ADC_Start+0x188>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0c9a      	lsrs	r2, r3, #18
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003b00:	e002      	b.n	8003b08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f9      	bne.n	8003b02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d175      	bne.n	8003c08 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b20:	4b45      	ldr	r3, [pc, #276]	; (8003c38 <HAL_ADC_Start+0x18c>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d106      	bne.n	8003b66 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	f023 0206 	bic.w	r2, r3, #6
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44
 8003b64:	e002      	b.n	8003b6c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b7c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003b7e:	4b2f      	ldr	r3, [pc, #188]	; (8003c3c <HAL_ADC_Start+0x190>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d143      	bne.n	8003c20 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	e03a      	b.n	8003c20 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a24      	ldr	r2, [pc, #144]	; (8003c40 <HAL_ADC_Start+0x194>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10e      	bne.n	8003bd2 <HAL_ADC_Start+0x126>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d107      	bne.n	8003bd2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bd0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003bd2:	4b1a      	ldr	r3, [pc, #104]	; (8003c3c <HAL_ADC_Start+0x190>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d120      	bne.n	8003c20 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <HAL_ADC_Start+0x198>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d11b      	bne.n	8003c20 <HAL_ADC_Start+0x174>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d114      	bne.n	8003c20 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	e00b      	b.n	8003c20 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f043 0210 	orr.w	r2, r3, #16
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	f043 0201 	orr.w	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000010 	.word	0x20000010
 8003c34:	431bde83 	.word	0x431bde83
 8003c38:	fffff8fe 	.word	0xfffff8fe
 8003c3c:	40012300 	.word	0x40012300
 8003c40:	40012000 	.word	0x40012000
 8003c44:	40012200 	.word	0x40012200

08003c48 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_ADC_Stop+0x16>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e01f      	b.n	8003c9e <HAL_ADC_Stop+0x56>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d107      	bne.n	8003c94 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c88:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_ADC_Stop+0x64>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	f043 0201 	orr.w	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	ffffeefe 	.word	0xffffeefe

08003cb0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ccc:	d113      	bne.n	8003cf6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f043 0220 	orr.w	r2, r3, #32
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e063      	b.n	8003dbe <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003cf6:	f7ff fe67 	bl	80039c8 <HAL_GetTick>
 8003cfa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003cfc:	e021      	b.n	8003d42 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d01d      	beq.n	8003d42 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <HAL_ADC_PollForConversion+0x6c>
 8003d0c:	f7ff fe5c 	bl	80039c8 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d212      	bcs.n	8003d42 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d00b      	beq.n	8003d42 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f043 0204 	orr.w	r2, r3, #4
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e03d      	b.n	8003dbe <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d1d6      	bne.n	8003cfe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0212 	mvn.w	r2, #18
 8003d58:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d123      	bne.n	8003dbc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d11f      	bne.n	8003dbc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d006      	beq.n	8003d98 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d111      	bne.n	8003dbc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f043 0201 	orr.w	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x1c>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e12a      	b.n	8004052 <HAL_ADC_ConfigChannel+0x272>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b09      	cmp	r3, #9
 8003e0a:	d93a      	bls.n	8003e82 <HAL_ADC_ConfigChannel+0xa2>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e14:	d035      	beq.n	8003e82 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68d9      	ldr	r1, [r3, #12]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	4613      	mov	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	3b1e      	subs	r3, #30
 8003e2c:	2207      	movs	r2, #7
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43da      	mvns	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	400a      	ands	r2, r1
 8003e3a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a87      	ldr	r2, [pc, #540]	; (8004060 <HAL_ADC_ConfigChannel+0x280>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10a      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68d9      	ldr	r1, [r3, #12]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	061a      	lsls	r2, r3, #24
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e5a:	e035      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68d9      	ldr	r1, [r3, #12]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4403      	add	r3, r0
 8003e74:	3b1e      	subs	r3, #30
 8003e76:	409a      	lsls	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e80:	e022      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6919      	ldr	r1, [r3, #16]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4613      	mov	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	2207      	movs	r2, #7
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43da      	mvns	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6919      	ldr	r1, [r3, #16]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	4603      	mov	r3, r0
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	4403      	add	r3, r0
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b06      	cmp	r3, #6
 8003ece:	d824      	bhi.n	8003f1a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	3b05      	subs	r3, #5
 8003ee2:	221f      	movs	r2, #31
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	43da      	mvns	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	400a      	ands	r2, r1
 8003ef0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	4618      	mov	r0, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	3b05      	subs	r3, #5
 8003f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	635a      	str	r2, [r3, #52]	; 0x34
 8003f18:	e04c      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d824      	bhi.n	8003f6c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	3b23      	subs	r3, #35	; 0x23
 8003f34:	221f      	movs	r2, #31
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	400a      	ands	r2, r1
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	4618      	mov	r0, r3
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3b23      	subs	r3, #35	; 0x23
 8003f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
 8003f6a:	e023      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3b41      	subs	r3, #65	; 0x41
 8003f7e:	221f      	movs	r2, #31
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43da      	mvns	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3b41      	subs	r3, #65	; 0x41
 8003fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2a      	ldr	r2, [pc, #168]	; (8004064 <HAL_ADC_ConfigChannel+0x284>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x1f4>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fc6:	d105      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003fc8:	4b27      	ldr	r3, [pc, #156]	; (8004068 <HAL_ADC_ConfigChannel+0x288>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a26      	ldr	r2, [pc, #152]	; (8004068 <HAL_ADC_ConfigChannel+0x288>)
 8003fce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003fd2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a22      	ldr	r2, [pc, #136]	; (8004064 <HAL_ADC_ConfigChannel+0x284>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d109      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x212>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b12      	cmp	r3, #18
 8003fe4:	d105      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <HAL_ADC_ConfigChannel+0x288>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <HAL_ADC_ConfigChannel+0x288>)
 8003fec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ff0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <HAL_ADC_ConfigChannel+0x284>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d125      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x268>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a17      	ldr	r2, [pc, #92]	; (8004060 <HAL_ADC_ConfigChannel+0x280>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d003      	beq.n	800400e <HAL_ADC_ConfigChannel+0x22e>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b11      	cmp	r3, #17
 800400c:	d11c      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_ADC_ConfigChannel+0x288>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	4a15      	ldr	r2, [pc, #84]	; (8004068 <HAL_ADC_ConfigChannel+0x288>)
 8004014:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004018:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a10      	ldr	r2, [pc, #64]	; (8004060 <HAL_ADC_ConfigChannel+0x280>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d111      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <HAL_ADC_ConfigChannel+0x28c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a11      	ldr	r2, [pc, #68]	; (8004070 <HAL_ADC_ConfigChannel+0x290>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0c9a      	lsrs	r2, r3, #18
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800403a:	e002      	b.n	8004042 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3b01      	subs	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f9      	bne.n	800403c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	10000012 	.word	0x10000012
 8004064:	40012000 	.word	0x40012000
 8004068:	40012300 	.word	0x40012300
 800406c:	20000010 	.word	0x20000010
 8004070:	431bde83 	.word	0x431bde83

08004074 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800407c:	4b78      	ldr	r3, [pc, #480]	; (8004260 <ADC_Init+0x1ec>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4a77      	ldr	r2, [pc, #476]	; (8004260 <ADC_Init+0x1ec>)
 8004082:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004086:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004088:	4b75      	ldr	r3, [pc, #468]	; (8004260 <ADC_Init+0x1ec>)
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4973      	ldr	r1, [pc, #460]	; (8004260 <ADC_Init+0x1ec>)
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6859      	ldr	r1, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	021a      	lsls	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80040c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6859      	ldr	r1, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6899      	ldr	r1, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	4a58      	ldr	r2, [pc, #352]	; (8004264 <ADC_Init+0x1f0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004116:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6899      	ldr	r1, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6899      	ldr	r1, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	e00f      	b.n	800416e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800415c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800416c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0202 	bic.w	r2, r2, #2
 800417c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6899      	ldr	r1, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	005a      	lsls	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80041ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	3b01      	subs	r3, #1
 80041c8:	035a      	lsls	r2, r3, #13
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	e007      	b.n	80041e4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	3b01      	subs	r3, #1
 8004200:	051a      	lsls	r2, r3, #20
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004218:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6899      	ldr	r1, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004226:	025a      	lsls	r2, r3, #9
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6899      	ldr	r1, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	029a      	lsls	r2, r3, #10
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	40012300 	.word	0x40012300
 8004264:	0f000001 	.word	0x0f000001

08004268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <__NVIC_SetPriorityGrouping+0x40>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004284:	4013      	ands	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <__NVIC_SetPriorityGrouping+0x44>)
 8004292:	4313      	orrs	r3, r2
 8004294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004296:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <__NVIC_SetPriorityGrouping+0x40>)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	60d3      	str	r3, [r2, #12]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	e000ed00 	.word	0xe000ed00
 80042ac:	05fa0000 	.word	0x05fa0000

080042b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <__NVIC_GetPriorityGrouping+0x18>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	f003 0307 	and.w	r3, r3, #7
}
 80042be:	4618      	mov	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	db0a      	blt.n	80042f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	490c      	ldr	r1, [pc, #48]	; (8004318 <__NVIC_SetPriority+0x4c>)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	440b      	add	r3, r1
 80042f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f4:	e00a      	b.n	800430c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4908      	ldr	r1, [pc, #32]	; (800431c <__NVIC_SetPriority+0x50>)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	3b04      	subs	r3, #4
 8004304:	0112      	lsls	r2, r2, #4
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	440b      	add	r3, r1
 800430a:	761a      	strb	r2, [r3, #24]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	e000e100 	.word	0xe000e100
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f1c3 0307 	rsb	r3, r3, #7
 800433a:	2b04      	cmp	r3, #4
 800433c:	bf28      	it	cs
 800433e:	2304      	movcs	r3, #4
 8004340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3304      	adds	r3, #4
 8004346:	2b06      	cmp	r3, #6
 8004348:	d902      	bls.n	8004350 <NVIC_EncodePriority+0x30>
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3b03      	subs	r3, #3
 800434e:	e000      	b.n	8004352 <NVIC_EncodePriority+0x32>
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	f04f 32ff 	mov.w	r2, #4294967295
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	401a      	ands	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004368:	f04f 31ff 	mov.w	r1, #4294967295
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	43d9      	mvns	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004378:	4313      	orrs	r3, r2
         );
}
 800437a:	4618      	mov	r0, r3
 800437c:	3724      	adds	r7, #36	; 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3b01      	subs	r3, #1
 8004394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004398:	d301      	bcc.n	800439e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800439a:	2301      	movs	r3, #1
 800439c:	e00f      	b.n	80043be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800439e:	4a0a      	ldr	r2, [pc, #40]	; (80043c8 <SysTick_Config+0x40>)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043a6:	210f      	movs	r1, #15
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	f7ff ff8e 	bl	80042cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <SysTick_Config+0x40>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <SysTick_Config+0x40>)
 80043b8:	2207      	movs	r2, #7
 80043ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	e000e010 	.word	0xe000e010

080043cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff ff47 	bl	8004268 <__NVIC_SetPriorityGrouping>
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b086      	sub	sp, #24
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	4603      	mov	r3, r0
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043f4:	f7ff ff5c 	bl	80042b0 <__NVIC_GetPriorityGrouping>
 80043f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	6978      	ldr	r0, [r7, #20]
 8004400:	f7ff ff8e 	bl	8004320 <NVIC_EncodePriority>
 8004404:	4602      	mov	r2, r0
 8004406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff5d 	bl	80042cc <__NVIC_SetPriority>
}
 8004412:	bf00      	nop
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff ffb0 	bl	8004388 <SysTick_Config>
 8004428:	4603      	mov	r3, r0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	; 0x24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	e175      	b.n	8004740 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004454:	2201      	movs	r2, #1
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4013      	ands	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	429a      	cmp	r2, r3
 800446e:	f040 8164 	bne.w	800473a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d00b      	beq.n	8004492 <HAL_GPIO_Init+0x5e>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d007      	beq.n	8004492 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004486:	2b11      	cmp	r3, #17
 8004488:	d003      	beq.n	8004492 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b12      	cmp	r3, #18
 8004490:	d130      	bne.n	80044f4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	2203      	movs	r2, #3
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4013      	ands	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044c8:	2201      	movs	r2, #1
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	f003 0201 	and.w	r2, r3, #1
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	2203      	movs	r2, #3
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4313      	orrs	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d003      	beq.n	8004534 <HAL_GPIO_Init+0x100>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b12      	cmp	r3, #18
 8004532:	d123      	bne.n	800457c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	08da      	lsrs	r2, r3, #3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3208      	adds	r2, #8
 800453c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	220f      	movs	r2, #15
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	08da      	lsrs	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3208      	adds	r2, #8
 8004576:	69b9      	ldr	r1, [r7, #24]
 8004578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	2203      	movs	r2, #3
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0203 	and.w	r2, r3, #3
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80be 	beq.w	800473a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045be:	4b65      	ldr	r3, [pc, #404]	; (8004754 <HAL_GPIO_Init+0x320>)
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	4a64      	ldr	r2, [pc, #400]	; (8004754 <HAL_GPIO_Init+0x320>)
 80045c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045c8:	6453      	str	r3, [r2, #68]	; 0x44
 80045ca:	4b62      	ldr	r3, [pc, #392]	; (8004754 <HAL_GPIO_Init+0x320>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80045d6:	4a60      	ldr	r2, [pc, #384]	; (8004758 <HAL_GPIO_Init+0x324>)
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	089b      	lsrs	r3, r3, #2
 80045dc:	3302      	adds	r3, #2
 80045de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	220f      	movs	r2, #15
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a57      	ldr	r2, [pc, #348]	; (800475c <HAL_GPIO_Init+0x328>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d037      	beq.n	8004672 <HAL_GPIO_Init+0x23e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a56      	ldr	r2, [pc, #344]	; (8004760 <HAL_GPIO_Init+0x32c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d031      	beq.n	800466e <HAL_GPIO_Init+0x23a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a55      	ldr	r2, [pc, #340]	; (8004764 <HAL_GPIO_Init+0x330>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d02b      	beq.n	800466a <HAL_GPIO_Init+0x236>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a54      	ldr	r2, [pc, #336]	; (8004768 <HAL_GPIO_Init+0x334>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d025      	beq.n	8004666 <HAL_GPIO_Init+0x232>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a53      	ldr	r2, [pc, #332]	; (800476c <HAL_GPIO_Init+0x338>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01f      	beq.n	8004662 <HAL_GPIO_Init+0x22e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a52      	ldr	r2, [pc, #328]	; (8004770 <HAL_GPIO_Init+0x33c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d019      	beq.n	800465e <HAL_GPIO_Init+0x22a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a51      	ldr	r2, [pc, #324]	; (8004774 <HAL_GPIO_Init+0x340>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d013      	beq.n	800465a <HAL_GPIO_Init+0x226>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a50      	ldr	r2, [pc, #320]	; (8004778 <HAL_GPIO_Init+0x344>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00d      	beq.n	8004656 <HAL_GPIO_Init+0x222>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a4f      	ldr	r2, [pc, #316]	; (800477c <HAL_GPIO_Init+0x348>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d007      	beq.n	8004652 <HAL_GPIO_Init+0x21e>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a4e      	ldr	r2, [pc, #312]	; (8004780 <HAL_GPIO_Init+0x34c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d101      	bne.n	800464e <HAL_GPIO_Init+0x21a>
 800464a:	2309      	movs	r3, #9
 800464c:	e012      	b.n	8004674 <HAL_GPIO_Init+0x240>
 800464e:	230a      	movs	r3, #10
 8004650:	e010      	b.n	8004674 <HAL_GPIO_Init+0x240>
 8004652:	2308      	movs	r3, #8
 8004654:	e00e      	b.n	8004674 <HAL_GPIO_Init+0x240>
 8004656:	2307      	movs	r3, #7
 8004658:	e00c      	b.n	8004674 <HAL_GPIO_Init+0x240>
 800465a:	2306      	movs	r3, #6
 800465c:	e00a      	b.n	8004674 <HAL_GPIO_Init+0x240>
 800465e:	2305      	movs	r3, #5
 8004660:	e008      	b.n	8004674 <HAL_GPIO_Init+0x240>
 8004662:	2304      	movs	r3, #4
 8004664:	e006      	b.n	8004674 <HAL_GPIO_Init+0x240>
 8004666:	2303      	movs	r3, #3
 8004668:	e004      	b.n	8004674 <HAL_GPIO_Init+0x240>
 800466a:	2302      	movs	r3, #2
 800466c:	e002      	b.n	8004674 <HAL_GPIO_Init+0x240>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <HAL_GPIO_Init+0x240>
 8004672:	2300      	movs	r3, #0
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	f002 0203 	and.w	r2, r2, #3
 800467a:	0092      	lsls	r2, r2, #2
 800467c:	4093      	lsls	r3, r2
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004684:	4934      	ldr	r1, [pc, #208]	; (8004758 <HAL_GPIO_Init+0x324>)
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	089b      	lsrs	r3, r3, #2
 800468a:	3302      	adds	r3, #2
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004692:	4b3c      	ldr	r3, [pc, #240]	; (8004784 <HAL_GPIO_Init+0x350>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046b6:	4a33      	ldr	r2, [pc, #204]	; (8004784 <HAL_GPIO_Init+0x350>)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046bc:	4b31      	ldr	r3, [pc, #196]	; (8004784 <HAL_GPIO_Init+0x350>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4013      	ands	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046e0:	4a28      	ldr	r2, [pc, #160]	; (8004784 <HAL_GPIO_Init+0x350>)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046e6:	4b27      	ldr	r3, [pc, #156]	; (8004784 <HAL_GPIO_Init+0x350>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800470a:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <HAL_GPIO_Init+0x350>)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004710:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <HAL_GPIO_Init+0x350>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004734:	4a13      	ldr	r2, [pc, #76]	; (8004784 <HAL_GPIO_Init+0x350>)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3301      	adds	r3, #1
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	2b0f      	cmp	r3, #15
 8004744:	f67f ae86 	bls.w	8004454 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004748:	bf00      	nop
 800474a:	3724      	adds	r7, #36	; 0x24
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40023800 	.word	0x40023800
 8004758:	40013800 	.word	0x40013800
 800475c:	40020000 	.word	0x40020000
 8004760:	40020400 	.word	0x40020400
 8004764:	40020800 	.word	0x40020800
 8004768:	40020c00 	.word	0x40020c00
 800476c:	40021000 	.word	0x40021000
 8004770:	40021400 	.word	0x40021400
 8004774:	40021800 	.word	0x40021800
 8004778:	40021c00 	.word	0x40021c00
 800477c:	40022000 	.word	0x40022000
 8004780:	40022400 	.word	0x40022400
 8004784:	40013c00 	.word	0x40013c00

08004788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	887b      	ldrh	r3, [r7, #2]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
 80047a4:	e001      	b.n	80047aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	807b      	strh	r3, [r7, #2]
 80047c4:	4613      	mov	r3, r2
 80047c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047c8:	787b      	ldrb	r3, [r7, #1]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ce:	887a      	ldrh	r2, [r7, #2]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80047d4:	e003      	b.n	80047de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80047d6:	887b      	ldrh	r3, [r7, #2]
 80047d8:	041a      	lsls	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	619a      	str	r2, [r3, #24]
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	4b23      	ldr	r3, [pc, #140]	; (8004884 <HAL_PWREx_EnableOverDrive+0x98>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	4a22      	ldr	r2, [pc, #136]	; (8004884 <HAL_PWREx_EnableOverDrive+0x98>)
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	6413      	str	r3, [r2, #64]	; 0x40
 8004802:	4b20      	ldr	r3, [pc, #128]	; (8004884 <HAL_PWREx_EnableOverDrive+0x98>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800480e:	4b1e      	ldr	r3, [pc, #120]	; (8004888 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004818:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800481a:	f7ff f8d5 	bl	80039c8 <HAL_GetTick>
 800481e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004820:	e009      	b.n	8004836 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004822:	f7ff f8d1 	bl	80039c8 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004830:	d901      	bls.n	8004836 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e022      	b.n	800487c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800483e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004842:	d1ee      	bne.n	8004822 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004844:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a0f      	ldr	r2, [pc, #60]	; (8004888 <HAL_PWREx_EnableOverDrive+0x9c>)
 800484a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004850:	f7ff f8ba 	bl	80039c8 <HAL_GetTick>
 8004854:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004856:	e009      	b.n	800486c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004858:	f7ff f8b6 	bl	80039c8 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004866:	d901      	bls.n	800486c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e007      	b.n	800487c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800486c:	4b06      	ldr	r3, [pc, #24]	; (8004888 <HAL_PWREx_EnableOverDrive+0x9c>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004878:	d1ee      	bne.n	8004858 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40023800 	.word	0x40023800
 8004888:	40007000 	.word	0x40007000

0800488c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004894:	2300      	movs	r3, #0
 8004896:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e29b      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8087 	beq.w	80049be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048b0:	4b96      	ldr	r3, [pc, #600]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d00c      	beq.n	80048d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048bc:	4b93      	ldr	r3, [pc, #588]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d112      	bne.n	80048ee <HAL_RCC_OscConfig+0x62>
 80048c8:	4b90      	ldr	r3, [pc, #576]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d4:	d10b      	bne.n	80048ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d6:	4b8d      	ldr	r3, [pc, #564]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d06c      	beq.n	80049bc <HAL_RCC_OscConfig+0x130>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d168      	bne.n	80049bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e275      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f6:	d106      	bne.n	8004906 <HAL_RCC_OscConfig+0x7a>
 80048f8:	4b84      	ldr	r3, [pc, #528]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a83      	ldr	r2, [pc, #524]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80048fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	e02e      	b.n	8004964 <HAL_RCC_OscConfig+0xd8>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10c      	bne.n	8004928 <HAL_RCC_OscConfig+0x9c>
 800490e:	4b7f      	ldr	r3, [pc, #508]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7e      	ldr	r2, [pc, #504]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b7c      	ldr	r3, [pc, #496]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a7b      	ldr	r2, [pc, #492]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e01d      	b.n	8004964 <HAL_RCC_OscConfig+0xd8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0xc0>
 8004932:	4b76      	ldr	r3, [pc, #472]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a75      	ldr	r2, [pc, #468]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b73      	ldr	r3, [pc, #460]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a72      	ldr	r2, [pc, #456]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0xd8>
 800494c:	4b6f      	ldr	r3, [pc, #444]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a6e      	ldr	r2, [pc, #440]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b6c      	ldr	r3, [pc, #432]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a6b      	ldr	r2, [pc, #428]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 800495e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7ff f82c 	bl	80039c8 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7ff f828 	bl	80039c8 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e229      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	4b61      	ldr	r3, [pc, #388]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0xe8>
 8004992:	e014      	b.n	80049be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7ff f818 	bl	80039c8 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800499c:	f7ff f814 	bl	80039c8 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	; 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e215      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	4b57      	ldr	r3, [pc, #348]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x110>
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d069      	beq.n	8004a9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ca:	4b50      	ldr	r3, [pc, #320]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d6:	4b4d      	ldr	r3, [pc, #308]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d11c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x190>
 80049e2:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d116      	bne.n	8004a1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ee:	4b47      	ldr	r3, [pc, #284]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_RCC_OscConfig+0x17a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e1e9      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	4b41      	ldr	r3, [pc, #260]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	493d      	ldr	r1, [pc, #244]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1a:	e040      	b.n	8004a9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d023      	beq.n	8004a6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a24:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a38      	ldr	r2, [pc, #224]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fe ffca 	bl	80039c8 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a38:	f7fe ffc6 	bl	80039c8 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e1c7      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4a:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a56:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	4929      	ldr	r1, [pc, #164]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
 8004a6a:	e018      	b.n	8004a9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a6c:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fe ffa6 	bl	80039c8 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fe ffa2 	bl	80039c8 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e1a3      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d038      	beq.n	8004b1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d019      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab2:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab6:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abe:	f7fe ff83 	bl	80039c8 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac6:	f7fe ff7f 	bl	80039c8 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e180      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x23a>
 8004ae4:	e01a      	b.n	8004b1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aea:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <HAL_RCC_OscConfig+0x280>)
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af2:	f7fe ff69 	bl	80039c8 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af8:	e00a      	b.n	8004b10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004afa:	f7fe ff65 	bl	80039c8 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d903      	bls.n	8004b10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e166      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
 8004b0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b10:	4b92      	ldr	r3, [pc, #584]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1ee      	bne.n	8004afa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80a4 	beq.w	8004c72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b2a:	4b8c      	ldr	r3, [pc, #560]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b36:	4b89      	ldr	r3, [pc, #548]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	4a88      	ldr	r2, [pc, #544]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b40:	6413      	str	r3, [r2, #64]	; 0x40
 8004b42:	4b86      	ldr	r3, [pc, #536]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b52:	4b83      	ldr	r3, [pc, #524]	; (8004d60 <HAL_RCC_OscConfig+0x4d4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d118      	bne.n	8004b90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b5e:	4b80      	ldr	r3, [pc, #512]	; (8004d60 <HAL_RCC_OscConfig+0x4d4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a7f      	ldr	r2, [pc, #508]	; (8004d60 <HAL_RCC_OscConfig+0x4d4>)
 8004b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6a:	f7fe ff2d 	bl	80039c8 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b72:	f7fe ff29 	bl	80039c8 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b64      	cmp	r3, #100	; 0x64
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e12a      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b84:	4b76      	ldr	r3, [pc, #472]	; (8004d60 <HAL_RCC_OscConfig+0x4d4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d106      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x31a>
 8004b98:	4b70      	ldr	r3, [pc, #448]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a6f      	ldr	r2, [pc, #444]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba4:	e02d      	b.n	8004c02 <HAL_RCC_OscConfig+0x376>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x33c>
 8004bae:	4b6b      	ldr	r3, [pc, #428]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	4a6a      	ldr	r2, [pc, #424]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bba:	4b68      	ldr	r3, [pc, #416]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	4a67      	ldr	r2, [pc, #412]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bc0:	f023 0304 	bic.w	r3, r3, #4
 8004bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc6:	e01c      	b.n	8004c02 <HAL_RCC_OscConfig+0x376>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b05      	cmp	r3, #5
 8004bce:	d10c      	bne.n	8004bea <HAL_RCC_OscConfig+0x35e>
 8004bd0:	4b62      	ldr	r3, [pc, #392]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd4:	4a61      	ldr	r2, [pc, #388]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bd6:	f043 0304 	orr.w	r3, r3, #4
 8004bda:	6713      	str	r3, [r2, #112]	; 0x70
 8004bdc:	4b5f      	ldr	r3, [pc, #380]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	4a5e      	ldr	r2, [pc, #376]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70
 8004be8:	e00b      	b.n	8004c02 <HAL_RCC_OscConfig+0x376>
 8004bea:	4b5c      	ldr	r3, [pc, #368]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	4a5b      	ldr	r2, [pc, #364]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf6:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	4a58      	ldr	r2, [pc, #352]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004bfc:	f023 0304 	bic.w	r3, r3, #4
 8004c00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d015      	beq.n	8004c36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0a:	f7fe fedd 	bl	80039c8 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c10:	e00a      	b.n	8004c28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c12:	f7fe fed9 	bl	80039c8 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e0d8      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c28:	4b4c      	ldr	r3, [pc, #304]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ee      	beq.n	8004c12 <HAL_RCC_OscConfig+0x386>
 8004c34:	e014      	b.n	8004c60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c36:	f7fe fec7 	bl	80039c8 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3c:	e00a      	b.n	8004c54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fe fec3 	bl	80039c8 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e0c2      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c54:	4b41      	ldr	r3, [pc, #260]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1ee      	bne.n	8004c3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d105      	bne.n	8004c72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c66:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	4a3c      	ldr	r2, [pc, #240]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 80ae 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c7c:	4b37      	ldr	r3, [pc, #220]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 030c 	and.w	r3, r3, #12
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d06d      	beq.n	8004d64 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d14b      	bne.n	8004d28 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c90:	4b32      	ldr	r3, [pc, #200]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a31      	ldr	r2, [pc, #196]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fe fe94 	bl	80039c8 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca4:	f7fe fe90 	bl	80039c8 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e091      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb6:	4b29      	ldr	r3, [pc, #164]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69da      	ldr	r2, [r3, #28]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	019b      	lsls	r3, r3, #6
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	041b      	lsls	r3, r3, #16
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	061b      	lsls	r3, r3, #24
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	071b      	lsls	r3, r3, #28
 8004cee:	491b      	ldr	r1, [pc, #108]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf4:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a18      	ldr	r2, [pc, #96]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fe fe62 	bl	80039c8 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fe fe5e 	bl	80039c8 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e05f      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1a:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x47c>
 8004d26:	e057      	b.n	8004dd8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a0b      	ldr	r2, [pc, #44]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fe fe48 	bl	80039c8 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fe fe44 	bl	80039c8 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e045      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4e:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <HAL_RCC_OscConfig+0x4d0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x4b0>
 8004d5a:	e03d      	b.n	8004dd8 <HAL_RCC_OscConfig+0x54c>
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d64:	4b1f      	ldr	r3, [pc, #124]	; (8004de4 <HAL_RCC_OscConfig+0x558>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d030      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d129      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d122      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d119      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	3b01      	subs	r3, #1
 8004dae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d10f      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d107      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800

08004de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0d0      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e00:	4b6a      	ldr	r3, [pc, #424]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d910      	bls.n	8004e30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b67      	ldr	r3, [pc, #412]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 020f 	bic.w	r2, r3, #15
 8004e16:	4965      	ldr	r1, [pc, #404]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1e:	4b63      	ldr	r3, [pc, #396]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0b8      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d020      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e48:	4b59      	ldr	r3, [pc, #356]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4a58      	ldr	r2, [pc, #352]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0308 	and.w	r3, r3, #8
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e60:	4b53      	ldr	r3, [pc, #332]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4a52      	ldr	r2, [pc, #328]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e6c:	4b50      	ldr	r3, [pc, #320]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	494d      	ldr	r1, [pc, #308]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d040      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e92:	4b47      	ldr	r3, [pc, #284]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d115      	bne.n	8004eca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e07f      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eaa:	4b41      	ldr	r3, [pc, #260]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e073      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eba:	4b3d      	ldr	r3, [pc, #244]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e06b      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eca:	4b39      	ldr	r3, [pc, #228]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 0203 	bic.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4936      	ldr	r1, [pc, #216]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004edc:	f7fe fd74 	bl	80039c8 <HAL_GetTick>
 8004ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee4:	f7fe fd70 	bl	80039c8 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e053      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efa:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 020c 	and.w	r2, r3, #12
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d1eb      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b27      	ldr	r3, [pc, #156]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d210      	bcs.n	8004f3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b24      	ldr	r3, [pc, #144]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f023 020f 	bic.w	r2, r3, #15
 8004f22:	4922      	ldr	r1, [pc, #136]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2a:	4b20      	ldr	r3, [pc, #128]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e032      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f48:	4b19      	ldr	r3, [pc, #100]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	4916      	ldr	r1, [pc, #88]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f66:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	490e      	ldr	r1, [pc, #56]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f7a:	f000 f821 	bl	8004fc0 <HAL_RCC_GetSysClockFreq>
 8004f7e:	4601      	mov	r1, r0
 8004f80:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <HAL_RCC_ClockConfig+0x1cc>)
 8004f8c:	5cd3      	ldrb	r3, [r2, r3]
 8004f8e:	fa21 f303 	lsr.w	r3, r1, r3
 8004f92:	4a09      	ldr	r2, [pc, #36]	; (8004fb8 <HAL_RCC_ClockConfig+0x1d0>)
 8004f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f96:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_RCC_ClockConfig+0x1d4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe fcd0 	bl	8003940 <HAL_InitTick>

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40023c00 	.word	0x40023c00
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	08007400 	.word	0x08007400
 8004fb8:	20000010 	.word	0x20000010
 8004fbc:	20000014 	.word	0x20000014

08004fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	607b      	str	r3, [r7, #4]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fd6:	4b63      	ldr	r3, [pc, #396]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d007      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x32>
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d008      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x38>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f040 80b4 	bne.w	8005154 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fec:	4b5e      	ldr	r3, [pc, #376]	; (8005168 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004fee:	60bb      	str	r3, [r7, #8]
      break;
 8004ff0:	e0b3      	b.n	800515a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ff2:	4b5d      	ldr	r3, [pc, #372]	; (8005168 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ff4:	60bb      	str	r3, [r7, #8]
      break;
 8004ff6:	e0b0      	b.n	800515a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff8:	4b5a      	ldr	r3, [pc, #360]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005000:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005002:	4b58      	ldr	r3, [pc, #352]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d04a      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500e:	4b55      	ldr	r3, [pc, #340]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	099b      	lsrs	r3, r3, #6
 8005014:	f04f 0400 	mov.w	r4, #0
 8005018:	f240 11ff 	movw	r1, #511	; 0x1ff
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	ea03 0501 	and.w	r5, r3, r1
 8005024:	ea04 0602 	and.w	r6, r4, r2
 8005028:	4629      	mov	r1, r5
 800502a:	4632      	mov	r2, r6
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	f04f 0400 	mov.w	r4, #0
 8005034:	0154      	lsls	r4, r2, #5
 8005036:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800503a:	014b      	lsls	r3, r1, #5
 800503c:	4619      	mov	r1, r3
 800503e:	4622      	mov	r2, r4
 8005040:	1b49      	subs	r1, r1, r5
 8005042:	eb62 0206 	sbc.w	r2, r2, r6
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	f04f 0400 	mov.w	r4, #0
 800504e:	0194      	lsls	r4, r2, #6
 8005050:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005054:	018b      	lsls	r3, r1, #6
 8005056:	1a5b      	subs	r3, r3, r1
 8005058:	eb64 0402 	sbc.w	r4, r4, r2
 800505c:	f04f 0100 	mov.w	r1, #0
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	00e2      	lsls	r2, r4, #3
 8005066:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800506a:	00d9      	lsls	r1, r3, #3
 800506c:	460b      	mov	r3, r1
 800506e:	4614      	mov	r4, r2
 8005070:	195b      	adds	r3, r3, r5
 8005072:	eb44 0406 	adc.w	r4, r4, r6
 8005076:	f04f 0100 	mov.w	r1, #0
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	02a2      	lsls	r2, r4, #10
 8005080:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005084:	0299      	lsls	r1, r3, #10
 8005086:	460b      	mov	r3, r1
 8005088:	4614      	mov	r4, r2
 800508a:	4618      	mov	r0, r3
 800508c:	4621      	mov	r1, r4
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f04f 0400 	mov.w	r4, #0
 8005094:	461a      	mov	r2, r3
 8005096:	4623      	mov	r3, r4
 8005098:	f7fb f922 	bl	80002e0 <__aeabi_uldivmod>
 800509c:	4603      	mov	r3, r0
 800509e:	460c      	mov	r4, r1
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	e049      	b.n	8005138 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a4:	4b2f      	ldr	r3, [pc, #188]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	099b      	lsrs	r3, r3, #6
 80050aa:	f04f 0400 	mov.w	r4, #0
 80050ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	ea03 0501 	and.w	r5, r3, r1
 80050ba:	ea04 0602 	and.w	r6, r4, r2
 80050be:	4629      	mov	r1, r5
 80050c0:	4632      	mov	r2, r6
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	f04f 0400 	mov.w	r4, #0
 80050ca:	0154      	lsls	r4, r2, #5
 80050cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050d0:	014b      	lsls	r3, r1, #5
 80050d2:	4619      	mov	r1, r3
 80050d4:	4622      	mov	r2, r4
 80050d6:	1b49      	subs	r1, r1, r5
 80050d8:	eb62 0206 	sbc.w	r2, r2, r6
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	f04f 0400 	mov.w	r4, #0
 80050e4:	0194      	lsls	r4, r2, #6
 80050e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050ea:	018b      	lsls	r3, r1, #6
 80050ec:	1a5b      	subs	r3, r3, r1
 80050ee:	eb64 0402 	sbc.w	r4, r4, r2
 80050f2:	f04f 0100 	mov.w	r1, #0
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	00e2      	lsls	r2, r4, #3
 80050fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005100:	00d9      	lsls	r1, r3, #3
 8005102:	460b      	mov	r3, r1
 8005104:	4614      	mov	r4, r2
 8005106:	195b      	adds	r3, r3, r5
 8005108:	eb44 0406 	adc.w	r4, r4, r6
 800510c:	f04f 0100 	mov.w	r1, #0
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	02a2      	lsls	r2, r4, #10
 8005116:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800511a:	0299      	lsls	r1, r3, #10
 800511c:	460b      	mov	r3, r1
 800511e:	4614      	mov	r4, r2
 8005120:	4618      	mov	r0, r3
 8005122:	4621      	mov	r1, r4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f04f 0400 	mov.w	r4, #0
 800512a:	461a      	mov	r2, r3
 800512c:	4623      	mov	r3, r4
 800512e:	f7fb f8d7 	bl	80002e0 <__aeabi_uldivmod>
 8005132:	4603      	mov	r3, r0
 8005134:	460c      	mov	r4, r1
 8005136:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005138:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	0c1b      	lsrs	r3, r3, #16
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	3301      	adds	r3, #1
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005150:	60bb      	str	r3, [r7, #8]
      break;
 8005152:	e002      	b.n	800515a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005154:	4b04      	ldr	r3, [pc, #16]	; (8005168 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005156:	60bb      	str	r3, [r7, #8]
      break;
 8005158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800515a:	68bb      	ldr	r3, [r7, #8]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005164:	40023800 	.word	0x40023800
 8005168:	00f42400 	.word	0x00f42400

0800516c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e09d      	b.n	80052ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d108      	bne.n	8005198 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800518e:	d009      	beq.n	80051a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	61da      	str	r2, [r3, #28]
 8005196:	e005      	b.n	80051a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fd fe66 	bl	8002e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051e4:	d902      	bls.n	80051ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	e002      	b.n	80051f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80051fa:	d007      	beq.n	800520c <HAL_SPI_Init+0xa0>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005204:	d002      	beq.n	800520c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	ea42 0103 	orr.w	r1, r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	f003 0204 	and.w	r2, r3, #4
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005288:	ea42 0103 	orr.w	r1, r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b088      	sub	sp, #32
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	603b      	str	r3, [r7, #0]
 80052ce:	4613      	mov	r3, r2
 80052d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_SPI_Transmit+0x22>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e158      	b.n	8005596 <HAL_SPI_Transmit+0x2d4>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052ec:	f7fe fb6c 	bl	80039c8 <HAL_GetTick>
 80052f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d002      	beq.n	8005308 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005302:	2302      	movs	r3, #2
 8005304:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005306:	e13d      	b.n	8005584 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_SPI_Transmit+0x52>
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005318:	e134      	b.n	8005584 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2203      	movs	r2, #3
 800531e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	88fa      	ldrh	r2, [r7, #6]
 8005332:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	88fa      	ldrh	r2, [r7, #6]
 8005338:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005364:	d10f      	bne.n	8005386 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005374:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005384:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d007      	beq.n	80053a4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053ac:	d94b      	bls.n	8005446 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_SPI_Transmit+0xfa>
 80053b6:	8afb      	ldrh	r3, [r7, #22]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d13e      	bne.n	800543a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	881a      	ldrh	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	1c9a      	adds	r2, r3, #2
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053e0:	e02b      	b.n	800543a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d112      	bne.n	8005416 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	881a      	ldrh	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	1c9a      	adds	r2, r3, #2
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005414:	e011      	b.n	800543a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005416:	f7fe fad7 	bl	80039c8 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d803      	bhi.n	800542e <HAL_SPI_Transmit+0x16c>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542c:	d102      	bne.n	8005434 <HAL_SPI_Transmit+0x172>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d102      	bne.n	800543a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005438:	e0a4      	b.n	8005584 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1ce      	bne.n	80053e2 <HAL_SPI_Transmit+0x120>
 8005444:	e07c      	b.n	8005540 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <HAL_SPI_Transmit+0x192>
 800544e:	8afb      	ldrh	r3, [r7, #22]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d170      	bne.n	8005536 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b01      	cmp	r3, #1
 800545c:	d912      	bls.n	8005484 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	881a      	ldrh	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	1c9a      	adds	r2, r3, #2
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b02      	subs	r3, #2
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005482:	e058      	b.n	8005536 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	7812      	ldrb	r2, [r2, #0]
 8005490:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80054aa:	e044      	b.n	8005536 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d12b      	bne.n	8005512 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d912      	bls.n	80054ea <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	881a      	ldrh	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	1c9a      	adds	r2, r3, #2
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b02      	subs	r3, #2
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054e8:	e025      	b.n	8005536 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	330c      	adds	r3, #12
 80054f4:	7812      	ldrb	r2, [r2, #0]
 80054f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005510:	e011      	b.n	8005536 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005512:	f7fe fa59 	bl	80039c8 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d803      	bhi.n	800552a <HAL_SPI_Transmit+0x268>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d102      	bne.n	8005530 <HAL_SPI_Transmit+0x26e>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005534:	e026      	b.n	8005584 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1b5      	bne.n	80054ac <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f945 	bl	80057d4 <SPI_EndRxTxTransaction>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800555e:	2300      	movs	r3, #0
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e000      	b.n	8005584 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005582:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005594:	7ffb      	ldrb	r3, [r7, #31]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055b0:	f7fe fa0a 	bl	80039c8 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	4413      	add	r3, r2
 80055be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055c0:	f7fe fa02 	bl	80039c8 <HAL_GetTick>
 80055c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055c6:	4b39      	ldr	r3, [pc, #228]	; (80056ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	015b      	lsls	r3, r3, #5
 80055cc:	0d1b      	lsrs	r3, r3, #20
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	fb02 f303 	mul.w	r3, r2, r3
 80055d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055d6:	e054      	b.n	8005682 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d050      	beq.n	8005682 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055e0:	f7fe f9f2 	bl	80039c8 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d902      	bls.n	80055f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d13d      	bne.n	8005672 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005604:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800560e:	d111      	bne.n	8005634 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005618:	d004      	beq.n	8005624 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005622:	d107      	bne.n	8005634 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005632:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800563c:	d10f      	bne.n	800565e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800565c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e017      	b.n	80056a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	3b01      	subs	r3, #1
 8005680:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4013      	ands	r3, r2
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	429a      	cmp	r2, r3
 8005690:	bf0c      	ite	eq
 8005692:	2301      	moveq	r3, #1
 8005694:	2300      	movne	r3, #0
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	429a      	cmp	r2, r3
 800569e:	d19b      	bne.n	80055d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3720      	adds	r7, #32
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000010 	.word	0x20000010

080056b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80056be:	f7fe f983 	bl	80039c8 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	4413      	add	r3, r2
 80056cc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056ce:	f7fe f97b 	bl	80039c8 <HAL_GetTick>
 80056d2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80056d4:	4b3e      	ldr	r3, [pc, #248]	; (80057d0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	00da      	lsls	r2, r3, #3
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	0d1b      	lsrs	r3, r3, #20
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
 80056ea:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80056ec:	e062      	b.n	80057b4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80056f4:	d109      	bne.n	800570a <SPI_WaitFifoStateUntilTimeout+0x5a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d106      	bne.n	800570a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005708:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d050      	beq.n	80057b4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005712:	f7fe f959 	bl	80039c8 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	429a      	cmp	r2, r3
 8005720:	d902      	bls.n	8005728 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d13d      	bne.n	80057a4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005736:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005740:	d111      	bne.n	8005766 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800574a:	d004      	beq.n	8005756 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005754:	d107      	bne.n	8005766 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005764:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576e:	d10f      	bne.n	8005790 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800578e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e010      	b.n	80057c6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4013      	ands	r3, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d194      	bne.n	80056ee <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000010 	.word	0x20000010

080057d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f7ff ff5f 	bl	80056b0 <SPI_WaitFifoStateUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e027      	b.n	8005858 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2200      	movs	r2, #0
 8005810:	2180      	movs	r1, #128	; 0x80
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff fec4 	bl	80055a0 <SPI_WaitFlagStateUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005822:	f043 0220 	orr.w	r2, r3, #32
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e014      	b.n	8005858 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2200      	movs	r2, #0
 8005836:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff ff38 	bl	80056b0 <SPI_WaitFifoStateUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800584a:	f043 0220 	orr.w	r2, r3, #32
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e000      	b.n	8005858 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <__errno>:
 8005860:	4b01      	ldr	r3, [pc, #4]	; (8005868 <__errno+0x8>)
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	2000001c 	.word	0x2000001c

0800586c <__libc_init_array>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	4e0d      	ldr	r6, [pc, #52]	; (80058a4 <__libc_init_array+0x38>)
 8005870:	4c0d      	ldr	r4, [pc, #52]	; (80058a8 <__libc_init_array+0x3c>)
 8005872:	1ba4      	subs	r4, r4, r6
 8005874:	10a4      	asrs	r4, r4, #2
 8005876:	2500      	movs	r5, #0
 8005878:	42a5      	cmp	r5, r4
 800587a:	d109      	bne.n	8005890 <__libc_init_array+0x24>
 800587c:	4e0b      	ldr	r6, [pc, #44]	; (80058ac <__libc_init_array+0x40>)
 800587e:	4c0c      	ldr	r4, [pc, #48]	; (80058b0 <__libc_init_array+0x44>)
 8005880:	f000 fc64 	bl	800614c <_init>
 8005884:	1ba4      	subs	r4, r4, r6
 8005886:	10a4      	asrs	r4, r4, #2
 8005888:	2500      	movs	r5, #0
 800588a:	42a5      	cmp	r5, r4
 800588c:	d105      	bne.n	800589a <__libc_init_array+0x2e>
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005894:	4798      	blx	r3
 8005896:	3501      	adds	r5, #1
 8005898:	e7ee      	b.n	8005878 <__libc_init_array+0xc>
 800589a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800589e:	4798      	blx	r3
 80058a0:	3501      	adds	r5, #1
 80058a2:	e7f2      	b.n	800588a <__libc_init_array+0x1e>
 80058a4:	0800744c 	.word	0x0800744c
 80058a8:	0800744c 	.word	0x0800744c
 80058ac:	0800744c 	.word	0x0800744c
 80058b0:	08007450 	.word	0x08007450

080058b4 <memcpy>:
 80058b4:	b510      	push	{r4, lr}
 80058b6:	1e43      	subs	r3, r0, #1
 80058b8:	440a      	add	r2, r1
 80058ba:	4291      	cmp	r1, r2
 80058bc:	d100      	bne.n	80058c0 <memcpy+0xc>
 80058be:	bd10      	pop	{r4, pc}
 80058c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058c8:	e7f7      	b.n	80058ba <memcpy+0x6>

080058ca <memset>:
 80058ca:	4402      	add	r2, r0
 80058cc:	4603      	mov	r3, r0
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d100      	bne.n	80058d4 <memset+0xa>
 80058d2:	4770      	bx	lr
 80058d4:	f803 1b01 	strb.w	r1, [r3], #1
 80058d8:	e7f9      	b.n	80058ce <memset+0x4>
	...

080058dc <rand>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4b13      	ldr	r3, [pc, #76]	; (800592c <rand+0x50>)
 80058e0:	681c      	ldr	r4, [r3, #0]
 80058e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058e4:	b97b      	cbnz	r3, 8005906 <rand+0x2a>
 80058e6:	2018      	movs	r0, #24
 80058e8:	f000 f84c 	bl	8005984 <malloc>
 80058ec:	4a10      	ldr	r2, [pc, #64]	; (8005930 <rand+0x54>)
 80058ee:	4b11      	ldr	r3, [pc, #68]	; (8005934 <rand+0x58>)
 80058f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80058f2:	e9c0 2300 	strd	r2, r3, [r0]
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <rand+0x5c>)
 80058f8:	6083      	str	r3, [r0, #8]
 80058fa:	230b      	movs	r3, #11
 80058fc:	8183      	strh	r3, [r0, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	2300      	movs	r3, #0
 8005902:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005906:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005908:	480c      	ldr	r0, [pc, #48]	; (800593c <rand+0x60>)
 800590a:	690a      	ldr	r2, [r1, #16]
 800590c:	694b      	ldr	r3, [r1, #20]
 800590e:	4c0c      	ldr	r4, [pc, #48]	; (8005940 <rand+0x64>)
 8005910:	4350      	muls	r0, r2
 8005912:	fb04 0003 	mla	r0, r4, r3, r0
 8005916:	fba2 2304 	umull	r2, r3, r2, r4
 800591a:	4403      	add	r3, r0
 800591c:	1c54      	adds	r4, r2, #1
 800591e:	f143 0500 	adc.w	r5, r3, #0
 8005922:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8005926:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800592a:	bd38      	pop	{r3, r4, r5, pc}
 800592c:	2000001c 	.word	0x2000001c
 8005930:	abcd330e 	.word	0xabcd330e
 8005934:	e66d1234 	.word	0xe66d1234
 8005938:	0005deec 	.word	0x0005deec
 800593c:	5851f42d 	.word	0x5851f42d
 8005940:	4c957f2d 	.word	0x4c957f2d

08005944 <siprintf>:
 8005944:	b40e      	push	{r1, r2, r3}
 8005946:	b500      	push	{lr}
 8005948:	b09c      	sub	sp, #112	; 0x70
 800594a:	ab1d      	add	r3, sp, #116	; 0x74
 800594c:	9002      	str	r0, [sp, #8]
 800594e:	9006      	str	r0, [sp, #24]
 8005950:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005954:	4809      	ldr	r0, [pc, #36]	; (800597c <siprintf+0x38>)
 8005956:	9107      	str	r1, [sp, #28]
 8005958:	9104      	str	r1, [sp, #16]
 800595a:	4909      	ldr	r1, [pc, #36]	; (8005980 <siprintf+0x3c>)
 800595c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005960:	9105      	str	r1, [sp, #20]
 8005962:	6800      	ldr	r0, [r0, #0]
 8005964:	9301      	str	r3, [sp, #4]
 8005966:	a902      	add	r1, sp, #8
 8005968:	f000 f916 	bl	8005b98 <_svfiprintf_r>
 800596c:	9b02      	ldr	r3, [sp, #8]
 800596e:	2200      	movs	r2, #0
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	b01c      	add	sp, #112	; 0x70
 8005974:	f85d eb04 	ldr.w	lr, [sp], #4
 8005978:	b003      	add	sp, #12
 800597a:	4770      	bx	lr
 800597c:	2000001c 	.word	0x2000001c
 8005980:	ffff0208 	.word	0xffff0208

08005984 <malloc>:
 8005984:	4b02      	ldr	r3, [pc, #8]	; (8005990 <malloc+0xc>)
 8005986:	4601      	mov	r1, r0
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	f000 b851 	b.w	8005a30 <_malloc_r>
 800598e:	bf00      	nop
 8005990:	2000001c 	.word	0x2000001c

08005994 <_free_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4605      	mov	r5, r0
 8005998:	2900      	cmp	r1, #0
 800599a:	d045      	beq.n	8005a28 <_free_r+0x94>
 800599c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059a0:	1f0c      	subs	r4, r1, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	bfb8      	it	lt
 80059a6:	18e4      	addlt	r4, r4, r3
 80059a8:	f000 fb9f 	bl	80060ea <__malloc_lock>
 80059ac:	4a1f      	ldr	r2, [pc, #124]	; (8005a2c <_free_r+0x98>)
 80059ae:	6813      	ldr	r3, [r2, #0]
 80059b0:	4610      	mov	r0, r2
 80059b2:	b933      	cbnz	r3, 80059c2 <_free_r+0x2e>
 80059b4:	6063      	str	r3, [r4, #4]
 80059b6:	6014      	str	r4, [r2, #0]
 80059b8:	4628      	mov	r0, r5
 80059ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059be:	f000 bb95 	b.w	80060ec <__malloc_unlock>
 80059c2:	42a3      	cmp	r3, r4
 80059c4:	d90c      	bls.n	80059e0 <_free_r+0x4c>
 80059c6:	6821      	ldr	r1, [r4, #0]
 80059c8:	1862      	adds	r2, r4, r1
 80059ca:	4293      	cmp	r3, r2
 80059cc:	bf04      	itt	eq
 80059ce:	681a      	ldreq	r2, [r3, #0]
 80059d0:	685b      	ldreq	r3, [r3, #4]
 80059d2:	6063      	str	r3, [r4, #4]
 80059d4:	bf04      	itt	eq
 80059d6:	1852      	addeq	r2, r2, r1
 80059d8:	6022      	streq	r2, [r4, #0]
 80059da:	6004      	str	r4, [r0, #0]
 80059dc:	e7ec      	b.n	80059b8 <_free_r+0x24>
 80059de:	4613      	mov	r3, r2
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	b10a      	cbz	r2, 80059e8 <_free_r+0x54>
 80059e4:	42a2      	cmp	r2, r4
 80059e6:	d9fa      	bls.n	80059de <_free_r+0x4a>
 80059e8:	6819      	ldr	r1, [r3, #0]
 80059ea:	1858      	adds	r0, r3, r1
 80059ec:	42a0      	cmp	r0, r4
 80059ee:	d10b      	bne.n	8005a08 <_free_r+0x74>
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	4401      	add	r1, r0
 80059f4:	1858      	adds	r0, r3, r1
 80059f6:	4282      	cmp	r2, r0
 80059f8:	6019      	str	r1, [r3, #0]
 80059fa:	d1dd      	bne.n	80059b8 <_free_r+0x24>
 80059fc:	6810      	ldr	r0, [r2, #0]
 80059fe:	6852      	ldr	r2, [r2, #4]
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	4401      	add	r1, r0
 8005a04:	6019      	str	r1, [r3, #0]
 8005a06:	e7d7      	b.n	80059b8 <_free_r+0x24>
 8005a08:	d902      	bls.n	8005a10 <_free_r+0x7c>
 8005a0a:	230c      	movs	r3, #12
 8005a0c:	602b      	str	r3, [r5, #0]
 8005a0e:	e7d3      	b.n	80059b8 <_free_r+0x24>
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	1821      	adds	r1, r4, r0
 8005a14:	428a      	cmp	r2, r1
 8005a16:	bf04      	itt	eq
 8005a18:	6811      	ldreq	r1, [r2, #0]
 8005a1a:	6852      	ldreq	r2, [r2, #4]
 8005a1c:	6062      	str	r2, [r4, #4]
 8005a1e:	bf04      	itt	eq
 8005a20:	1809      	addeq	r1, r1, r0
 8005a22:	6021      	streq	r1, [r4, #0]
 8005a24:	605c      	str	r4, [r3, #4]
 8005a26:	e7c7      	b.n	80059b8 <_free_r+0x24>
 8005a28:	bd38      	pop	{r3, r4, r5, pc}
 8005a2a:	bf00      	nop
 8005a2c:	200004a8 	.word	0x200004a8

08005a30 <_malloc_r>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	1ccd      	adds	r5, r1, #3
 8005a34:	f025 0503 	bic.w	r5, r5, #3
 8005a38:	3508      	adds	r5, #8
 8005a3a:	2d0c      	cmp	r5, #12
 8005a3c:	bf38      	it	cc
 8005a3e:	250c      	movcc	r5, #12
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	4606      	mov	r6, r0
 8005a44:	db01      	blt.n	8005a4a <_malloc_r+0x1a>
 8005a46:	42a9      	cmp	r1, r5
 8005a48:	d903      	bls.n	8005a52 <_malloc_r+0x22>
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	6033      	str	r3, [r6, #0]
 8005a4e:	2000      	movs	r0, #0
 8005a50:	bd70      	pop	{r4, r5, r6, pc}
 8005a52:	f000 fb4a 	bl	80060ea <__malloc_lock>
 8005a56:	4a21      	ldr	r2, [pc, #132]	; (8005adc <_malloc_r+0xac>)
 8005a58:	6814      	ldr	r4, [r2, #0]
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	b991      	cbnz	r1, 8005a84 <_malloc_r+0x54>
 8005a5e:	4c20      	ldr	r4, [pc, #128]	; (8005ae0 <_malloc_r+0xb0>)
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	b91b      	cbnz	r3, 8005a6c <_malloc_r+0x3c>
 8005a64:	4630      	mov	r0, r6
 8005a66:	f000 fb17 	bl	8006098 <_sbrk_r>
 8005a6a:	6020      	str	r0, [r4, #0]
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f000 fb12 	bl	8006098 <_sbrk_r>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d124      	bne.n	8005ac2 <_malloc_r+0x92>
 8005a78:	230c      	movs	r3, #12
 8005a7a:	6033      	str	r3, [r6, #0]
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f000 fb35 	bl	80060ec <__malloc_unlock>
 8005a82:	e7e4      	b.n	8005a4e <_malloc_r+0x1e>
 8005a84:	680b      	ldr	r3, [r1, #0]
 8005a86:	1b5b      	subs	r3, r3, r5
 8005a88:	d418      	bmi.n	8005abc <_malloc_r+0x8c>
 8005a8a:	2b0b      	cmp	r3, #11
 8005a8c:	d90f      	bls.n	8005aae <_malloc_r+0x7e>
 8005a8e:	600b      	str	r3, [r1, #0]
 8005a90:	50cd      	str	r5, [r1, r3]
 8005a92:	18cc      	adds	r4, r1, r3
 8005a94:	4630      	mov	r0, r6
 8005a96:	f000 fb29 	bl	80060ec <__malloc_unlock>
 8005a9a:	f104 000b 	add.w	r0, r4, #11
 8005a9e:	1d23      	adds	r3, r4, #4
 8005aa0:	f020 0007 	bic.w	r0, r0, #7
 8005aa4:	1ac3      	subs	r3, r0, r3
 8005aa6:	d0d3      	beq.n	8005a50 <_malloc_r+0x20>
 8005aa8:	425a      	negs	r2, r3
 8005aaa:	50e2      	str	r2, [r4, r3]
 8005aac:	e7d0      	b.n	8005a50 <_malloc_r+0x20>
 8005aae:	428c      	cmp	r4, r1
 8005ab0:	684b      	ldr	r3, [r1, #4]
 8005ab2:	bf16      	itet	ne
 8005ab4:	6063      	strne	r3, [r4, #4]
 8005ab6:	6013      	streq	r3, [r2, #0]
 8005ab8:	460c      	movne	r4, r1
 8005aba:	e7eb      	b.n	8005a94 <_malloc_r+0x64>
 8005abc:	460c      	mov	r4, r1
 8005abe:	6849      	ldr	r1, [r1, #4]
 8005ac0:	e7cc      	b.n	8005a5c <_malloc_r+0x2c>
 8005ac2:	1cc4      	adds	r4, r0, #3
 8005ac4:	f024 0403 	bic.w	r4, r4, #3
 8005ac8:	42a0      	cmp	r0, r4
 8005aca:	d005      	beq.n	8005ad8 <_malloc_r+0xa8>
 8005acc:	1a21      	subs	r1, r4, r0
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f000 fae2 	bl	8006098 <_sbrk_r>
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d0cf      	beq.n	8005a78 <_malloc_r+0x48>
 8005ad8:	6025      	str	r5, [r4, #0]
 8005ada:	e7db      	b.n	8005a94 <_malloc_r+0x64>
 8005adc:	200004a8 	.word	0x200004a8
 8005ae0:	200004ac 	.word	0x200004ac

08005ae4 <__ssputs_r>:
 8005ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	688e      	ldr	r6, [r1, #8]
 8005aea:	429e      	cmp	r6, r3
 8005aec:	4682      	mov	sl, r0
 8005aee:	460c      	mov	r4, r1
 8005af0:	4690      	mov	r8, r2
 8005af2:	4699      	mov	r9, r3
 8005af4:	d837      	bhi.n	8005b66 <__ssputs_r+0x82>
 8005af6:	898a      	ldrh	r2, [r1, #12]
 8005af8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005afc:	d031      	beq.n	8005b62 <__ssputs_r+0x7e>
 8005afe:	6825      	ldr	r5, [r4, #0]
 8005b00:	6909      	ldr	r1, [r1, #16]
 8005b02:	1a6f      	subs	r7, r5, r1
 8005b04:	6965      	ldr	r5, [r4, #20]
 8005b06:	2302      	movs	r3, #2
 8005b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005b10:	f109 0301 	add.w	r3, r9, #1
 8005b14:	443b      	add	r3, r7
 8005b16:	429d      	cmp	r5, r3
 8005b18:	bf38      	it	cc
 8005b1a:	461d      	movcc	r5, r3
 8005b1c:	0553      	lsls	r3, r2, #21
 8005b1e:	d530      	bpl.n	8005b82 <__ssputs_r+0x9e>
 8005b20:	4629      	mov	r1, r5
 8005b22:	f7ff ff85 	bl	8005a30 <_malloc_r>
 8005b26:	4606      	mov	r6, r0
 8005b28:	b950      	cbnz	r0, 8005b40 <__ssputs_r+0x5c>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	f8ca 3000 	str.w	r3, [sl]
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b40:	463a      	mov	r2, r7
 8005b42:	6921      	ldr	r1, [r4, #16]
 8005b44:	f7ff feb6 	bl	80058b4 <memcpy>
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b52:	81a3      	strh	r3, [r4, #12]
 8005b54:	6126      	str	r6, [r4, #16]
 8005b56:	6165      	str	r5, [r4, #20]
 8005b58:	443e      	add	r6, r7
 8005b5a:	1bed      	subs	r5, r5, r7
 8005b5c:	6026      	str	r6, [r4, #0]
 8005b5e:	60a5      	str	r5, [r4, #8]
 8005b60:	464e      	mov	r6, r9
 8005b62:	454e      	cmp	r6, r9
 8005b64:	d900      	bls.n	8005b68 <__ssputs_r+0x84>
 8005b66:	464e      	mov	r6, r9
 8005b68:	4632      	mov	r2, r6
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	6820      	ldr	r0, [r4, #0]
 8005b6e:	f000 faa3 	bl	80060b8 <memmove>
 8005b72:	68a3      	ldr	r3, [r4, #8]
 8005b74:	1b9b      	subs	r3, r3, r6
 8005b76:	60a3      	str	r3, [r4, #8]
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	441e      	add	r6, r3
 8005b7c:	6026      	str	r6, [r4, #0]
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e7dc      	b.n	8005b3c <__ssputs_r+0x58>
 8005b82:	462a      	mov	r2, r5
 8005b84:	f000 fab3 	bl	80060ee <_realloc_r>
 8005b88:	4606      	mov	r6, r0
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d1e2      	bne.n	8005b54 <__ssputs_r+0x70>
 8005b8e:	6921      	ldr	r1, [r4, #16]
 8005b90:	4650      	mov	r0, sl
 8005b92:	f7ff feff 	bl	8005994 <_free_r>
 8005b96:	e7c8      	b.n	8005b2a <__ssputs_r+0x46>

08005b98 <_svfiprintf_r>:
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	461d      	mov	r5, r3
 8005b9e:	898b      	ldrh	r3, [r1, #12]
 8005ba0:	061f      	lsls	r7, r3, #24
 8005ba2:	b09d      	sub	sp, #116	; 0x74
 8005ba4:	4680      	mov	r8, r0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	4616      	mov	r6, r2
 8005baa:	d50f      	bpl.n	8005bcc <_svfiprintf_r+0x34>
 8005bac:	690b      	ldr	r3, [r1, #16]
 8005bae:	b96b      	cbnz	r3, 8005bcc <_svfiprintf_r+0x34>
 8005bb0:	2140      	movs	r1, #64	; 0x40
 8005bb2:	f7ff ff3d 	bl	8005a30 <_malloc_r>
 8005bb6:	6020      	str	r0, [r4, #0]
 8005bb8:	6120      	str	r0, [r4, #16]
 8005bba:	b928      	cbnz	r0, 8005bc8 <_svfiprintf_r+0x30>
 8005bbc:	230c      	movs	r3, #12
 8005bbe:	f8c8 3000 	str.w	r3, [r8]
 8005bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc6:	e0c8      	b.n	8005d5a <_svfiprintf_r+0x1c2>
 8005bc8:	2340      	movs	r3, #64	; 0x40
 8005bca:	6163      	str	r3, [r4, #20]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd0:	2320      	movs	r3, #32
 8005bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bd6:	2330      	movs	r3, #48	; 0x30
 8005bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bdc:	9503      	str	r5, [sp, #12]
 8005bde:	f04f 0b01 	mov.w	fp, #1
 8005be2:	4637      	mov	r7, r6
 8005be4:	463d      	mov	r5, r7
 8005be6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005bea:	b10b      	cbz	r3, 8005bf0 <_svfiprintf_r+0x58>
 8005bec:	2b25      	cmp	r3, #37	; 0x25
 8005bee:	d13e      	bne.n	8005c6e <_svfiprintf_r+0xd6>
 8005bf0:	ebb7 0a06 	subs.w	sl, r7, r6
 8005bf4:	d00b      	beq.n	8005c0e <_svfiprintf_r+0x76>
 8005bf6:	4653      	mov	r3, sl
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	f7ff ff71 	bl	8005ae4 <__ssputs_r>
 8005c02:	3001      	adds	r0, #1
 8005c04:	f000 80a4 	beq.w	8005d50 <_svfiprintf_r+0x1b8>
 8005c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c0a:	4453      	add	r3, sl
 8005c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c0e:	783b      	ldrb	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 809d 	beq.w	8005d50 <_svfiprintf_r+0x1b8>
 8005c16:	2300      	movs	r3, #0
 8005c18:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c20:	9304      	str	r3, [sp, #16]
 8005c22:	9307      	str	r3, [sp, #28]
 8005c24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c28:	931a      	str	r3, [sp, #104]	; 0x68
 8005c2a:	462f      	mov	r7, r5
 8005c2c:	2205      	movs	r2, #5
 8005c2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005c32:	4850      	ldr	r0, [pc, #320]	; (8005d74 <_svfiprintf_r+0x1dc>)
 8005c34:	f7fa fb04 	bl	8000240 <memchr>
 8005c38:	9b04      	ldr	r3, [sp, #16]
 8005c3a:	b9d0      	cbnz	r0, 8005c72 <_svfiprintf_r+0xda>
 8005c3c:	06d9      	lsls	r1, r3, #27
 8005c3e:	bf44      	itt	mi
 8005c40:	2220      	movmi	r2, #32
 8005c42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c46:	071a      	lsls	r2, r3, #28
 8005c48:	bf44      	itt	mi
 8005c4a:	222b      	movmi	r2, #43	; 0x2b
 8005c4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c50:	782a      	ldrb	r2, [r5, #0]
 8005c52:	2a2a      	cmp	r2, #42	; 0x2a
 8005c54:	d015      	beq.n	8005c82 <_svfiprintf_r+0xea>
 8005c56:	9a07      	ldr	r2, [sp, #28]
 8005c58:	462f      	mov	r7, r5
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	250a      	movs	r5, #10
 8005c5e:	4639      	mov	r1, r7
 8005c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c64:	3b30      	subs	r3, #48	; 0x30
 8005c66:	2b09      	cmp	r3, #9
 8005c68:	d94d      	bls.n	8005d06 <_svfiprintf_r+0x16e>
 8005c6a:	b1b8      	cbz	r0, 8005c9c <_svfiprintf_r+0x104>
 8005c6c:	e00f      	b.n	8005c8e <_svfiprintf_r+0xf6>
 8005c6e:	462f      	mov	r7, r5
 8005c70:	e7b8      	b.n	8005be4 <_svfiprintf_r+0x4c>
 8005c72:	4a40      	ldr	r2, [pc, #256]	; (8005d74 <_svfiprintf_r+0x1dc>)
 8005c74:	1a80      	subs	r0, r0, r2
 8005c76:	fa0b f000 	lsl.w	r0, fp, r0
 8005c7a:	4318      	orrs	r0, r3
 8005c7c:	9004      	str	r0, [sp, #16]
 8005c7e:	463d      	mov	r5, r7
 8005c80:	e7d3      	b.n	8005c2a <_svfiprintf_r+0x92>
 8005c82:	9a03      	ldr	r2, [sp, #12]
 8005c84:	1d11      	adds	r1, r2, #4
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	9103      	str	r1, [sp, #12]
 8005c8a:	2a00      	cmp	r2, #0
 8005c8c:	db01      	blt.n	8005c92 <_svfiprintf_r+0xfa>
 8005c8e:	9207      	str	r2, [sp, #28]
 8005c90:	e004      	b.n	8005c9c <_svfiprintf_r+0x104>
 8005c92:	4252      	negs	r2, r2
 8005c94:	f043 0302 	orr.w	r3, r3, #2
 8005c98:	9207      	str	r2, [sp, #28]
 8005c9a:	9304      	str	r3, [sp, #16]
 8005c9c:	783b      	ldrb	r3, [r7, #0]
 8005c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8005ca0:	d10c      	bne.n	8005cbc <_svfiprintf_r+0x124>
 8005ca2:	787b      	ldrb	r3, [r7, #1]
 8005ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca6:	d133      	bne.n	8005d10 <_svfiprintf_r+0x178>
 8005ca8:	9b03      	ldr	r3, [sp, #12]
 8005caa:	1d1a      	adds	r2, r3, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	9203      	str	r2, [sp, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	bfb8      	it	lt
 8005cb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cb8:	3702      	adds	r7, #2
 8005cba:	9305      	str	r3, [sp, #20]
 8005cbc:	4d2e      	ldr	r5, [pc, #184]	; (8005d78 <_svfiprintf_r+0x1e0>)
 8005cbe:	7839      	ldrb	r1, [r7, #0]
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f7fa fabc 	bl	8000240 <memchr>
 8005cc8:	b138      	cbz	r0, 8005cda <_svfiprintf_r+0x142>
 8005cca:	2340      	movs	r3, #64	; 0x40
 8005ccc:	1b40      	subs	r0, r0, r5
 8005cce:	fa03 f000 	lsl.w	r0, r3, r0
 8005cd2:	9b04      	ldr	r3, [sp, #16]
 8005cd4:	4303      	orrs	r3, r0
 8005cd6:	3701      	adds	r7, #1
 8005cd8:	9304      	str	r3, [sp, #16]
 8005cda:	7839      	ldrb	r1, [r7, #0]
 8005cdc:	4827      	ldr	r0, [pc, #156]	; (8005d7c <_svfiprintf_r+0x1e4>)
 8005cde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ce2:	2206      	movs	r2, #6
 8005ce4:	1c7e      	adds	r6, r7, #1
 8005ce6:	f7fa faab 	bl	8000240 <memchr>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d038      	beq.n	8005d60 <_svfiprintf_r+0x1c8>
 8005cee:	4b24      	ldr	r3, [pc, #144]	; (8005d80 <_svfiprintf_r+0x1e8>)
 8005cf0:	bb13      	cbnz	r3, 8005d38 <_svfiprintf_r+0x1a0>
 8005cf2:	9b03      	ldr	r3, [sp, #12]
 8005cf4:	3307      	adds	r3, #7
 8005cf6:	f023 0307 	bic.w	r3, r3, #7
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	9303      	str	r3, [sp, #12]
 8005cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d00:	444b      	add	r3, r9
 8005d02:	9309      	str	r3, [sp, #36]	; 0x24
 8005d04:	e76d      	b.n	8005be2 <_svfiprintf_r+0x4a>
 8005d06:	fb05 3202 	mla	r2, r5, r2, r3
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	460f      	mov	r7, r1
 8005d0e:	e7a6      	b.n	8005c5e <_svfiprintf_r+0xc6>
 8005d10:	2300      	movs	r3, #0
 8005d12:	3701      	adds	r7, #1
 8005d14:	9305      	str	r3, [sp, #20]
 8005d16:	4619      	mov	r1, r3
 8005d18:	250a      	movs	r5, #10
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d20:	3a30      	subs	r2, #48	; 0x30
 8005d22:	2a09      	cmp	r2, #9
 8005d24:	d903      	bls.n	8005d2e <_svfiprintf_r+0x196>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0c8      	beq.n	8005cbc <_svfiprintf_r+0x124>
 8005d2a:	9105      	str	r1, [sp, #20]
 8005d2c:	e7c6      	b.n	8005cbc <_svfiprintf_r+0x124>
 8005d2e:	fb05 2101 	mla	r1, r5, r1, r2
 8005d32:	2301      	movs	r3, #1
 8005d34:	4607      	mov	r7, r0
 8005d36:	e7f0      	b.n	8005d1a <_svfiprintf_r+0x182>
 8005d38:	ab03      	add	r3, sp, #12
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <_svfiprintf_r+0x1ec>)
 8005d40:	a904      	add	r1, sp, #16
 8005d42:	4640      	mov	r0, r8
 8005d44:	f3af 8000 	nop.w
 8005d48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d4c:	4681      	mov	r9, r0
 8005d4e:	d1d6      	bne.n	8005cfe <_svfiprintf_r+0x166>
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	065b      	lsls	r3, r3, #25
 8005d54:	f53f af35 	bmi.w	8005bc2 <_svfiprintf_r+0x2a>
 8005d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d5a:	b01d      	add	sp, #116	; 0x74
 8005d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d60:	ab03      	add	r3, sp, #12
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	4622      	mov	r2, r4
 8005d66:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <_svfiprintf_r+0x1ec>)
 8005d68:	a904      	add	r1, sp, #16
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	f000 f882 	bl	8005e74 <_printf_i>
 8005d70:	e7ea      	b.n	8005d48 <_svfiprintf_r+0x1b0>
 8005d72:	bf00      	nop
 8005d74:	08007410 	.word	0x08007410
 8005d78:	08007416 	.word	0x08007416
 8005d7c:	0800741a 	.word	0x0800741a
 8005d80:	00000000 	.word	0x00000000
 8005d84:	08005ae5 	.word	0x08005ae5

08005d88 <_printf_common>:
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	4691      	mov	r9, r2
 8005d8e:	461f      	mov	r7, r3
 8005d90:	688a      	ldr	r2, [r1, #8]
 8005d92:	690b      	ldr	r3, [r1, #16]
 8005d94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	bfb8      	it	lt
 8005d9c:	4613      	movlt	r3, r2
 8005d9e:	f8c9 3000 	str.w	r3, [r9]
 8005da2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005da6:	4606      	mov	r6, r0
 8005da8:	460c      	mov	r4, r1
 8005daa:	b112      	cbz	r2, 8005db2 <_printf_common+0x2a>
 8005dac:	3301      	adds	r3, #1
 8005dae:	f8c9 3000 	str.w	r3, [r9]
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	0699      	lsls	r1, r3, #26
 8005db6:	bf42      	ittt	mi
 8005db8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005dbc:	3302      	addmi	r3, #2
 8005dbe:	f8c9 3000 	strmi.w	r3, [r9]
 8005dc2:	6825      	ldr	r5, [r4, #0]
 8005dc4:	f015 0506 	ands.w	r5, r5, #6
 8005dc8:	d107      	bne.n	8005dda <_printf_common+0x52>
 8005dca:	f104 0a19 	add.w	sl, r4, #25
 8005dce:	68e3      	ldr	r3, [r4, #12]
 8005dd0:	f8d9 2000 	ldr.w	r2, [r9]
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	42ab      	cmp	r3, r5
 8005dd8:	dc28      	bgt.n	8005e2c <_printf_common+0xa4>
 8005dda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005dde:	6822      	ldr	r2, [r4, #0]
 8005de0:	3300      	adds	r3, #0
 8005de2:	bf18      	it	ne
 8005de4:	2301      	movne	r3, #1
 8005de6:	0692      	lsls	r2, r2, #26
 8005de8:	d42d      	bmi.n	8005e46 <_printf_common+0xbe>
 8005dea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dee:	4639      	mov	r1, r7
 8005df0:	4630      	mov	r0, r6
 8005df2:	47c0      	blx	r8
 8005df4:	3001      	adds	r0, #1
 8005df6:	d020      	beq.n	8005e3a <_printf_common+0xb2>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	68e5      	ldr	r5, [r4, #12]
 8005dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8005e00:	f003 0306 	and.w	r3, r3, #6
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	bf08      	it	eq
 8005e08:	1aad      	subeq	r5, r5, r2
 8005e0a:	68a3      	ldr	r3, [r4, #8]
 8005e0c:	6922      	ldr	r2, [r4, #16]
 8005e0e:	bf0c      	ite	eq
 8005e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e14:	2500      	movne	r5, #0
 8005e16:	4293      	cmp	r3, r2
 8005e18:	bfc4      	itt	gt
 8005e1a:	1a9b      	subgt	r3, r3, r2
 8005e1c:	18ed      	addgt	r5, r5, r3
 8005e1e:	f04f 0900 	mov.w	r9, #0
 8005e22:	341a      	adds	r4, #26
 8005e24:	454d      	cmp	r5, r9
 8005e26:	d11a      	bne.n	8005e5e <_printf_common+0xd6>
 8005e28:	2000      	movs	r0, #0
 8005e2a:	e008      	b.n	8005e3e <_printf_common+0xb6>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	4652      	mov	r2, sl
 8005e30:	4639      	mov	r1, r7
 8005e32:	4630      	mov	r0, r6
 8005e34:	47c0      	blx	r8
 8005e36:	3001      	adds	r0, #1
 8005e38:	d103      	bne.n	8005e42 <_printf_common+0xba>
 8005e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e42:	3501      	adds	r5, #1
 8005e44:	e7c3      	b.n	8005dce <_printf_common+0x46>
 8005e46:	18e1      	adds	r1, r4, r3
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	2030      	movs	r0, #48	; 0x30
 8005e4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e50:	4422      	add	r2, r4
 8005e52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	e7c5      	b.n	8005dea <_printf_common+0x62>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4622      	mov	r2, r4
 8005e62:	4639      	mov	r1, r7
 8005e64:	4630      	mov	r0, r6
 8005e66:	47c0      	blx	r8
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d0e6      	beq.n	8005e3a <_printf_common+0xb2>
 8005e6c:	f109 0901 	add.w	r9, r9, #1
 8005e70:	e7d8      	b.n	8005e24 <_printf_common+0x9c>
	...

08005e74 <_printf_i>:
 8005e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	7e09      	ldrb	r1, [r1, #24]
 8005e80:	b085      	sub	sp, #20
 8005e82:	296e      	cmp	r1, #110	; 0x6e
 8005e84:	4617      	mov	r7, r2
 8005e86:	4606      	mov	r6, r0
 8005e88:	4698      	mov	r8, r3
 8005e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e8c:	f000 80b3 	beq.w	8005ff6 <_printf_i+0x182>
 8005e90:	d822      	bhi.n	8005ed8 <_printf_i+0x64>
 8005e92:	2963      	cmp	r1, #99	; 0x63
 8005e94:	d036      	beq.n	8005f04 <_printf_i+0x90>
 8005e96:	d80a      	bhi.n	8005eae <_printf_i+0x3a>
 8005e98:	2900      	cmp	r1, #0
 8005e9a:	f000 80b9 	beq.w	8006010 <_printf_i+0x19c>
 8005e9e:	2958      	cmp	r1, #88	; 0x58
 8005ea0:	f000 8083 	beq.w	8005faa <_printf_i+0x136>
 8005ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005eac:	e032      	b.n	8005f14 <_printf_i+0xa0>
 8005eae:	2964      	cmp	r1, #100	; 0x64
 8005eb0:	d001      	beq.n	8005eb6 <_printf_i+0x42>
 8005eb2:	2969      	cmp	r1, #105	; 0x69
 8005eb4:	d1f6      	bne.n	8005ea4 <_printf_i+0x30>
 8005eb6:	6820      	ldr	r0, [r4, #0]
 8005eb8:	6813      	ldr	r3, [r2, #0]
 8005eba:	0605      	lsls	r5, r0, #24
 8005ebc:	f103 0104 	add.w	r1, r3, #4
 8005ec0:	d52a      	bpl.n	8005f18 <_printf_i+0xa4>
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6011      	str	r1, [r2, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da03      	bge.n	8005ed2 <_printf_i+0x5e>
 8005eca:	222d      	movs	r2, #45	; 0x2d
 8005ecc:	425b      	negs	r3, r3
 8005ece:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ed2:	486f      	ldr	r0, [pc, #444]	; (8006090 <_printf_i+0x21c>)
 8005ed4:	220a      	movs	r2, #10
 8005ed6:	e039      	b.n	8005f4c <_printf_i+0xd8>
 8005ed8:	2973      	cmp	r1, #115	; 0x73
 8005eda:	f000 809d 	beq.w	8006018 <_printf_i+0x1a4>
 8005ede:	d808      	bhi.n	8005ef2 <_printf_i+0x7e>
 8005ee0:	296f      	cmp	r1, #111	; 0x6f
 8005ee2:	d020      	beq.n	8005f26 <_printf_i+0xb2>
 8005ee4:	2970      	cmp	r1, #112	; 0x70
 8005ee6:	d1dd      	bne.n	8005ea4 <_printf_i+0x30>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	f043 0320 	orr.w	r3, r3, #32
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	e003      	b.n	8005efa <_printf_i+0x86>
 8005ef2:	2975      	cmp	r1, #117	; 0x75
 8005ef4:	d017      	beq.n	8005f26 <_printf_i+0xb2>
 8005ef6:	2978      	cmp	r1, #120	; 0x78
 8005ef8:	d1d4      	bne.n	8005ea4 <_printf_i+0x30>
 8005efa:	2378      	movs	r3, #120	; 0x78
 8005efc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f00:	4864      	ldr	r0, [pc, #400]	; (8006094 <_printf_i+0x220>)
 8005f02:	e055      	b.n	8005fb0 <_printf_i+0x13c>
 8005f04:	6813      	ldr	r3, [r2, #0]
 8005f06:	1d19      	adds	r1, r3, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6011      	str	r1, [r2, #0]
 8005f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f14:	2301      	movs	r3, #1
 8005f16:	e08c      	b.n	8006032 <_printf_i+0x1be>
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6011      	str	r1, [r2, #0]
 8005f1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f20:	bf18      	it	ne
 8005f22:	b21b      	sxthne	r3, r3
 8005f24:	e7cf      	b.n	8005ec6 <_printf_i+0x52>
 8005f26:	6813      	ldr	r3, [r2, #0]
 8005f28:	6825      	ldr	r5, [r4, #0]
 8005f2a:	1d18      	adds	r0, r3, #4
 8005f2c:	6010      	str	r0, [r2, #0]
 8005f2e:	0628      	lsls	r0, r5, #24
 8005f30:	d501      	bpl.n	8005f36 <_printf_i+0xc2>
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	e002      	b.n	8005f3c <_printf_i+0xc8>
 8005f36:	0668      	lsls	r0, r5, #25
 8005f38:	d5fb      	bpl.n	8005f32 <_printf_i+0xbe>
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	4854      	ldr	r0, [pc, #336]	; (8006090 <_printf_i+0x21c>)
 8005f3e:	296f      	cmp	r1, #111	; 0x6f
 8005f40:	bf14      	ite	ne
 8005f42:	220a      	movne	r2, #10
 8005f44:	2208      	moveq	r2, #8
 8005f46:	2100      	movs	r1, #0
 8005f48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f4c:	6865      	ldr	r5, [r4, #4]
 8005f4e:	60a5      	str	r5, [r4, #8]
 8005f50:	2d00      	cmp	r5, #0
 8005f52:	f2c0 8095 	blt.w	8006080 <_printf_i+0x20c>
 8005f56:	6821      	ldr	r1, [r4, #0]
 8005f58:	f021 0104 	bic.w	r1, r1, #4
 8005f5c:	6021      	str	r1, [r4, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d13d      	bne.n	8005fde <_printf_i+0x16a>
 8005f62:	2d00      	cmp	r5, #0
 8005f64:	f040 808e 	bne.w	8006084 <_printf_i+0x210>
 8005f68:	4665      	mov	r5, ip
 8005f6a:	2a08      	cmp	r2, #8
 8005f6c:	d10b      	bne.n	8005f86 <_printf_i+0x112>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	07db      	lsls	r3, r3, #31
 8005f72:	d508      	bpl.n	8005f86 <_printf_i+0x112>
 8005f74:	6923      	ldr	r3, [r4, #16]
 8005f76:	6862      	ldr	r2, [r4, #4]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	bfde      	ittt	le
 8005f7c:	2330      	movle	r3, #48	; 0x30
 8005f7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f86:	ebac 0305 	sub.w	r3, ip, r5
 8005f8a:	6123      	str	r3, [r4, #16]
 8005f8c:	f8cd 8000 	str.w	r8, [sp]
 8005f90:	463b      	mov	r3, r7
 8005f92:	aa03      	add	r2, sp, #12
 8005f94:	4621      	mov	r1, r4
 8005f96:	4630      	mov	r0, r6
 8005f98:	f7ff fef6 	bl	8005d88 <_printf_common>
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d14d      	bne.n	800603c <_printf_i+0x1c8>
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa4:	b005      	add	sp, #20
 8005fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005faa:	4839      	ldr	r0, [pc, #228]	; (8006090 <_printf_i+0x21c>)
 8005fac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005fb0:	6813      	ldr	r3, [r2, #0]
 8005fb2:	6821      	ldr	r1, [r4, #0]
 8005fb4:	1d1d      	adds	r5, r3, #4
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6015      	str	r5, [r2, #0]
 8005fba:	060a      	lsls	r2, r1, #24
 8005fbc:	d50b      	bpl.n	8005fd6 <_printf_i+0x162>
 8005fbe:	07ca      	lsls	r2, r1, #31
 8005fc0:	bf44      	itt	mi
 8005fc2:	f041 0120 	orrmi.w	r1, r1, #32
 8005fc6:	6021      	strmi	r1, [r4, #0]
 8005fc8:	b91b      	cbnz	r3, 8005fd2 <_printf_i+0x15e>
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	f022 0220 	bic.w	r2, r2, #32
 8005fd0:	6022      	str	r2, [r4, #0]
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	e7b7      	b.n	8005f46 <_printf_i+0xd2>
 8005fd6:	064d      	lsls	r5, r1, #25
 8005fd8:	bf48      	it	mi
 8005fda:	b29b      	uxthmi	r3, r3
 8005fdc:	e7ef      	b.n	8005fbe <_printf_i+0x14a>
 8005fde:	4665      	mov	r5, ip
 8005fe0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fe4:	fb02 3311 	mls	r3, r2, r1, r3
 8005fe8:	5cc3      	ldrb	r3, [r0, r3]
 8005fea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005fee:	460b      	mov	r3, r1
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	d1f5      	bne.n	8005fe0 <_printf_i+0x16c>
 8005ff4:	e7b9      	b.n	8005f6a <_printf_i+0xf6>
 8005ff6:	6813      	ldr	r3, [r2, #0]
 8005ff8:	6825      	ldr	r5, [r4, #0]
 8005ffa:	6961      	ldr	r1, [r4, #20]
 8005ffc:	1d18      	adds	r0, r3, #4
 8005ffe:	6010      	str	r0, [r2, #0]
 8006000:	0628      	lsls	r0, r5, #24
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	d501      	bpl.n	800600a <_printf_i+0x196>
 8006006:	6019      	str	r1, [r3, #0]
 8006008:	e002      	b.n	8006010 <_printf_i+0x19c>
 800600a:	066a      	lsls	r2, r5, #25
 800600c:	d5fb      	bpl.n	8006006 <_printf_i+0x192>
 800600e:	8019      	strh	r1, [r3, #0]
 8006010:	2300      	movs	r3, #0
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	4665      	mov	r5, ip
 8006016:	e7b9      	b.n	8005f8c <_printf_i+0x118>
 8006018:	6813      	ldr	r3, [r2, #0]
 800601a:	1d19      	adds	r1, r3, #4
 800601c:	6011      	str	r1, [r2, #0]
 800601e:	681d      	ldr	r5, [r3, #0]
 8006020:	6862      	ldr	r2, [r4, #4]
 8006022:	2100      	movs	r1, #0
 8006024:	4628      	mov	r0, r5
 8006026:	f7fa f90b 	bl	8000240 <memchr>
 800602a:	b108      	cbz	r0, 8006030 <_printf_i+0x1bc>
 800602c:	1b40      	subs	r0, r0, r5
 800602e:	6060      	str	r0, [r4, #4]
 8006030:	6863      	ldr	r3, [r4, #4]
 8006032:	6123      	str	r3, [r4, #16]
 8006034:	2300      	movs	r3, #0
 8006036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800603a:	e7a7      	b.n	8005f8c <_printf_i+0x118>
 800603c:	6923      	ldr	r3, [r4, #16]
 800603e:	462a      	mov	r2, r5
 8006040:	4639      	mov	r1, r7
 8006042:	4630      	mov	r0, r6
 8006044:	47c0      	blx	r8
 8006046:	3001      	adds	r0, #1
 8006048:	d0aa      	beq.n	8005fa0 <_printf_i+0x12c>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	079b      	lsls	r3, r3, #30
 800604e:	d413      	bmi.n	8006078 <_printf_i+0x204>
 8006050:	68e0      	ldr	r0, [r4, #12]
 8006052:	9b03      	ldr	r3, [sp, #12]
 8006054:	4298      	cmp	r0, r3
 8006056:	bfb8      	it	lt
 8006058:	4618      	movlt	r0, r3
 800605a:	e7a3      	b.n	8005fa4 <_printf_i+0x130>
 800605c:	2301      	movs	r3, #1
 800605e:	464a      	mov	r2, r9
 8006060:	4639      	mov	r1, r7
 8006062:	4630      	mov	r0, r6
 8006064:	47c0      	blx	r8
 8006066:	3001      	adds	r0, #1
 8006068:	d09a      	beq.n	8005fa0 <_printf_i+0x12c>
 800606a:	3501      	adds	r5, #1
 800606c:	68e3      	ldr	r3, [r4, #12]
 800606e:	9a03      	ldr	r2, [sp, #12]
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	42ab      	cmp	r3, r5
 8006074:	dcf2      	bgt.n	800605c <_printf_i+0x1e8>
 8006076:	e7eb      	b.n	8006050 <_printf_i+0x1dc>
 8006078:	2500      	movs	r5, #0
 800607a:	f104 0919 	add.w	r9, r4, #25
 800607e:	e7f5      	b.n	800606c <_printf_i+0x1f8>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1ac      	bne.n	8005fde <_printf_i+0x16a>
 8006084:	7803      	ldrb	r3, [r0, #0]
 8006086:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800608a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800608e:	e76c      	b.n	8005f6a <_printf_i+0xf6>
 8006090:	08007421 	.word	0x08007421
 8006094:	08007432 	.word	0x08007432

08006098 <_sbrk_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4c06      	ldr	r4, [pc, #24]	; (80060b4 <_sbrk_r+0x1c>)
 800609c:	2300      	movs	r3, #0
 800609e:	4605      	mov	r5, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	6023      	str	r3, [r4, #0]
 80060a4:	f7fd fbce 	bl	8003844 <_sbrk>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_sbrk_r+0x1a>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_sbrk_r+0x1a>
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	200005a8 	.word	0x200005a8

080060b8 <memmove>:
 80060b8:	4288      	cmp	r0, r1
 80060ba:	b510      	push	{r4, lr}
 80060bc:	eb01 0302 	add.w	r3, r1, r2
 80060c0:	d807      	bhi.n	80060d2 <memmove+0x1a>
 80060c2:	1e42      	subs	r2, r0, #1
 80060c4:	4299      	cmp	r1, r3
 80060c6:	d00a      	beq.n	80060de <memmove+0x26>
 80060c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80060d0:	e7f8      	b.n	80060c4 <memmove+0xc>
 80060d2:	4283      	cmp	r3, r0
 80060d4:	d9f5      	bls.n	80060c2 <memmove+0xa>
 80060d6:	1881      	adds	r1, r0, r2
 80060d8:	1ad2      	subs	r2, r2, r3
 80060da:	42d3      	cmn	r3, r2
 80060dc:	d100      	bne.n	80060e0 <memmove+0x28>
 80060de:	bd10      	pop	{r4, pc}
 80060e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80060e8:	e7f7      	b.n	80060da <memmove+0x22>

080060ea <__malloc_lock>:
 80060ea:	4770      	bx	lr

080060ec <__malloc_unlock>:
 80060ec:	4770      	bx	lr

080060ee <_realloc_r>:
 80060ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f0:	4607      	mov	r7, r0
 80060f2:	4614      	mov	r4, r2
 80060f4:	460e      	mov	r6, r1
 80060f6:	b921      	cbnz	r1, 8006102 <_realloc_r+0x14>
 80060f8:	4611      	mov	r1, r2
 80060fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80060fe:	f7ff bc97 	b.w	8005a30 <_malloc_r>
 8006102:	b922      	cbnz	r2, 800610e <_realloc_r+0x20>
 8006104:	f7ff fc46 	bl	8005994 <_free_r>
 8006108:	4625      	mov	r5, r4
 800610a:	4628      	mov	r0, r5
 800610c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800610e:	f000 f814 	bl	800613a <_malloc_usable_size_r>
 8006112:	42a0      	cmp	r0, r4
 8006114:	d20f      	bcs.n	8006136 <_realloc_r+0x48>
 8006116:	4621      	mov	r1, r4
 8006118:	4638      	mov	r0, r7
 800611a:	f7ff fc89 	bl	8005a30 <_malloc_r>
 800611e:	4605      	mov	r5, r0
 8006120:	2800      	cmp	r0, #0
 8006122:	d0f2      	beq.n	800610a <_realloc_r+0x1c>
 8006124:	4631      	mov	r1, r6
 8006126:	4622      	mov	r2, r4
 8006128:	f7ff fbc4 	bl	80058b4 <memcpy>
 800612c:	4631      	mov	r1, r6
 800612e:	4638      	mov	r0, r7
 8006130:	f7ff fc30 	bl	8005994 <_free_r>
 8006134:	e7e9      	b.n	800610a <_realloc_r+0x1c>
 8006136:	4635      	mov	r5, r6
 8006138:	e7e7      	b.n	800610a <_realloc_r+0x1c>

0800613a <_malloc_usable_size_r>:
 800613a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800613e:	1f18      	subs	r0, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	bfbc      	itt	lt
 8006144:	580b      	ldrlt	r3, [r1, r0]
 8006146:	18c0      	addlt	r0, r0, r3
 8006148:	4770      	bx	lr
	...

0800614c <_init>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	bf00      	nop
 8006150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006152:	bc08      	pop	{r3}
 8006154:	469e      	mov	lr, r3
 8006156:	4770      	bx	lr

08006158 <_fini>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	bf00      	nop
 800615c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615e:	bc08      	pop	{r3}
 8006160:	469e      	mov	lr, r3
 8006162:	4770      	bx	lr
